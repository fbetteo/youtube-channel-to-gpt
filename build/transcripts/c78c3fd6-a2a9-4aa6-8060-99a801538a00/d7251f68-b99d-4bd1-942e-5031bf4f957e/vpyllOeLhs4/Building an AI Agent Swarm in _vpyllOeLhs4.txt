Video Title: Building an AI Agent Swarm in n8n Just Got So Easy
Video ID: vpyllOeLhs4
URL: https://www.youtube.com/watch?v=vpyllOeLhs4
View Count: 64,899

[00:00] Today I'm going to show you guys how you
[00:01] can automate anything with NADN agent
[00:03] swarms. This type of multi-agent system
[00:05] is insanely powerful and you don't need
[00:07] any prior coding experience to set one
[00:09] up. So I'm going to be walking over a
[00:11] few live examples of me using this
[00:12] executive agent swarm. Then I'm going to
[00:14] talk about how it works, how I built it,
[00:16] and I'm also going to give you
[00:17] everything you need to set this up for
[00:18] yourself for completely free. So make
[00:20] sure to stick around and I'll show you
[00:21] how you can access that. All right, so
[00:22] I've got Telegram pulled up on my phone
[00:24] and I'm going to go ahead and send our
[00:25] agent a message. Please find me four
[00:27] high performing YouTube videos about N8N
[00:30] and then send that as an email to Dexter
[00:32] Morgan. And then finally, also let me
[00:34] know about the weather today in Chicago.
[00:37] All right, so I just sent that off and
[00:38] now our agent's basically going to get
[00:39] that transcribed audio and now it's
[00:41] going to decide between its five
[00:43] different agents which ones to call. So
[00:45] you can already see it finished up
[00:46] calling the web agent to get the
[00:47] weather. It called the contact agent to
[00:49] get Dexter Morgan's email address. And
[00:51] now it's calling the YouTube agent in
[00:53] order to actually find YouTube videos
[00:54] that are high performing and about nodn.
[00:57] And so that's the power of an agent
[00:58] swarm. This main orchestrator parent
[01:01] agent, all it has to do is understand,
[01:02] okay, I have five different agents.
[01:04] Which ones should I use? Rather than
[01:05] saying, okay, I have like 30 tools.
[01:08] Which tools do I use? And this framework
[01:09] makes our results more consistent and
[01:11] higher quality because each agent is
[01:13] very specialized. And now that the agent
[01:15] has all it needs, it decides, okay, now
[01:17] I can call the email agent to send that
[01:18] email to Dexter Morgan. So, you can see
[01:20] it just fired off that email with the
[01:22] send email tool, and now it's going to
[01:24] log all of its outputs and respond to us
[01:26] in Telegram. All right, so it just
[01:27] finished up. I got my Telegram message
[01:29] back, but I'm just going to pull it up
[01:30] on my desktop so you guys can see it as
[01:32] well. It said, "I have found four high
[01:33] performing videos about NAN and sent
[01:35] them in an email to Dexter Morgan. I
[01:37] also included today's weather in
[01:38] Chicago, which is overcast clouds with a
[01:40] temperature of 81Â°." If I look outside
[01:42] right now, I can see that it is indeed
[01:44] overcast clouds. When I hop over to my
[01:46] email, we can see that we just have one
[01:48] sent to dextermiami.com
[01:51] and it has four high performing videos
[01:52] about Nitn. Each of these include the
[01:54] title, the channel, a link to the full
[01:56] video, how many views it has, how many
[01:58] likes, and how long the actual video is.
[02:00] So that's awesome. It did what we wanted
[02:01] it to. It called the right agents, but
[02:03] not only did it do the right tasks, but
[02:05] it also logged everything so we can look
[02:07] and have full visibility. So that's
[02:09] exactly what's going on in this portion
[02:10] of the workflow. So if I head over to
[02:12] this Google sheet, you can see that we
[02:14] have the time of the run, we have the
[02:16] inputs, we have the outputs, we have the
[02:17] actions that were taken, and then also
[02:19] how many tokens were used up. So in the
[02:22] actions, this is really cool because we
[02:23] can see first it called the contact
[02:25] agent and it basically got Dexter's
[02:27] email, which was dextermiami.com.
[02:29] Then it went to the web agent to get the
[02:31] weather in Chicago and it got the
[02:32] weather. Then it used the YouTube agent
[02:35] to find four high performing YouTube
[02:37] videos about NAND. And then finally, it
[02:39] called the email agent to send that
[02:40] email to Dexter Morgan. And we can see
[02:43] it called different agents. It had
[02:44] different prompts it had to run through.
[02:45] And it costed us a total here of 5,000
[02:47] tokens using GPT4.1 Mini. So that's a
[02:51] cool little system. So you can see what
[02:52] actions your agents are calling and
[02:54] stuff like that. But let's head back
[02:56] over to the workflow and let me start to
[02:58] break down how this actually works. So
[03:00] if you've seen my channel before, you
[03:01] may have come across this video where I
[03:03] built an ultimate personal assistant,
[03:04] which is kind of similar to what we're
[03:06] looking at today. The main difference
[03:07] here is that Naden just released an
[03:09] update which allows us to keep our
[03:10] agents all in the same workflow rather
[03:12] than in this version where the ultimate
[03:14] assistant calls this subworkflow and we
[03:16] can't really see what's going on and
[03:17] this is basically the workflow it calls
[03:20] because of this update which was like
[03:22] 1.103. We can now keep all of our agents
[03:24] in the same place and we can visually
[03:26] watch everything happen on the same
[03:28] screen. And what's cool about having a
[03:29] swarm framework where we have different
[03:31] agents for each different task, the main
[03:33] one only has to think about, okay, if
[03:35] the user wants something to do with
[03:36] email, I'm not going to worry about
[03:37] which tools. I'm just going to send it
[03:39] to the email agent and the email agent
[03:40] will figure it all out because as you
[03:43] can see here, every single agent has its
[03:45] own brain. They each have their own chat
[03:47] models and that means that they also
[03:50] each have their own system prompts. So,
[03:52] we're able to split up all the system
[03:53] prompts and make each agent's job very
[03:55] specific and increase the quality of
[03:57] their outputs. It also gives us the
[03:59] flexibility to have different chat
[04:00] models for different agents. In this
[04:02] case, I'm using GPT 4.1 Mini for all of
[04:04] them. But if something's really simple,
[04:06] maybe like grabbing contact information.
[04:08] We could switch this out for a cheaper
[04:10] model like Google Flash. And if you
[04:12] notice that your emails sound too much
[04:14] like AI and you want them to be written
[04:15] better, you could maybe switch out to
[04:17] something like a more expensive
[04:18] anthropic model. So, not only do you
[04:20] have more flexibility, but like I said,
[04:22] higher quality outputs. And so, if
[04:24] you're thinking to yourself, okay, so
[04:25] there's six different agents, there's
[04:26] six different memories. They're not
[04:28] going to work very cohesively as a team.
[04:30] Well, you'd be wrong. What we can do is
[04:31] we can have all six agents hooked up to
[04:33] the same memory. In this case, I don't,
[04:35] just because each of these sub agents
[04:37] jobs are super specific to like a
[04:39] one-time task, like sending an email,
[04:40] creating an event, doing research. So,
[04:42] they don't really need full context. But
[04:44] as you can see, each agent has the
[04:46] ability to add memory, just like our
[04:48] main agent right here has memory. And
[04:50] the way that memory works is it's stored
[04:52] based on a session ID. And I don't want
[04:54] to get too technical here, but basically
[04:55] think of a session ID like a contact. In
[04:57] your phone, you have different contacts.
[04:59] And each contact you have different
[05:00] conversations. So, as long as we have
[05:02] all of the agents hooked up to the same
[05:04] session ID for their memory, they'll all
[05:06] be looking at the same conversation when
[05:08] they're taking action. So depending on
[05:10] the situation, your agents may need to
[05:12] all be linked together with some sort of
[05:13] session ID for memory. But in this case
[05:16] where each agent is basically just
[05:17] getting a task, doing the job, and then
[05:19] moving on with their day, we don't need
[05:21] them to be linked together. But the
[05:22] reason I wanted to bring that up is
[05:23] because in the past when you wanted to
[05:25] pass over a variable like a session ID
[05:28] from main agent to a sub agent, you'd
[05:30] have to pass it through as a separate
[05:31] variable. But here, it's really easy
[05:33] because everything's in the same
[05:34] workflow. I could easily add a memory to
[05:37] the email agent and all I'd have to do
[05:39] is reference the actual Telegram trigger
[05:41] chat ID that I was using in the earlier
[05:44] memory. So now that that's linked up, we
[05:46] would basically have our email sub agent
[05:48] and our main agent always looking at the
[05:50] same conversation. So they're basically
[05:51] linked up. Let's do one more example
[05:53] that's even a little more complex to
[05:55] show you guys how the agent handles it.
[05:56] All right, so our agent's listening. I'm
[05:58] going to send it another message in
[05:59] Telegram. Please get my YouTube video
[06:01] ideas from the database. do some
[06:03] research on them with Tavi and then send
[06:05] that research brief in an email to
[06:08] Michael Scott and then make a calendar
[06:10] event for today at 4M to go over that
[06:14] research with Michael Scott. All right,
[06:16] so I'm going to send that off. This is a
[06:18] pretty loaded task, so we'll see how the
[06:19] agent handles it. It's going to have to
[06:21] call multiple different agents here. You
[06:23] can see it's calling the YouTube agent
[06:25] to get our ideas. It called the contact
[06:27] agent to get Michael Scott's contact
[06:28] information. And now it's calling the
[06:30] web agent and it's going to do some
[06:31] research on those YouTube video ideas. I
[06:34] think I told it to use Tavi, but it
[06:35] probably transcribed it a little bit
[06:37] poorly, so it decided to use Perplexity.
[06:39] But that's completely fine. The agent
[06:40] made the decision and it's going to do
[06:41] some research on our YouTube video
[06:43] ideas. Either way, it's finishing up
[06:44] that research and now it's going to call
[06:46] the email agent and the calendar agent
[06:47] to make that calendar event and send off
[06:49] that email. Okay, so it just finished
[06:51] calling the calendar agent and
[06:52] everything's finished up. I'm going to
[06:53] go ahead and switch over to our email
[06:54] and we'll take a quick look. Okay, so
[06:56] here's our sent email to
[06:57] mike@cratescott.com.
[06:59] We have three different YouTube video
[07:00] ideas and you can see inbox to action,
[07:02] autoscrape leads, YouTube content
[07:04] engine. These are the video ideas that
[07:06] existed already in my YouTube video
[07:08] ideas database. And for each of these
[07:10] videos, what it did is it used
[07:11] perplexity to research them and
[07:13] basically helps me figure out how I can
[07:15] make these different workflows for a
[07:16] YouTube video. And if you remember, we
[07:19] asked the agent to create a calendar
[07:20] event as well with Michael Scott. So, if
[07:22] I go over in my calendar, we should see
[07:23] that we have review research brief on
[07:25] YouTube video ideas at 4 p.m. And we
[07:28] added Mike at Great Scott as an attendee
[07:30] to the event. And of course, the final
[07:32] piece of the puzzle here is that the
[07:33] agent should have logged everything in
[07:35] the Google sheet. So, if we come over
[07:36] here, we can see we had a new run at
[07:38] 11:36. We have the input, we have the
[07:40] output, we have the tools that were
[07:41] called, which in this case was all five
[07:43] agents were used in this run. And then
[07:45] this one costed us a total of 8,500
[07:47] tokens. So, I don't want to waste the
[07:49] whole video with demoing all the
[07:50] different use cases. is I hope you guys
[07:52] can see how cool and how powerful this
[07:53] agent swarm is. And now what we're going
[07:55] to do is step by step build one
[07:56] together, just a really mini version of
[07:58] this one so that you guys can get a
[07:59] taste of how you can come in here and
[08:00] build your own executive agent swarm.
[08:03] All right, so here we are in a fresh
[08:04] blank canvas and what I'm going to do is
[08:06] hit tab and I'm going to grab in an AI
[08:08] agent. So here we have our AI agent and
[08:11] the first thing we need to do is connect
[08:12] a chat model which is basically going to
[08:14] be the brain for the AI agent. And so
[08:16] what I like to do is I like to use open
[08:17] router. So if you go to open router.ai,
[08:19] AI. Go ahead and make an account. And in
[08:21] the top right, what you're going to want
[08:22] to do is go to your keys. In here,
[08:25] you'll be able to create an API key,
[08:26] which is kind of a fancy word for a
[08:28] password. And what you're going to do is
[08:29] create your API key. Name it whatever
[08:31] you want. And then once you create that,
[08:33] you're going to get this unique value,
[08:34] which you will copy. Once you copy that
[08:37] value, you're going to go into N, add a
[08:39] chat model. You're going to scroll down
[08:40] to open router. And all you need to do
[08:42] is create a new account, and you're
[08:43] going to paste in your API key right
[08:45] here. Once you've saved, it should go
[08:47] green. And basically this tells us that
[08:48] our agent has access to some sort of
[08:50] brain. Just make sure in open router you
[08:53] have billing information inserted
[08:56] otherwise you won't be able to use it.
[08:57] And so now if I click into this node I
[08:59] can basically choose which chat model I
[09:01] want to use. And as you can see there
[09:02] are a ton. So that's why I like to use
[09:04] open router. So from here what we're
[09:06] going to do is add our first agent which
[09:07] is going to be an email agent. I would
[09:09] basically add this agent as a tool. And
[09:11] now what we can do rather than what we
[09:13] used to do in this version of the
[09:14] Ultimate Assistant where we called a sub
[09:16] workflow as a tool. What we're able to
[09:19] do is literally just type an AI agent
[09:21] and we can add an AI agent as a tool. So
[09:23] we have a whole agent baked in right
[09:25] here and we're going to have to connect
[09:26] a chat model. We'll have to do all the
[09:27] other things. So now this main agent is
[09:29] basically just in charge of this sub
[09:31] agent. So once again, real quick, I'm
[09:33] going to add a brain to this guy. So I'm
[09:35] going to scroll down to open router and
[09:36] we already have our credentials set up.
[09:38] So it's that easy. So, like I said,
[09:40] we're going to make this agent an email
[09:42] agent. So, I'm just going to name it
[09:43] email agent. I'm going to put a
[09:45] description in here that says email
[09:47] agent to take action with email. And
[09:49] then what I'm going to do for the user
[09:50] message is I'm just going to hit this
[09:52] button right here that lets the model
[09:53] define this parameter.
[09:55] What this means is that when the main
[09:57] agent decides, okay, I'm going to use
[09:59] the email agent, it's basically going to
[10:01] say, here's what you do. And that is
[10:03] what's happening right here in the user
[10:04] message. And just to show you guys an
[10:06] example of that to make it make a little
[10:07] more sense, we had this main agent,
[10:10] right? And it decided to call the
[10:11] YouTube agent. And so when it called the
[10:13] YouTube agent, it filled in the user
[10:15] message with get my YouTube video ideas
[10:17] from the database. So it's basically
[10:19] just the main agent telling this sub
[10:21] agent what to do. And if it hasn't quite
[10:24] stuck yet, let's also look at the
[10:25] contact agent. The main agent said,
[10:27] "Okay, I'm going to use you, Mr. Contact
[10:29] agent, and what I want you to do is get
[10:31] contact information for Michael Scott."
[10:33] Okay, so hopefully that all makes sense
[10:35] now. And now what we have to do is just
[10:36] connect an email tool to our email
[10:38] agent. So I'm going to click on tool.
[10:40] I'm going to type in Gmail tool. And now
[10:42] we just need to set this thing up as
[10:44] well. So if you haven't connected to any
[10:45] of your Google tools before, I'm going
[10:47] to link a video right up here where I
[10:48] explain how that works. But then once
[10:50] you finish that, come back here and
[10:51] we'll set up this Gmail tool. So similar
[10:54] to what we just did with that user
[10:55] message, I'm basically going to let the
[10:57] AI agent decide who is it going to,
[10:59] what's the subject, and what is the
[11:01] actual body message. I'm also real quick
[11:03] going to change the email type to text
[11:05] and I'm going to add an option down at
[11:06] the bottom which lets us turn off the
[11:08] NADN attribution at the bottom of an
[11:10] email. And it's that simple. We already
[11:12] have this Gmail tool set up. So what I'm
[11:14] going to do is I'm going to chat with
[11:16] this agent to see if it's able to send
[11:17] an email. And one thing I want to call
[11:19] out to you guys is that we haven't put
[11:21] any system prompt in either of the
[11:22] agents. So this is just to reiterate how
[11:25] easy it is to build this stuff nowadays.
[11:27] When you start to build out more agents
[11:29] and more tools, you will have to system
[11:31] prompt it. As you can see in this main
[11:32] agent, it has a big system prompt right
[11:35] here where we explain here's your job,
[11:36] here are the tools you have, here are
[11:38] your instructions. And then every single
[11:41] sub agent as well has a prompt. So this
[11:43] email sub aent, we basically tell it
[11:45] here are your tools. Here's when to use
[11:46] each one. But like I said, for
[11:48] simplicity sake, just to show you guys
[11:50] how we start off building this kind of
[11:51] stuff, I don't even have any system
[11:53] prompt in any of these agents yet. So,
[11:55] I'm going to open up the chat and I'm
[11:56] going to say send an email to
[11:58] nate@acample.com
[12:00] asking him if he's having a good day.
[12:03] So, once we fire this off, we're going
[12:04] to see the main agent decide I need to
[12:06] use email agent. Email agent decides I
[12:08] need to use tool. Although, we can see
[12:10] we got an error with this tool. So, let
[12:12] me check in on what happened. We can see
[12:14] that it's red. I'll click into here and
[12:15] basically what it says is that the email
[12:18] address is invalid. So the AI model
[12:21] decided to fill in the two with just
[12:23] Nate rather than Nate@acample.com.
[12:25] So now we know it made a mistake. Let's
[12:27] add a little bit of a system prompt in
[12:29] there. So I have two options. I could
[12:31] basically come into the email agent. I
[12:32] could add an option, add a system
[12:34] message, and I could say, "Hey, by the
[12:36] way, whenever you're sending an email to
[12:37] someone, it basically needs to be a
[12:39] valid email address." But an even
[12:41] simpler way to do that is basically come
[12:43] back into the tool, go right here and
[12:45] add a description to the two field where
[12:47] I can just tell the agent this must be a
[12:50] valid email address. So honestly, I
[12:53] believe that this simple fix will be
[12:54] enough. And let's test it out again. So
[12:56] there's a little arrow above this
[12:58] message. I'm just going to hit that
[12:59] which basically sends it off again. And
[13:01] now we'll see if the email agent can get
[13:02] it right. Okay, so I just figured out
[13:05] what's actually going wrong. The email
[13:07] agent isn't messing up. the main agent's
[13:09] messing up because what happens is the
[13:11] main agent is getting this message that
[13:12] says to send an email to
[13:13] nate@acample.com and if we click on the
[13:16] logs we can see what it does and we can
[13:18] see here that it basically calls on the
[13:20] email agent tool and it passes in as the
[13:23] input hi Nate I just wanted to check in
[13:27] so what happened here is the main agent
[13:29] decided I want to make the email rather
[13:31] than saying okay Mr. email agent, you do
[13:33] all this work. So, all we have to do is
[13:36] probably system prompt the main agent to
[13:38] tell it you don't need to take action.
[13:40] You don't need to send emails. You just
[13:42] need to delegate the task to the right
[13:43] tool. So, I'm going to add a system
[13:45] message and basically just say exactly
[13:47] that. So, here you can see I gave it
[13:48] three short sentences about what its
[13:50] role should be. And once again, we're
[13:52] going to save this and just try again.
[13:54] All right. So, I just shot off the exact
[13:55] same message. We didn't change anything
[13:57] else. And now you can see that it went
[13:58] through. And I know this may be a little
[14:00] bit overwhelming or a little bit
[14:01] confusing at the moment if this is one
[14:02] of your first agents that you've built,
[14:04] but once again, let me just walk through
[14:06] what just happened. So, we'll click into
[14:08] the main agent and we're going to go to
[14:10] the agent logs. When you read through
[14:12] the logs, this is basically how it
[14:13] works. The first thing that it did is it
[14:15] calls its brain in order to read the
[14:16] system message to understand what to do
[14:18] next. Once it read that, it called the
[14:21] email agent. And this time, what it did
[14:23] is it sent over this message to the
[14:24] email agent. send an email to
[14:26] nate@example.com asking him if he's
[14:28] having a good day. So now we can see
[14:31] that the main agent isn't creating stuff
[14:32] itself. It's just delegating the task
[14:34] which is exactly what should be
[14:36] happening in an agent swarm. From there,
[14:38] the email agent then uses its brain,
[14:40] decides, okay, I need to create an
[14:41] email, and then it passes over these
[14:44] parameters to its send Gmail tool, which
[14:46] are here's who it's going to, here's the
[14:48] subject, and then here's the actual
[14:50] body. And then basically that gets
[14:51] communicated back to the main agent, and
[14:53] then the main agent responds to us. So,
[14:56] there's really three key things that you
[14:57] need to master in order to build agent
[14:59] swarms. The first one is going to be
[15:01] understanding how to read through the
[15:02] agent logs. That's super super important
[15:04] for debugging and making sure that your
[15:06] agents are doing what you told them to
[15:07] do. So you guys just saw me basically
[15:09] run into an error, try to fix it. It
[15:11] didn't work. So what I did was I looked
[15:12] at the logs to figure out where exactly
[15:14] in this chain of command is something
[15:17] breaking. So the more experience you get
[15:19] with reading agent logs and
[15:20] understanding what's going on, how data
[15:22] is being passed between different
[15:23] agents, the better you'll get at
[15:25] understanding how you can build things
[15:26] that work. Now the second thing is going
[15:28] to be prompting. Because what happens is
[15:30] it's going to work fine when you have
[15:32] one agent and one tool, but as you scale
[15:34] them up, you're going to have multiple
[15:36] more things to include in your prompt.
[15:38] For example, with this guy, we have we
[15:42] have one main agent and we tell it,
[15:43] okay, you are basically an orchestrator
[15:45] delegator agent and you have five agents
[15:47] to work with. It understands that now
[15:49] and it does its job pretty well, but I
[15:51] wasn't able to just throw the prompt in
[15:52] and have it work like magic. What you're
[15:54] going to really have to do is understand
[15:56] the aspect of reactive prompting. I
[15:58] actually did a full video about reactive
[16:00] prompting and I'll include this entire
[16:01] PDF along with all the other resources
[16:03] that you'll get to create the system,
[16:04] but this goes over some really key
[16:06] things about basically debugging one
[16:07] error at a time, scaling up slowly,
[16:09] adding tools one at a time in order to
[16:11] make sure that everything's working
[16:13] rather than basically throwing in 20
[16:15] tools and a huge system prompt at once
[16:16] and hitting run. You won't know exactly
[16:18] where things are going wrong. And then
[16:20] the final element to understand is the
[16:22] tool calling. Basically, all of these
[16:24] different tools, what we're doing is
[16:25] we're letting the AI model decide how to
[16:28] fill in the parameters. So, to give you
[16:29] guys some more context here, what
[16:31] happens with like a send email tool is
[16:33] the AI model decides who's it going to,
[16:35] what's the subject, and what's the body
[16:37] message. So, as you can see in this
[16:39] Gmail tool, we let the AI model decide
[16:42] who's it going to, what's the subject,
[16:43] and what's the body message. So, if we
[16:46] wanted to add something else like a
[16:47] calendar agent, we'd basically add
[16:48] another tool. We'd add an AI agent as a
[16:51] tool and we would call this one a
[16:52] calendar agent. So we gave it a
[16:54] description, we gave it a name, and then
[16:56] what I'm going to do once again is let
[16:57] the main agent decide what message this
[17:00] calendar agent receives. So we let the
[17:01] AI model decide that. Now we would
[17:04] basically need to give the calendar
[17:05] agent access to a brain once again. So I
[17:07] can actually drag this little thing into
[17:09] a different brain. So now the email
[17:11] agent and calendar agent use the same
[17:12] chat model. And then what we can do is
[17:14] add a calendar tool. So, if I go to the
[17:16] tool button right here and I type in
[17:18] Google calendar, we'll grab this guy and
[17:21] we will basically do a create event
[17:22] operation, I would choose the calendar
[17:24] that I want it to access. And then we
[17:26] have a start time and an end time. And
[17:28] what I'm able to do is basically just
[17:30] say, okay, AI model, you're going to
[17:32] decide when this event's going to start
[17:34] and end. Okay, so I just asked it to
[17:36] create a calendar event for today at 1
[17:37] p.m. for lunch. You can see the agent
[17:39] called the calendar agent. You can see
[17:41] the calendar agent called the create
[17:42] event tool. everything looked like it
[17:44] worked. So, if I go over to my calendar,
[17:47] we don't see the event. So, this is
[17:49] where you need to understand, okay,
[17:51] things look like it worked, but I'm not
[17:52] seeing the actual result that I was
[17:54] looking for. Now, what I need to do is I
[17:56] need to look at the tool. I need to look
[17:57] at the different agent logs and see what
[17:59] actually happened. And then we'll figure
[18:00] out where things went wrong. So, that's
[18:02] exactly what I'm going to do with you
[18:03] guys. And I'm going to start by looking
[18:05] at the tool to see what actually
[18:07] happened in our Google calendar. So, if
[18:09] I click into the tool, what you can see
[18:11] happened is the agent created an event
[18:13] for 1 p.m., but it made it for April
[18:16] 27th of 2024, which was, you know, over
[18:20] a year ago. So, now I would think to
[18:22] myself, okay, why did it do that? And to
[18:24] understand why it did that, I would go
[18:25] to the main agent. I would click on the
[18:27] logs and I would just start to go in
[18:29] order. So, first of all, it calls its
[18:31] brain. And then from there, it decides,
[18:33] okay, I need to use the calendar agent.
[18:35] when it calls the calendar agent, it
[18:37] says, "Create a calendar event for lunch
[18:39] today at 1 p.m." So now I'm thinking to
[18:41] myself, okay, the agent doesn't actually
[18:44] know what day is today. And that's
[18:46] exactly why when it goes to fill out the
[18:48] parameters for the calendar tool, it
[18:50] makes it for a year ago. A lot of times
[18:52] when I'm building things and I'm trying
[18:53] to figure out what's going wrong and how
[18:55] to fix it, this is going to sound really
[18:56] obvious, but I promise you it's a really
[18:58] really good way to think is just think
[19:00] about if I face this problem in real
[19:02] life as a human doing this manually.
[19:04] What would I do? And so in this case,
[19:06] what I would do is I would look at my
[19:07] phone and figure out, okay, I was told
[19:09] to make an event for today, what day is
[19:11] today? I would look at my phone, I'd
[19:13] realize that today is, you know, July
[19:14] 25th. And then I would basically make
[19:16] the event for July 25th.
[19:18] So, the way we're going to fix that here
[19:20] is I am going to give both agents access
[19:23] to today's current date and time. And to
[19:25] do that, I would come into the system
[19:26] prompt of this main AI agent. I'm going
[19:29] to make sure it's an expression so we
[19:30] can put in a live variable. And I'm just
[19:32] going to say today's date is colon two
[19:36] curly braces and then we have a little
[19:38] variable right here, dollar sign now.
[19:40] And all that does is it gives the agent
[19:42] the current date and time no matter what
[19:44] time you're using it. And so I'm just
[19:46] going to copy this little sentence that
[19:47] I made. I'm going to go into the
[19:49] calendar agent and I'm going to give it
[19:51] the exact same information. Make sure
[19:52] it's an expression and just say today's
[19:55] date is blank.
[19:57] So now that I've saved that, if I open
[19:59] up the chat and I run this exact same
[20:01] message, I'm pretty sure it should be
[20:03] able to do this correctly. It decides
[20:05] which agent to use. The agent decides
[20:07] which tool to use. And now if we go into
[20:09] our Google calendar, we can see we have
[20:11] an event here today at 1 p.m. although
[20:14] we don't have a title. So same thing I
[20:16] would basically think about okay why is
[20:18] there no title let me go look at this
[20:20] actual Google calendar tool I can see
[20:22] that the agent is automatically
[20:23] populating two parameters the start time
[20:25] and the end time but there's no
[20:27] parameter here for title so what I would
[20:29] do is I would want to add an additional
[20:30] field I would basically come down here
[20:32] to summary I think summary is how it
[20:35] shows up in Google calendar as a title
[20:37] and then I would just let the AI agent
[20:39] decide what's the summary so now that
[20:41] I've saved that and we know that the
[20:42] agent's going to send over start time
[20:44] end time and title. I can send off this
[20:46] query that's asking it to make an event
[20:48] for 6 p.m. for dinner. The agent's
[20:50] calling the right tool. And now we can
[20:52] go ahead and check our calendar. And we
[20:54] can see we have an event for 6 p.m.
[20:55] called dinner. Okay. So now we've
[20:58] basically built out this mini agent
[21:00] swarm where we have a main orchestrator
[21:02] agent and we have an email agent and a
[21:03] calendar agent. What would be next from
[21:06] here is you'd start to scale up these
[21:07] agents by giving them access to
[21:09] different email tools and different
[21:10] calendar tools. But I've made it really
[21:12] easy for you guys because what you can
[21:14] do is you can leverage all of the tools
[21:16] and system prompts in this agent swarm
[21:18] that I've already built. You could
[21:20] basically come into the email agent and
[21:22] you could copy this exact system prompt
[21:23] and then put it into your email agent.
[21:26] You could also then copy all of these
[21:28] tools, go into your workflow and paste
[21:30] them in and then just drag and drop and
[21:32] connect these tools to your own agent.
[21:35] Now, one thing to note if you do take
[21:37] this route is that within these tools,
[21:39] because I built these a while ago, what
[21:41] I have is these little from AI
[21:43] functions. And I just wanted to show you
[21:45] guys that these from AI functions are
[21:47] the exact same thing as what we set up
[21:49] together where we click the button to
[21:51] let the model define.
[21:53] They're doing the exact same thing.
[21:54] Naden just made an update where they
[21:56] made it even easier than typing in a
[21:57] from ai function. So whether you want to
[21:59] set them up yourself and use that button
[22:01] or you want to just copy in these tools
[22:03] that I already have with the from AI
[22:04] functions, don't worry about it. They're
[22:06] doing the exact same things. Real quick
[22:08] guys, while I'm editing this video, I
[22:10] thought of something that I wanted to
[22:11] make sure I mentioned. These agent
[22:12] swarms are super cool and end is doing a
[22:14] great job at making it really, really
[22:16] easy and more accessible to people to
[22:18] build these agents that call other
[22:19] agents. But ultimately, I think that the
[22:21] majority of automations that you can
[22:23] build for yourself or for your business
[22:24] or whatever it is don't need to be
[22:26] agents and don't need to be agent
[22:28] swarms. There's a big difference between
[22:30] building an AI agent and building an AI
[22:32] workflow. And I think that the majority
[22:34] of business problems can be solved with
[22:36] a really good AI workflow. The
[22:39] difference here is that with a workflow,
[22:40] we're still using AI. We're still using
[22:42] tools, but we're basically controlling
[22:44] the exact flow. So, we know that the
[22:46] process goes 1 2 3 4 5 6. And there's
[22:50] literally no way for the process to go 1
[22:53] 4 2 6. It has to follow our exact
[22:56] instructions every time. So if you're
[22:58] trying to automate a deterministic and
[23:00] predictable process that follows a
[23:02] step-by-step guide every single time,
[23:04] you want to go with a workflow. Agents
[23:07] are really cool because they use AI as a
[23:09] reasoning and a decision-making aspect.
[23:12] And that's when we have processes that
[23:13] are unpredictable, non-deterministic,
[23:15] and we need that assistance from an AI.
[23:18] So, I would encourage you to think
[23:19] about, am I building something that
[23:21] needs to be an agent or am I building an
[23:22] agent because I think it's cooler. I've
[23:24] gotten caught up in the hype of AI
[23:26] agents and built agents when they could
[23:27] have been workflows for sure. So, I just
[23:29] wanted to throw that out there real
[23:30] quick. If you want to watch a full
[23:31] video, I've done a full video on this
[23:33] exact topic, which I will link right up
[23:34] here. But, let's get right back to the
[23:36] main video. So, now I need to tell you
[23:38] guys about how you can actually access
[23:40] this and the agent log sheet right here
[23:43] that you see in order to basically
[23:44] duplicate this exact system. What you're
[23:47] going to do is go to my free school
[23:48] community. The link for that is down in
[23:49] the description. And once you get in
[23:51] here, you can get all of my resources
[23:53] from every single YouTube video I've
[23:54] made for completely free. You'll click
[23:56] on YouTube resources or you'll search
[23:58] for the title of the video using the
[24:00] search bar. And once you find that post
[24:02] for this video, you'll basically click
[24:04] on it. And what you'll have right here
[24:05] is a JSON file. This JSON file can be
[24:08] downloaded and then it can be imported
[24:10] into your own annst instance. And when
[24:12] you import it, you'll basically just see
[24:14] this right here. Once you import it,
[24:17] you'll be on your own to set up your own
[24:18] credentials and connect to your own
[24:20] Google suites and everything like that.
[24:22] But there will be a setup guide as a
[24:23] sticky note right over here and it will
[24:25] walk you through everything that you
[24:26] need to go set up. And then I also said
[24:28] that I would be giving you guys this
[24:29] Google sheet template so that you can
[24:31] plug it in and start tracking your agent
[24:32] actions as well. So there will be a link
[24:34] to this in the post I make in my free
[24:36] school community with the template. And
[24:38] I'll also include this attachment as a
[24:40] PDF if you want to go ahead and learn
[24:42] more about reactive prompting. So, with
[24:44] all of those resources and, you know,
[24:46] watching a ton of other videos on my
[24:47] channel, you'll be on your way to
[24:49] setting up your first agent swarm, even
[24:51] if you don't really have a technical
[24:52] background. And in the process of
[24:54] setting up your swarm, if you need free
[24:56] tech support and you're looking to take
[24:57] your learnings a little bit deeper, then
[24:58] check out my paid community. The link
[25:00] for that is also down in the
[25:01] description. We've got a great community
[25:02] of members in here that are building
[25:03] with NADN every single day. And like I
[25:05] said, it's free tech support. So, as
[25:07] soon as you get stuck, you can make a
[25:08] post in here. You'll have members
[25:10] helping you out. I'll help you out and
[25:11] people that are officially on my support
[25:13] specialist team. We've also got a
[25:15] classroom section with two full courses.
[25:17] Agent zero is the foundations of AI
[25:19] automations for beginners and then 10
[25:20] hours to 10 seconds where you learn how
[25:22] to identify, design, and build
[25:24] time-saving automations. So, I'd love to
[25:26] see you guys in these communities. But
[25:28] that is going to do it for today. If you
[25:29] enjoyed the video or you learned
[25:30] something new, please give it a like.
[25:31] Definitely helps me out a ton. And as
[25:33] always, I appreciate you guys making it
[25:34] to the end of the video. I'll see you on
[25:36] the next one. Thanks, guys.