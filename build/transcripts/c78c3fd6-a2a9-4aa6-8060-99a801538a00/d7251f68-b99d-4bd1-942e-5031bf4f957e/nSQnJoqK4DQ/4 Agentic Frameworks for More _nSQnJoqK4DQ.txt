Video Title: 4 Agentic Frameworks for More Efficient Workflows in n8n
Video ID: nSQnJoqK4DQ
URL: https://www.youtube.com/watch?v=nSQnJoqK4DQ
View Count: 41,553

[00:00] so in my ultimate assistant video we
[00:01] utilize an agentic framework called
[00:03] parent agent so as you can see we have a
[00:05] parent agent right here which is the
[00:06] ultimate assistant that's able to send
[00:08] tasks to its four child agents down here
[00:10] which are different workflows that we
[00:12] built out within naden if you haven't
[00:13] seen that video I'll tag it right up
[00:14] here but how it works is the ultimate
[00:16] assistant could get a query from the
[00:17] human and decide that it needs to send
[00:19] that query to the email agent which
[00:20] looks like this and then the email agent
[00:22] will be able to use its Tools in Gmail
[00:24] and actually take action from there it
[00:26] responds to the parent agent and then
[00:27] the parent agent is able to take that
[00:29] response back from the child agent and
[00:30] then respond to us in telegram so it's a
[00:32] super cool system it allows us to
[00:33] delegate tasks and also these agents can
[00:35] be activated in any specific order it
[00:37] doesn't always have to be the same but
[00:39] is this framework always the most
[00:40] effective no so today I'm going to be
[00:42] going over four different agentic
[00:43] Frameworks that you can use in your NN
[00:45] workflows the first one we're going to
[00:46] be talking about is prompt chaining the
[00:48] second one is routing the third one is
[00:50] parallelization and the fourth one is
[00:52] evaluator Optimizer so we're going to
[00:54] break down how they all work what
[00:55] they're good at but make sure you stick
[00:56] around to the end because this one the
[00:57] evaluator Optimizer is the one that's
[00:59] got me most excited so before we get
[01:01] into this first framework if you want to
[01:02] download these four templates for free
[01:04] so you can follow along you can do so by
[01:06] joining my free school Community you'll
[01:08] come in here click on YouTube resources
[01:10] click on the post associated with this
[01:11] video and then you'll have the workflow
[01:13] right here to download so the link for
[01:14] that's down in the description there's
[01:15] also going to be a link for my paid
[01:16] Community which is if you're looking for
[01:18] a more Hands-On approach to learning
[01:19] nadn we've got a great community of
[01:21] members who are also dedicated to
[01:22] learning nadn sharing resources sharing
[01:24] challenges sharing projects stuff like
[01:26] that we've got a classroom section where
[01:27] we're going over different Deep dive
[01:28] topics like building agents vect
[01:30] databases apis and HTTP requests and I
[01:32] also just launched a new course where
[01:33] I'm doing the step-by-step tutorials of
[01:35] all the videos that I've shown on
[01:36] YouTube and finally we've got five live
[01:38] calls per week to make sure that you're
[01:39] getting questions answered never getting
[01:40] stuck and also networking with
[01:42] individuals in the space we've also got
[01:44] guest speakers coming in in February
[01:45] which is super exciting so I'd love to
[01:47] see you guys in these calls anyways back
[01:48] to the video here the first one we're
[01:50] going to be talking about is prompt
[01:51] chaining so as you can see the way this
[01:53] works we have three agents here and what
[01:55] we're doing is we're passing the output
[01:56] of an agent directly as the input into
[01:59] the next agent and so on so forth so
[02:01] here are the main benefits of this type
[02:02] of workflow it's going to lead to
[02:04] improved accuracy and quality because
[02:06] each step focuses on a specific task
[02:08] which will help reduce errors and
[02:09] hallucinations greater control over each
[02:11] step we can refine the system prompt of
[02:13] the outline writer and then we can
[02:14] refine The Prompt of the evaluator so we
[02:16] can really tweak what's going on and how
[02:18] data is being transferred specialization
[02:20] is going to lead to more effective
[02:22] agents so as you can see in this example
[02:24] we're having one agent write the outline
[02:26] one of them evaluates the outline and
[02:27] makes suggestions and then finally we
[02:29] pass that revised outline to the blog
[02:31] writer who's in charge of actually
[02:32] writing the blog so this is going to
[02:34] lead to a much more cohesive thought
[02:36] through actual blog in the end compared
[02:38] to if we would just fed in all of this
[02:41] system prompt into one agent and then
[02:43] finally with this type of framework
[02:44] we've got easier debugging and
[02:45] optimization because it's linear we can
[02:47] see where things are going wrong finally
[02:48] it's going to be more scalable and
[02:49] reusable as we're able to plug in
[02:51] different agents wherever we need them
[02:52] okay so what we have to do here is we're
[02:53] just going to enter in a keyword a topic
[02:56] for this um blog so I'm just going to
[02:58] enter in coffee and we'll see that the
[03:00] agents start going to work so the first
[03:01] one is an outline writer um one thing
[03:03] that's also really cool about this
[03:04] framework and some of the other ones
[03:05] we're going to cover is that because
[03:07] we're splitting up the different tasks
[03:08] we're able to utilize different large
[03:10] language models so as you can see the
[03:11] outline writer we gave 20 flash because
[03:14] it's it's free um it's it's powerful but
[03:16] not super powerful and we just need a
[03:18] brief outline to be written here and
[03:19] then we can pass this on to the next one
[03:20] that uses for mini it's a little more
[03:22] powerful a little more expensive but
[03:24] still not too bad and we want this more
[03:26] powerful chat model to be doing the
[03:27] evaluating and refining of the outline
[03:30] and then finally for the actual blog
[03:31] writing content we want to use something
[03:33] like claw 3.5 or even deep seek R1
[03:35] because it's going to be more powerful
[03:36] and it's going to take that revised
[03:38] outline and then structure a really nice
[03:39] blog post for us so that's just part of
[03:42] the specialization not only can we split
[03:44] up the tasks but we can plug and play
[03:46] different chat models where we need to
[03:48] rather than feeding everything through
[03:49] one you know one deep seek r one blog
[03:51] writer at the very beginning so this
[03:53] one's finishing up here it's about to
[03:55] get pushed into a Google doc where we'll
[03:56] be able to go over there and take a look
[03:58] at the blog that I got for us about
[04:00] coffee so looks like it just finished up
[04:02] here we go detailed blog post based on
[04:05] option one a comprehensive guide to
[04:06] Coffee here's our title um we have a
[04:09] rich history of coffee from Bean to cup
[04:11] we have um different methods we have
[04:13] different coffee varieties we have all
[04:15] this kind of stuff health benefits and
[04:17] risks um and as you can see this pretty
[04:19] much was a four-page Blog we've got a
[04:20] conclusion at the end anyways let's dive
[04:22] into what's going on here so the concept
[04:24] is passing the output into the input and
[04:27] then taking that output and passing it
[04:28] into the next input so here we have
[04:31] here's the topic to write a blog about
[04:32] which all it got here was the word
[04:33] coffee that's what we typed in the
[04:35] system message is that you an expert
[04:37] outline writer your job is to generate a
[04:38] structured outline for a blog post with
[04:40] Section titles and key points so here's
[04:42] the first draft at the outline using
[04:44] twoof flash then we pass that into an
[04:47] outline evaluator that's using foral
[04:48] mini we said here's the outline we gave
[04:50] it the outline of course and then the
[04:53] system message is you're an expert blog
[04:54] evaluator your job is to revise this
[04:56] outline and make sure it hits these four
[04:57] criteria which are engaging uction clear
[05:00] section breakdown logical flow and then
[05:02] a conclusion so we told it to only
[05:03] output the revised outline so now we
[05:05] have a new outline over here and finally
[05:08] we're sending that into a CLA 3.5 blog
[05:10] writer where we gave it the revised
[05:11] outline and just said you're an expert
[05:13] blog writer generate a detailed blog
[05:15] post using this outline with well
[05:17] structured paragraphs and engaging
[05:18] content so that's how this works you can
[05:21] see it will be even more powerful once
[05:22] we hook up you know like some internet
[05:23] search functionality and if we added
[05:25] like an editor at the end before it
[05:27] actually pushed it into the the Google
[05:28] Doc or whatever it is but that's how
[05:30] this framework works but let's move into
[05:32] agentic framework number two now we're
[05:34] going to talk about the routing
[05:35] framework in this case we have an
[05:36] initial llm call right here to classify
[05:39] incoming emails and based on that
[05:40] classification it's going to Route it up
[05:42] as high priority customer support
[05:44] promotion or finance and billing and as
[05:46] you can see there's different actions
[05:47] that are going to take place we have
[05:49] different agents depending on what type
[05:50] of message comes through so the first
[05:52] agent which is the text classifier here
[05:54] basically just has to decide okay which
[05:56] agent do I need to send this email off
[05:58] to anyways why would you want to use
[05:59] routing because you're going to have an
[06:00] optimized response handling so as we
[06:02] could see in this case we're able to set
[06:03] up different personas for each of our
[06:05] agents here rather than having one
[06:07] General AI response agent then this can
[06:09] be more scalable and modular it's going
[06:11] to be faster and more efficient and then
[06:13] you can also introduce human escalation
[06:14] for critical issues like we do up here
[06:16] with our high priority agent and finally
[06:18] it's just going to be a better user
[06:19] experience for for your team and also
[06:21] your customers so I hit test step what
[06:24] we're getting here is an email that I
[06:25] just sent to myself that says hey I need
[06:27] help logging into my account can you
[06:28] help me so this email classifier is
[06:30] going to label this as customer support
[06:31] as soon as we hit play it's going to
[06:33] send it down the customer support Branch
[06:34] right here as you can see we got one new
[06:36] item what's going on in this step is
[06:37] that we're just labeling it in our Gmail
[06:39] as a customer support email and then
[06:41] finally we're going to fire it off to
[06:42] the customer support agent in this case
[06:44] this one is trained on customer support
[06:46] activities um this is where you could
[06:47] hook up a customer support database if
[06:49] you needed and what it's going to do is
[06:50] it's going to create an email draft for
[06:52] us in reply to the email that we got so
[06:54] let's go take a look at that so here's
[06:56] the email we got hey I need help loging
[06:57] into my account as you can see our agent
[06:59] was able to label it as customer support
[07:01] and then finally it created this email
[07:02] which was hey Nate thanks for reaching
[07:04] out I'd be happy to assist you with
[07:05] logging into your account please provide
[07:06] me with some more details um about the
[07:08] issue you're experiencing blah blah blah
[07:10] and then this one signs off best regards
[07:12] Kelly because she's the customer support
[07:13] rep okay let's take a look at a
[07:15] different example um we'll pull in the
[07:16] trigger again and this time we're going
[07:17] to be getting a different email so as
[07:19] you can see this one says Nate this is
[07:20] urgent we need your outline tomorrow or
[07:22] you're fired so hopefully this one gets
[07:24] labeled as high priority it's going to
[07:25] go up here to the high priority Branch
[07:27] once again we're going to label that
[07:28] email as high priority but instead of
[07:30] activating an email draft reply tool
[07:32] this one has access to a telegram tool
[07:34] so what it's going to do is text us
[07:35] immediately and say hey this is the
[07:37] email you got you need to take care of
[07:38] this right away um and obviously the
[07:40] logic you can choose of what you want to
[07:42] happen based on what route it is but
[07:43] let's see we just got telegram message
[07:45] urgent email from Nate herkelman stating
[07:47] that an outline is needed by tomorrow or
[07:49] there will be serious consequences
[07:50] potential termination so that way it
[07:52] notifies us right away we're able to get
[07:54] into our email manually you know get get
[07:56] caught up on the thread and then respond
[07:57] how we need to and so pretty much the
[07:59] same thing for the other two promotional
[08:00] email will get labeled as promotion we
[08:02] come in here and see that we are able to
[08:04] set a different persona for the
[08:05] promotion agent which is you're in
[08:07] charge of promotional opportunities your
[08:08] job is to respond to inquiries in a
[08:10] friendly professional manner and use
[08:12] this email to send reply to customer all
[08:14] we sign off as Meredith from ABC Corp so
[08:16] each agent has a different sort of
[08:17] persona that it's able to respond to in
[08:19] finance agent we have we have this agent
[08:21] signing off as as Angela from ABC Corp
[08:24] um anyways what I did here was I hooked
[08:27] them all up to the same chat model and I
[08:28] hooked them all up to the same tool
[08:30] because they're all going to be sending
[08:32] an email draft here as you can see we're
[08:35] using from AI to determine the subject
[08:37] the message in the thread ID which it's
[08:38] going to pull in from the actual Gmail
[08:40] Trigger or sorry the Gmail trigger is
[08:42] not using fromi we're we're mapping in
[08:44] the Gmail trigger because every time an
[08:46] email comes through it can just look at
[08:48] that um email in order to determine the
[08:51] thread ID for sending out an email but
[08:53] you don't have to connect them up to the
[08:55] same tool I just did it this way because
[08:56] then I only had to create one tool same
[08:58] thing with the different chat models
[08:59] based on the you know importance of
[09:01] what's going through each route you
[09:02] could switch out the chat models we
[09:04] could have even used a cheaper easier
[09:05] one for the classification if we wanted
[09:07] to but in this case I just hooked them
[09:09] all up to a 40 mini chat model anyways
[09:11] this was just a really simple example of
[09:13] routing you could have 10 different
[09:14] routes you could have just two different
[09:16] routes but the idea is that you're using
[09:17] one agent up front to determine which
[09:19] way to send off the data moving on to
[09:21] the third framework we've got
[09:22] parallelization what we're going to do
[09:24] here is be using three different agents
[09:26] and then we're going to merge their
[09:27] outputs aggregate them together and then
[09:28] feed them all to a final agent to sort
[09:30] of you know throw it all into one
[09:32] response so what this is going to do is
[09:34] give us faster analysis rather than
[09:36] processing everything linearly so in
[09:38] this case we're going to be sending in
[09:39] some input and then we're going to have
[09:40] one agent analyze the emotion behind it
[09:42] one agent do the intent behind it and
[09:44] then one agent analyze any bias rather
[09:46] than doing it one by one they're all
[09:48] going to be working simultaneously and
[09:49] then throwing their outputs together so
[09:51] it can decrease the latency there
[09:52] they're going to be specialized which
[09:54] means we could have specialized system
[09:55] prompts like we do here we also could do
[09:57] specialized um large language models
[09:59] again where we could plug in different
[10:00] different models if we wanted to maybe
[10:02] feed through the same prompt use CLA up
[10:04] here open a eye down here and then you
[10:06] know deep seek down here and then
[10:07] combine them together to make sure we're
[10:08] getting the best thought out answer um
[10:11] comprehensive review and then more
[10:12] scalability as well but how this one's
[10:14] going to work is we're putting in an
[10:15] initial message which is I don't trust
[10:16] the mainstream media anymore they always
[10:18] push a specific agenda and ignore real
[10:20] issues people need to wake up and stop
[10:22] believing everything they see on the
[10:23] news so we're having an emotion agent
[10:25] first of all analyze the emot emotional
[10:27] tone categorize it as positive mutal
[10:30] negative or mixed with a brief
[10:31] explanation the intent agent is going to
[10:33] analyze the intent behind this text and
[10:35] then finally the bias agent is going to
[10:37] analyze this text for any potential bias
[10:40] so we'll hit this off um we're going to
[10:42] get those three separate analysises um
[10:44] or analysis and then we're going to be
[10:46] sending that into a final agent that's
[10:48] going to basically combine all those
[10:50] outputs and then write a little bit of
[10:51] report based on our input so as you can
[10:54] see right now it's waiting here for um
[10:56] the input from the bias agent once that
[10:58] happens it's going to get AGG created
[10:59] and now it's being sent into the final
[11:01] agent and then we'll take a look at um
[11:03] the report that we got in our Google doc
[11:06] okay just finished up let's hop over to
[11:07] docs we'll see we got an emotional tone
[11:09] intent and bias analysis report overview
[11:12] is that um the incoming text has strong
[11:14] negative sentiment towards mainstream
[11:16] media yep emotional tone is negative
[11:18] sentiment intent is persuasive goal um
[11:20] the bias analysis has political bias
[11:22] generalization emotional language lack
[11:24] of evidence um it's got recommendations
[11:26] for how we can make this text more
[11:28] neutral Revis message and then let's
[11:30] just read off the conclusion the
[11:31] analysis highlights a significant level
[11:33] of negativity and bias in the original
[11:35] message directed towards mainstream
[11:36] media by implementing the suggested
[11:38] recommendations the author can promote a
[11:39] more balanced and credible perspective
[11:41] that encourages critical assessment of
[11:43] media consumption blah blah blah so as
[11:45] you can see that's going to be a much
[11:47] better you know comprehensive analysis
[11:49] than if we would have just fed the
[11:50] initial input into an agent and said hey
[11:53] can you analyze this text for emotion
[11:54] intent and bias but now we got that
[11:56] split up merged together put into the
[11:58] final one for you know a comprehensive
[12:00] review and an output and it's going to
[12:03] turn the the you know data in into Data
[12:05] out process it's going to be a lot more
[12:07] efficient finally the one that gets me
[12:08] the most excited um the evaluator
[12:11] Optimizer framework where we're going to
[12:12] have an evaluator agent decide if what's
[12:14] passing through is good or not if it's
[12:16] good we're fine but if it's not it's
[12:18] going to get optimized and then sent
[12:19] back to the evaluator for more
[12:21] evaluation and this is going to be an
[12:22] endless loop until the evaluator agent
[12:24] says okay finally it's good enough we'll
[12:26] send it off so if you watch my human in
[12:28] the loop video it's going to be just
[12:29] like that where we were providing
[12:31] feedback and we were the ones basically
[12:32] deciding if it was good to go or not but
[12:34] in this case we have an agent that does
[12:35] that so it's going to be optimizing all
[12:37] your workflows on the back end without
[12:39] you being in the loop so obviously the
[12:41] benefits here are that it's going to
[12:42] ensure high quality outputs it's going
[12:44] to reduce errors and manual review it's
[12:46] going to be flexible and scalable and
[12:48] then it's going to optimize the ai's
[12:49] performance because it's sort of an
[12:50] iterative approach that um you know
[12:53] focuses on continuous improvement from
[12:55] these AI generated
[12:56] responses so what we're doing here is we
[12:58] have a biography agent what we told this
[13:00] agent to do is um basically write a
[13:02] biography you're an expert biography
[13:04] writer you'll receive information about
[13:05] a person your job is to create an entire
[13:07] profile using the information they give
[13:09] you and I told it you're allowed to be
[13:10] creative from there we're setting the
[13:13] bio and we're just doing this here so
[13:15] that we can continue to feed this back
[13:16] over and over that way if we have five
[13:19] revisions it'll still get passed every
[13:21] time the most recent version to the
[13:22] agent and also the most recent version
[13:24] when it's approved will get pushed up
[13:26] here to the Google Doc then we have the
[13:28] evaluator agent what we told this agent
[13:30] to do is um evaluate the biography your
[13:33] job is to provide feedback we gave a
[13:35] criteria so make sure that it includes a
[13:37] quote from the person make sure it's
[13:39] light and humorous and make sure it has
[13:41] no Emojis only need to Output the
[13:43] feedback if the biography is finished
[13:44] and all criteria are met then all you
[13:46] need to Output is finished so then we
[13:48] have a check to say okay does the output
[13:50] from the evaluator agent say finished or
[13:52] is it feedback if it's feedback it's
[13:54] going to go to the optimizer agent and
[13:56] continue on this Loop until it says
[13:57] finished once it finally says finished
[13:59] as you can see we set json. output which
[14:02] is the output from the evaluator agent
[14:04] equals finished when that happens it'll
[14:07] go up here and then we'll see it in our
[14:08] Google doc but then what we have in the
[14:10] actual Optimizer agent is we're giving
[14:12] it the biography and this is where we're
[14:14] referencing the set field where we
[14:15] earlier right here where we set the bio
[14:17] this way the optimizer agent's always
[14:19] getting the most updated version of the
[14:21] bio and then we're also going to get the
[14:23] feedback so this is going to be the
[14:24] output from the evaluator agent because
[14:26] if it does go down this path the
[14:27] evaluator agent means that it output
[14:30] feedback rather than saying finished so
[14:32] it's getting feedback it's getting the
[14:33] biography and then we're saying you're
[14:35] an expert reviser your job is to take
[14:36] the biography and optimize it based on
[14:38] the feedback so it gets all it needs in
[14:40] the user message and then it outputs us
[14:42] a better optimized version of that
[14:44] biography okay so let's do an example
[14:46] real quick um if you remember in the
[14:48] biography agent well all we have to do
[14:49] is give it a you know some information
[14:51] about a person to write a biography on
[14:53] so I'm going to come in here and I'm
[14:54] just going to say gym
[14:57] 42 um
[14:59] lives by the ocean okay so that's all
[15:02] we're going to put in we'll see that
[15:03] it's writing a brief biography right now
[15:05] and then we're going to see it get
[15:06] evaluated we're going to see if it you
[15:08] know met those criteria if it doesn't
[15:10] it's going to get sent to the optimizer
[15:11] agent the optimizer agent is going to
[15:13] get um basically the criteria it needs
[15:16] to hit as well as the original biography
[15:18] so here's the evaluator agent look at
[15:20] that it decides that it wasn't good
[15:21] enough now it's being sent to the
[15:23] optimizer agent who is going to optimize
[15:25] the bio send it back and then hopefully
[15:27] on the second run it'll go up and get
[15:29] published in the docs if it's not good
[15:30] enough yet then it will come back to the
[15:32] agent and it will optimize it once again
[15:34] but I think that this agent will do a
[15:35] good job there we go we can see it just
[15:37] got pushed up into the dock so let's
[15:38] take a look at our Google doc here's a
[15:41] biography for Jim Thompson he lives in
[15:43] California he's 43 um ocean Enthusiast
[15:46] passion Adventure a profound respect for
[15:49] nature it talks about his early life and
[15:51] obviously he's making all this up talks
[15:53] about his education talks about his
[15:54] career talks about his personal life
[15:57] here we have a quote from Jim which is I
[15:59] swear the fish are just as curious about
[16:00] me as I am about them we've even got
[16:02] another quote um a few dad jokes along
[16:04] the way why did the fish blush because
[16:05] it saw the ocean's bottom so not sure I
[16:08] completely get that one oh no I get that
[16:09] one um anyways then Hobbies philosophy
[16:12] Legacy and a conclusion so this is you
[16:14] know a pretty optimized blog post it
[16:16] meets all the criteria that we had put
[16:17] into our agents as far as you know this
[16:19] is what you need to evaluate for it's
[16:21] very light there's no Emojis thre some
[16:22] jokes in there and then it has some
[16:24] quotes from Jim as well so as you can
[16:26] see all we put in was Jim 43 livz by the
[16:28] ocean and we got a whole basically a
[16:30] story written about this guy and once
[16:32] again just like all of these Frameworks
[16:33] pretty much you have the flexibility
[16:35] here to change out your model wherever
[16:36] you want so let's say we don't really
[16:38] mind up front we could use something
[16:40] really cheap and quick and then maybe
[16:41] for the actual Optimizer agent we want
[16:43] to plug in something a little more um
[16:45] you know with reasoning aspect like
[16:46] deeps car1 potentially anyways that's
[16:48] all I've got for you guys today hope
[16:49] this one was helpful hope this one you
[16:51] know sparked some ideas for next time
[16:53] you're going into Ed end to build an
[16:55] agentic workflow maybe looking at I
[16:57] could actually have structured my
[16:58] workflow in this framework and it would
[16:59] have been a little more efficient than
[17:01] the current way I'm doing it like I said
[17:02] these four templates will be in the free
[17:04] school Community if you want to download
[17:05] them and just play around with them to
[17:06] understand what's going on understand
[17:08] you know when to use each framework
[17:10] stuff like that anyways as always I
[17:11] really really appreciate you guys making
[17:13] it to the end of this one if you learned
[17:14] something new if it helps you out please
[17:16] give it a like it definitely helps me
[17:17] out and um yeah um I'll see you guys in
[17:20] the next video