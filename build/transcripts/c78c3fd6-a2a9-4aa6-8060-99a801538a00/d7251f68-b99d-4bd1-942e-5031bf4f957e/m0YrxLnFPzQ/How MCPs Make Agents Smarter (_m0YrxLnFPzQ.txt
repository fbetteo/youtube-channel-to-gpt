Video Title: How MCPs Make Agents Smarter (for non-techies)
Video ID: m0YrxLnFPzQ
URL: https://www.youtube.com/watch?v=m0YrxLnFPzQ
View Count: 98,252

[00:00] all right so keep in mind there is zero
[00:01] prompting going on within the actual
[00:02] agent it just says you are a helpful
[00:04] assistant now I'm going to ask it to get
[00:06] Airbnb listings in Miami it's hitting
[00:08] airbnb's MPC server in order to
[00:10] understand okay what resources do I have
[00:12] what actions can I take what are the
[00:13] tool names and now it's hitting its
[00:15] execute tool in order to fill in the
[00:17] tool name and fill in the different
[00:18] parameters that it needs to pull back
[00:20] those listings that we're looking for so
[00:22] it should be finishing up any second now
[00:23] and we will be able to see these
[00:24] listings that we got there we go so we
[00:26] have here are some Airbnb listings in
[00:28] Miami 126 Sabo it gets us price
[00:30] information location all this kind of
[00:32] stuff if we click in here we should see
[00:34] an actual picture of Airbnb listing this
[00:36] is actually kind of just a boat but
[00:37] either way um we got five total here's a
[00:39] beautiful Suite in Miami which once
[00:41] again Airbnb Miami now to look at what
[00:44] it actually did as we know it hit the
[00:46] server first to list out the tools so as
[00:48] you can see it has Airbnb search which
[00:50] we use when we want to search for
[00:51] listings and here are the different
[00:52] filters that we can use the different
[00:54] parameters and then we have the other
[00:55] tool which is listing details in order
[00:57] to get information about a specific
[00:58] listing and in that cas these are the
[01:00] different parameters that we would send
[01:01] over so because the agent was able to
[01:03] understand this is what I have access to
[01:05] and this is when I use each one I'm
[01:06] going to fill in my tool which is over
[01:08] here the tool I used is Airbnb search
[01:11] and I know that one of the parameters I
[01:12] need to fill out is the location which I
[01:14] will put Miami and then we get all of
[01:16] our actual results back cool we're going
[01:18] to do one more quick example which is
[01:20] asking it to scrape Chipotle so sent
[01:22] that off it's going to hit fir crawls
[01:23] mCP server this time in order to
[01:25] understand what actions do I have over
[01:26] here what can I do and now it's hitting
[01:28] the actual tool to take action for us
[01:30] and we should get back you know the the
[01:32] scrape results from chipotle.com so it's
[01:34] finishing up now and we should see the
[01:35] results right here so let's make this a
[01:37] little bigger I've scraped the main
[01:39] content from Chipotle homepage here's a
[01:40] summary we have new Chipotle honey
[01:42] chicken chipotle rewards menu highlights
[01:44] guacamole all this kind of stuff and if
[01:46] we were to click into the fir craw
[01:48] actions tool we can see that fir crawl
[01:50] has more than just those two actions
[01:52] that Airbnb had it has scrape it has map
[01:55] it has crawl it has all of these it has
[01:56] nine total even deep research and then
[01:59] the execute tool is able to say okay in
[02:01] this case I need to scrape I need to use
[02:03] this URL I am going to format it and
[02:05] mark down and then we get our answer
[02:07] back here so what's going on in this
[02:08] tool is it's basically nine tools
[02:10] wrapped into one and all of these other
[02:12] ones are multiple tools wrapped into one
[02:13] as well so if we wanted to build out
[02:15] this entire agent it would have to look
[02:17] something like this if we weren't
[02:18] accessing mCP servers and once again in
[02:21] that demo there was Zero prompting going
[02:23] on within the agent and there was no
[02:25] prompting going on within the
[02:26] descriptions of the parameters to be
[02:27] sent over either so this is really just
[02:30] all I did was plug in the servers and
[02:31] give it a chat model if we really got
[02:33] more refined with our prompting these
[02:35] things are going to get really powerful
[02:36] so we're going to hop into an excal draw
[02:38] I'm going to break down what is actually
[02:39] going on what mCP is as simple as I can
[02:42] and if you guys are wanting a
[02:43] step-by-step build of you know how we
[02:45] actually you know spin up a self-hosted
[02:46] environment install the community node
[02:48] right that we're looking at right here
[02:50] make sure everything's configured
[02:51] correctly and then you know actually
[02:53] connect to the different mCP servers
[02:54] that we want then definitely drop a like
[02:56] and let me know in the comments if you
[02:57] want to see that cuz I would love to
[02:58] make a video covering this top topic so
[03:00] let's get into the breakdown okay so
[03:02] model context protocol I swear the past
[03:05] week it's been the only thing I've seen
[03:07] in YouTube comments YouTube videos
[03:09] Twitter LinkedIn it's just all over and
[03:12] I don't know about you guys but when I
[03:14] first started reading about this kind of
[03:15] stuff I was kind of intimidated by it I
[03:18] didn't completely understand what was
[03:19] going on it was very techy and you know
[03:22] kind of abstract I also felt like I was
[03:24] getting different information based on
[03:25] every source so we're going to break it
[03:27] down as simple as possible how it makes
[03:30] AI agents more intelligent okay so we're
[03:32] going to start with the basics here
[03:33] let's just pretend we're going back to
[03:35] Chad gbt which is you know a large
[03:37] language model what we have is an input
[03:39] on the left we're able to ask it a
[03:41] question you know help me write this
[03:42] email tell me a joke whatever it is we
[03:44] feed in an input the llm thinks about it
[03:46] and provides some sort of answer to us
[03:48] as an output and that's really all that
[03:50] happens the next Evolution was when we
[03:53] started to give L's tools and that's
[03:56] when we got AI agents because now we
[03:58] could ask it to do something like write
[04:00] an email but rather than just writing
[04:01] the email and giving it back to us it
[04:03] could call a tool to actually write that
[04:05] email and then it would tell us there
[04:07] you go the job's done and so this really
[04:09] started to expand the capabilities of
[04:10] these llms because they could actually
[04:12] take action on our behalf rather than
[04:14] just sort of assisting us and getting us
[04:16] 70% of the way there and so before we
[04:18] start talking about mCP servers and how
[04:20] that enhances our agents abilities we
[04:22] need to talk about how these tools work
[04:25] and sort of the limitations of them okay
[04:27] so sticking with that email example
[04:28] let's pretend that this is an email
[04:29] agent that's helping us take action and
[04:31] email what it's going to do is each tool
[04:34] has a very specific function so this
[04:36] first tool over here you can see this
[04:37] one is going to label emails the second
[04:39] tool in the middle is going to get
[04:40] emails and then this third one on the
[04:41] right is going to send emails so if you
[04:43] watch my ultimate assistant video If you
[04:45] haven't I'll tag it right up here what
[04:47] happened was we had a main agent and
[04:48] then it was calling on a separate agent
[04:50] that was an email agent and as you can
[04:52] see here was all of its different tools
[04:53] and each one had one very specific
[04:55] function that it could do and it was
[04:57] basically just up to the email agent
[04:58] right here to decide which one to use
[05:00] based on the incoming query and so the
[05:02] reason that these tools aren't super
[05:04] flexible is because within each of these
[05:06] configurations we basically have to
[05:08] hardcode in what is the operation I'm
[05:11] doing here and what's the resource and
[05:13] then we can feed in some Dynamic things
[05:14] like different message IDs or label IDs
[05:17] over here you know the operation is git
[05:19] the resource is message so that won't
[05:20] change and then over here the operation
[05:22] is that we're sending a message and so
[05:24] this was really cool because agents were
[05:26] able to use their brains whatever large
[05:28] language model we had plugged into them
[05:30] to understand which tool do I need to
[05:31] use and it still works pretty well but
[05:33] when it comes to being able to scale
[05:35] this up and you want to interact with
[05:36] multiple different things not just Gmail
[05:38] and Google Calendar you also want to
[05:40] interact with a CRM and different
[05:42] databases that's where it starts to get
[05:45] a little confusing so now we start to
[05:47] interact with something called an mCP
[05:49] server and it's basically just going to
[05:51] be a layer between your agent and
[05:53] between the tools that you want to hit
[05:54] which would be right here and so when
[05:56] the agent sends a request to the
[05:57] specific mCP server in this case let's
[05:59] pretend its notion it's going to get
[06:01] more information back than hey what
[06:03] tools do I have and what's the
[06:04] functionality here it's also going to
[06:06] get information about like what are the
[06:07] resources there what are the schemas
[06:09] there what are the prompts there and it
[06:11] uses all of that to understand how to
[06:13] actually take the action that we asked
[06:15] back here in the whole input that
[06:17] triggered the workflow when it comes to
[06:18] different Services talking to each other
[06:20] so in this case nadn and notion there's
[06:23] been you know a standard in the way that
[06:25] we send data across and we get data back
[06:27] which has been the rest apis and these
[06:29] standards are really important because
[06:31] we have to understand how can we
[06:32] actually format our data and send it
[06:34] over and know that it's going to be
[06:36] received in the way that we intend it to
[06:38] be and so that's exactly what was going
[06:40] on back up here where every time that we
[06:42] wanted to interact with a specific tool
[06:43] we were hitting a specific endpoint so
[06:46] the endpoint for labeling emails was
[06:48] different for the endpoint for sending
[06:49] emails and besides just those endpoints
[06:51] or functions being different there was
[06:53] also different things that we had to
[06:54] configure within each tool call so over
[06:57] here you can see what we had to do was
[06:59] in order to send an email we have to
[07:01] give it who it's going to what the
[07:03] subject is the email type and the
[07:05] message which is different from the
[07:06] information we need to send to this tool
[07:08] which is what's the message ID you want
[07:09] to label and what is the label name or
[07:12] ID to give to that message by going
[07:14] through the mCP server it's basically
[07:17] going to be a universal translator that
[07:18] takes the information from the llm and
[07:21] it enriches that with all of the
[07:23] information that we need in order to hit
[07:24] the right tool with the right schema
[07:26] fill in the right parameters access the
[07:28] right resources all that kind of stuff
[07:30] the reason I put notion here for an
[07:32] example of an mCP server is because
[07:34] within your notion you'll have multiple
[07:36] different databases and within those
[07:37] databases you're going to have tons of
[07:39] different columns and then all of those
[07:41] you know are going to have different
[07:42] pages so being able to have the mCP
[07:45] server translate back to your agent here
[07:47] are all of the databases you have here
[07:49] is the schema or the different fields or
[07:51] columns that are in each of your
[07:53] databases um and also here are the
[07:54] actions you can take Now using that
[07:56] information what do you want to do real
[07:59] quick coping back to the example of the
[08:00] ultimate assistant what we have up here
[08:02] is the main agent and then it had four
[08:04] child workflows child agents that it
[08:07] could hit that had specializations in
[08:09] certain areas so the Gmail agent which
[08:11] we talked about right down here the
[08:12] Google Calendar agent the contact agent
[08:15] which was air table and then the content
[08:17] creator agent so all that this agent had
[08:19] to do was understand okay based on
[08:21] what's coming in based on the request
[08:22] from the human which of these different
[08:24] tools do I actually access and we can
[08:26] honestly kind of think of these as mCP
[08:28] servers because once the query gets
[08:31] passed off to the Gmail agent the Gmail
[08:33] agent down here is the one that
[08:34] understands here are the tools I have
[08:36] here are the different like you know
[08:38] parameters I need to fill out I'm going
[08:39] to take care of it and then we're going
[08:40] to respond back to the main agent this
[08:43] system made things a little more Dynamic
[08:44] and flexible because then we didn't have
[08:46] to have the ultimate assistant hooked up
[08:47] to like 40 different tools you know all
[08:50] the combinations of all of these and it
[08:52] made its job a little more easier by
[08:53] just delegating the work to different
[08:55] mCP servers and obviously these aren't
[08:57] mCP servers but it's kind of the same
[08:59] concept ccept the difference here is
[09:00] that let's say all of a sudden Gmail
[09:03] adds more functionality we would have to
[09:04] come in here and add more Tools in this
[09:07] case but what's going on with the mCP
[09:09] servers is whatever mCP server that
[09:11] you're accessing it's on them to
[09:13] continuously keep that server updated so
[09:15] that people can always access it and do
[09:18] what they need to do by this point it
[09:20] should be starting to click but maybe
[09:21] it's not 100% clear so we're going to
[09:23] look at an actual example of like what
[09:25] this really looks like in action but
[09:27] before we do just want to cover one
[09:29] thing which which is you know the agent
[09:30] sending over a request to a server the
[09:32] server translates it in order to get all
[09:34] this information and get the tool calls
[09:36] all that kind of stuff um and what's
[09:38] going on here is called mCP protocol so
[09:41] we have the client which is just the
[09:42] interface that we're using in this case
[09:44] it's NN it could be your CLA or your you
[09:46] know coding window whatever it is and
[09:48] then we're sending over something to the
[09:50] mCP server and that's called mCP
[09:52] protocol also one thing to keep in mind
[09:54] here that I'm not going to dive into but
[09:55] if you were to create your own mCP
[09:57] server and it had access to all of your
[09:59] own resources your schemas your tools
[10:01] all that kind of stuff you just got to
[10:02] be careful there there's some security
[10:03] concerns because if anyone was getting
[10:05] into that server they could basically
[10:07] ask for anything back so that's
[10:09] something that was brought up in my paid
[10:11] Community we were having a great
[10:12] discussion about mCP and stuff like that
[10:14] so just keep it in mind so let's look
[10:16] more at an example in nadn once again so
[10:19] coming down here let's pretend that we
[10:21] have this beautiful air table agent that
[10:23] we built out in nadn as you can see it
[10:26] has these um seven different tools which
[10:28] is get wck record update record get
[10:30] bases create record search record delete
[10:32] record and get bases schema the reason
[10:35] we needed all of these different tools
[10:36] is because as you know they each have
[10:38] different operations inside of them and
[10:40] then they each have different parameters
[10:41] to be filled out so the agent takes care
[10:43] of all of that but this could be a lot
[10:45] more lean of a system if we were able to
[10:47] access air T's mCP server as you see
[10:50] what we're doing right here because this
[10:51] is able to list all the tools that we
[10:53] have available in air table so here you
[10:55] can see I asked the air table agent what
[10:57] actions do I have it then listed these
[10:59] 13 different actions that we have which
[11:01] are actually more than the seven we had
[11:02] built out here and we can see we have
[11:04] list records search records and then 11
[11:07] more and this is actually just the agent
[11:09] telling us the human what we have access
[11:11] to but what the actual agent would look
[11:13] at in order to use the tool is a list of
[11:16] the tools where it would be here's the
[11:17] name here's the description of when you
[11:19] use this tool and then here's the schema
[11:21] of what you need to send over to this
[11:23] tool because when we're listing records
[11:25] we have to send over different
[11:26] information like the base ID the table
[11:27] ID Max records how we want to filter
[11:30] which is different than if we want to
[11:31] list tables because we need a base ID
[11:33] and a detail label so all of this
[11:35] information coming back from the mCP
[11:37] server tells the agent how it needs to
[11:39] fill out all of these parameters that we
[11:41] were talking about earlier where it's
[11:42] like send email you have different
[11:44] things than you need to fill out for
[11:46] labeling emails so once the agent gets
[11:48] this information back from the mCP
[11:50] server it's going to say okay well I
[11:52] know that I need to use the search
[11:54] records tool because the user asked me
[11:56] to search for records with the name Bob
[11:58] in it so I have this schema that I need
[12:01] to use and I'm going to use my air table
[12:03] execute tool in order to do so and
[12:05] basically what it's going to do is going
[12:06] to choose which tool it needs based on
[12:08] the information it was fed previously so
[12:09] in this case the air table execute tool
[12:11] would search records and it would do it
[12:13] by filling in this schema of information
[12:15] that we need to pass over to air table
[12:17] so now I hope you can see how basically
[12:19] what's going on in this tool is all 13
[12:21] tools wrapped up in a one and then
[12:23] what's going on here is just feeding all
[12:25] the information we need in order to make
[12:26] the correct decision so this is the
[12:28] workflow looking at for the demo we're
[12:30] not going to dive into this one CU it's
[12:32] just a lot to look at I just wanted to
[12:33] put a ton of mCP servers in one agent
[12:36] and see that even if we had no system
[12:38] prompt if it could understand which one
[12:39] to use and then still understand how to
[12:41] call it tools so I just thought that was
[12:42] a cool experiment obviously what's next
[12:44] is I'm going to try to build some sort
[12:45] of huge you know personal type assistant
[12:47] with a ton of mCP servers but for now
[12:49] let's just kind of break it down as
[12:51] simple as possible by looking at an
[12:52] individual mCP agent and so I I don't
[12:56] know why it's called it an mCP agent in
[12:58] this case it's just kind of like a fir
[12:59] crawl agent with access to fir craw's
[13:01] mCP server so yeah okay so taking a look
[13:04] at fir crawl agent we're going to ask
[13:06] what tools do you have it's hitting the
[13:07] fir crawl actions right now in order to
[13:10] pull back all of the resources and as
[13:12] you can see it's going to come back and
[13:13] say hey we have these you know nine
[13:15] actions you can take I don't know if
[13:16] it's nine but it's going to be something
[13:17] like that it was nine so as you can see
[13:19] we have access to scrape map crawl batch
[13:22] scrape all other stuff and what's really
[13:24] cool is that if we click into here we
[13:26] can see that we have a description for
[13:27] when to use each tool and what you
[13:29] actually need to send over so if we want
[13:30] to scrape it's a different schema to
[13:32] fill out than if we want to do something
[13:34] like extract so let's try actually
[13:36] asking it to do something so let's say
[13:38] um extract the
[13:41] rewards program name from um
[13:45] chipotle.com so we'll see what it does
[13:47] here obviously it's going to do the same
[13:49] thing listing its actions and then it
[13:51] should be using the firecore extract
[13:54] method so we'll see what comes back out
[13:56] of that tool okay went green hopefully
[13:59] we actually got a response it's hitting
[14:00] it again so we'll see what happened
[14:02] we'll dive into the logs after this okay
[14:05] so on the third run it finally says the
[14:06] rewards program is called Chipotle
[14:08] rewards so let's take a look at run one
[14:11] it used fir crawl extract and it
[14:13] basically filled in the prompt extract
[14:15] the name of the rewards program it put
[14:16] it in as a string we got a request
[14:18] failed with status code 400 so not sure
[14:20] what happened there run two it did a fir
[14:22] cross scrape we also got a status code
[14:24] 400 and then run three what it did was a
[14:27] firec scrape once again and it was able
[14:29] to Des scrape the entire thing and then
[14:31] it used its brain to figure out what the
[14:32] rewards program was called taking a
[14:34] quick look at the fir call documentation
[14:36] we can see that a 400 error code means
[14:38] that the parameters weren't filled out
[14:39] correctly so what happened here was
[14:42] basically just didn't fill these out
[14:43] exactly correctly the schema of like the
[14:45] prompt and everything to send over and
[14:47] so really these kind of issues just come
[14:48] down to a matter of you know making the
[14:50] tool parameters more robust and also
[14:53] more prompting within the actual fir
[14:55] crawl agent itself but it's pretty cool
[14:57] that it was able to understand okay this
[14:58] didn't work let me just try some other
[15:00] things okay so real quick just wanted to
[15:02] say if you want to hop in NN and test
[15:04] out these mCP nodes you're going to have
[15:06] to self-host your environment because
[15:08] you need to use the community nodes and
[15:09] you can only access those if you are
[15:11] self-hosted but I will leave a link in
[15:12] the description for the documentation
[15:14] for this mCP node as well as this link
[15:17] which has basically all the servers that
[15:18] you can connect to um so obviously in
[15:20] this one we were doing like Airbnb and
[15:22] we had Brave search we had fir crawl
[15:24] there's a ton that you can use and just
[15:26] so you know one issue that I was running
[15:27] into in setup is some of these aren't
[15:30] like publicly available or completely
[15:32] published yet so like perplexity I was
[15:33] trying to connect to and it wasn't
[15:35] letting me and I was thinking I did
[15:36] something wrong but some of these just
[15:37] aren't like published yet and once again
[15:39] if you guys want a tutorial of you know
[15:41] spinning up a self-hosted environment
[15:43] installing the community node connecting
[15:44] to a bunch of different ones here then
[15:47] let me know in the comments and give
[15:48] this video a like I'd love to make a
[15:49] video about that all right but that is
[15:51] going to be it for this one I hope that
[15:53] you enjoy this one I hope you learned
[15:54] something new if you did please give it
[15:56] a like it definitely helps me out a ton
[15:57] as always appreciate you you guys
[15:59] sticking around to the end of the video
[16:00] and I will see you guys in the next one
[16:02] thanks everyone