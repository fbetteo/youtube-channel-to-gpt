Video Title: How to Build a Personal Assistant AI Agent in n8n (Step-by-Step, No Code)
Video ID: ZP4fjVWKt2w
URL: https://www.youtube.com/watch?v=ZP4fjVWKt2w
View Count: 107,699

[00:00] hey personal assistant can you please
[00:02] create a calendar event for tomorrow
[00:04] with Michael Scott at noon for a meeting
[00:06] and then can you email him to confirm if
[00:07] that time works and then finally can you
[00:10] grab all of my calendar events for the
[00:11] rest of today thanks okay so we just
[00:14] sent that off to telegram it's
[00:15] transcribing that audio it's now hitting
[00:17] the personal assistant and the assistant
[00:18] is going to take the contact information
[00:21] it's going to create that calendar event
[00:22] with Michael Scott now it's going to hit
[00:24] the email agent so that it can send out
[00:26] that email to confirm if that time works
[00:28] and then finally it should come back to
[00:30] us with a text message as well as a
[00:32] voice file or an audio file that's going
[00:34] to be telling us about what we asked for
[00:36] so here's the information the C rent was
[00:38] created the email was sent we've got our
[00:39] information about the remaining events
[00:41] for today and now as you can see that
[00:43] audio file is being created so let's
[00:45] listen to that real quick a calendar
[00:47] event has been created for a meeting
[00:49] with Michael Scott scheduled for
[00:51] tomorrow November 29th 2024 from 12:00
[00:54] p.m. to 1: p.m. an email confirming the
[00:58] meeting time was sent to him today's
[01:00] remaining calendar events include a
[01:02] meeting with Michael Scott from 12:00
[01:04] p.m. to 1:00 p.m. dinner from 5:00 p.m.
[01:06] to 600 p.m. and dinner with Michael
[01:08] Scott from 700 p.m. to 8:00 p.m. if
[01:11] further assistance is needed please let
[01:13] me know awesome so that's how this works
[01:15] that's so the agent that we we just saw
[01:17] right here we're going to be jumping
[01:18] into the build so let's get into the
[01:20] video all right so now we are going to
[01:22] get into the actual step-by-step
[01:24] tutorial for the demo you just saw of
[01:25] the personal assistant so we opened up a
[01:27] new workflow as you can see we've got
[01:29] personal assistant set by step and we
[01:30] are just going to start building out
[01:33] this agent so first thing we want to do
[01:35] obviously we're going to grab the actual
[01:36] agent so we're going to grab an AI agent
[01:38] here and we're going to leave this as a
[01:39] tools agent we'll get into the prompting
[01:41] of this guy sort of as we start to add
[01:43] more tools but that's all we got to do
[01:45] to start with so as you saw in the demo
[01:47] we were talking to this agent through
[01:48] telegram so we're just going to go ahead
[01:50] and get rid of this um this trigger real
[01:52] quick and we're going to add a telegram
[01:54] trigger so we've got different triggers
[01:56] we've got different actions but we are
[01:57] going to do a trigger of on message
[01:59] received so that way anytime that we
[02:02] text our telegram Channel it will
[02:04] basically start this workflow for a
[02:05] personal assistant just a quick reminder
[02:08] as always the workflow for this whole
[02:09] assistant and the other agents that
[02:11] we're building out today will be in my
[02:12] free school Community the link for that
[02:14] will be down in the description and then
[02:15] if you're looking to get a little more
[02:16] Hands-On you're looking to go further
[02:17] with a automations with n8n then feel
[02:20] free to check out my paid Community the
[02:21] link for that will also be down in the
[02:23] description and then finally if you're
[02:25] looking for some sort of assistant if
[02:26] you're looking for automations if you
[02:27] want me to build out some of the stuff
[02:29] for you or for your business then go to
[02:31] my website down Linked In the
[02:32] description and book in a call and let's
[02:34] chat anyways back to the build what we
[02:37] want to do now is add the chat model we
[02:38] have to add the brain for this um
[02:41] assistant so that it can you know think
[02:43] about what we're asking it it can think
[02:44] about what agent it needs to go to what
[02:47] tool it needs to go to and then it will
[02:49] ultimately give us a response so in this
[02:51] case I'm going to be using 40 just
[02:54] because um you know it's going to have a
[02:56] ton of different tools connected to it
[02:58] and we want these responses and you know
[03:00] the the sending of data across workflows
[03:02] to be as accurate as possible so I'm
[03:04] going to go with foro here now we're
[03:05] going to add memory that way when we're
[03:07] talking to this assistant it has context
[03:08] of previous messages so we'll click on
[03:10] this plus we're going to add window
[03:12] buffer memory because it's super easy
[03:14] it's going to store this memory in nadn
[03:16] and it's super easy to set up but one
[03:18] thing that you have to do here is we
[03:19] have to set up the session ID because if
[03:21] you leave it like this it's not going to
[03:23] work um because it's looking for
[03:26] basically this would work if you're
[03:27] chatting with it through a um
[03:30] a chat trigger so if we go to a chat
[03:32] trigger right
[03:34] here and we connect this if we chat with
[03:37] this agent through the trigger we just
[03:38] say this now it will go to the window
[03:40] buffer memory because we have it
[03:42] configured to take from the previous
[03:43] node automatically and in this case it's
[03:45] coming through as um you know Json do.
[03:49] text or something so or chat ID anyways
[03:53] if we're to do this with the telegram
[03:54] trigger so if I click um let's just get
[03:56] rid of
[03:57] this we hit test workow hello and then I
[04:00] pull up my telegram real quick and we
[04:04] just say hello it's going to go through
[04:07] but it's not going to actually store in
[04:09] the window buffer memory so we what we
[04:11] need to do is we need to see how the
[04:12] chat's coming through from our telegram
[04:14] we can see that it's coming through um
[04:16] right here let's go to schema actually
[04:18] and we can see it's coming through as
[04:19] the chat ID so all we need to do in here
[04:23] is instead of setting this from take
[04:25] previous note automatically we're going
[04:26] to Define it below it's going to be an
[04:28] expression and we're going going to be
[04:30] pulling that chat ID from the telegram
[04:32] trigger so we'll click on telegram
[04:33] trigger what we need to do is go to
[04:35] item. Json message. chat and then we go
[04:40] to ID so now we have that ID in there as
[04:43] you can see that is what's being stored
[04:45] as the key for our session ID we'll hit
[04:48] save test this workflow again we'll come
[04:51] into here in Telegram and say hello and
[04:53] oop no prompt specified okay we have to
[04:56] do this also we also have to Define
[04:58] where we're getting this from so the
[05:00] text that's coming into our agent is no
[05:01] longer the chat input that's coming from
[05:03] a chat trigger what we're wanting is the
[05:05] text that's coming in from telegram so
[05:07] chat. text down here we'll drag this in
[05:10] here and now we're getting the actual
[05:11] message we can hit test step now and we
[05:14] can see that it's being stored in the
[05:15] window buffer memory so the past videos
[05:18] I've I've had some people um ask
[05:20] questions about that that's all you have
[05:21] to do you have to define the agent where
[05:23] it's getting the message and then you
[05:24] have to Define for the window buffer
[05:26] memory what channel it's being stored in
[05:28] so that's how that works Works another
[05:30] thing I'll touch on real quick is with
[05:31] the actual telegram trigger if you're
[05:33] having trouble connecting your
[05:34] credentials once you create a new
[05:35] credential in here you basically just
[05:37] need to get your access token and then
[05:39] you can see you have this URL so in
[05:41] telegram all you're going to do is
[05:42] you're going to set up you're going to
[05:43] talk to let me pull up my telegram real
[05:45] quick if I just expand this a little bit
[05:48] more if I go back here you'll have your
[05:50] Bot father and so you'll go into your
[05:51] Bot father and that's how you can get
[05:53] your access token you'll have to plug in
[05:55] some credentials um it's not super
[05:57] difficult at all if you are having
[05:58] trouble you can click CLI on open docs
[06:00] right here it'll walk you through
[06:01] exactly how to set up your you know your
[06:03] API get your Bot access token you'll
[06:05] talk to botf Father you'll enter this
[06:07] command and it's super simple so then
[06:10] once you get that set up you'll just
[06:11] pretty much plug it in and then you'll
[06:12] be good to go for the rest of the time
[06:14] that you want to talk to telegram um in
[06:16] nadn all right we have the brain for the
[06:19] agent we have the memory for the agent
[06:20] and now we're going to start adding on
[06:22] the tools this is where the magic really
[06:23] happens so the first thing we want to do
[06:25] is we want to get a contact database
[06:27] into our agent so that it has access to
[06:30] different email addresses different
[06:31] phone numbers in case we want to send a
[06:33] text an email calendar invite that sort
[06:35] of stuff so in this case we're just
[06:37] going to be using a Google sheet you
[06:39] could do a contact database in air table
[06:41] you could do it into pine cone if you
[06:43] had a big um repository of contact
[06:46] information you could put that into pine
[06:47] cone a vector database in this case
[06:49] we're just going to be using Google
[06:50] Sheets to keep things simple and as you
[06:53] can see we have information here and
[06:54] this is what we're going to be giving
[06:55] our agent so that it can reach out to
[06:58] the correct people so we're going to
[06:59] click on this Plus for Tool we're going
[07:01] to grab a Google Sheets tool you'll have
[07:03] to connect your account here it's very
[07:05] simple you can also click on docs and
[07:06] you can figure out how to you know go to
[07:08] Google Cloud set up your your
[07:10] credentials your ooth consent screen all
[07:12] that kind of stuff um and I've also
[07:14] walked through that in other videos like
[07:15] the N Master Class other videos on my
[07:18] channel like that but anyways what we're
[07:19] doing here is we want to connect the
[07:22] right document so we're going to grab um
[07:25] this one's called Contact database the
[07:27] sheet there's only one sheet so now that
[07:29] it knows it's pulling the information
[07:31] from here we can leave all of this as is
[07:33] we're getting rows all that kind of
[07:35] stuff so we're just going to rename this
[07:37] our
[07:38] contact
[07:41] database Okay so we've got that
[07:43] information into here that's super
[07:45] simple to set up and now we just want to
[07:47] make sure that um all this information
[07:48] is working so let us really quickly test
[07:52] the workflow we'll basically just come
[07:54] back into our personal assistant and we
[07:56] will say
[07:57] um can you get
[08:01] me Nate herk email and so this is
[08:04] actually not going to send anything back
[08:06] to us in telegram because we haven't set
[08:08] that up yet as you can see but it went
[08:10] through the logic and then the agent
[08:12] would actually be responding Nate herk's
[08:13] email is Nate herk 88@gmail.com as you
[08:17] can see it sent over this query to the
[08:19] Google sheet and in here it pulled NK
[08:22] and it found its email and then sent
[08:24] that back to us so real quick what I'll
[08:27] do is we'll just set up the
[08:30] message that way for the rest of the
[08:32] time we're testing it's actually going
[08:33] to come back in telegram so we're going
[08:35] to add something after the agent because
[08:37] typically it's going to get a query it's
[08:39] going to figure out what it needs to do
[08:40] it's going to hit the specific tools and
[08:42] then it's going to output something over
[08:43] here as you can see one item was output
[08:45] and we want this output to go to
[08:47] telegram so we're going to grab telegram
[08:49] this time we're going to do an action so
[08:51] down here we will see message actions
[08:53] and we will see send a text message so
[08:57] at this point we have our Telegram
[08:59] account already connected so we're good
[09:01] to go here now we just need to configure
[09:03] what this note is going to do so we're
[09:04] going to be sending a message the
[09:05] resource is going to be a message as you
[09:07] can see there's files there's other
[09:08] stuff we can send we're sending a
[09:09] message and now we need to set up our
[09:11] chat ID and what the message is going to
[09:14] be so because we have our trigger
[09:16] connected it's really simple we'll click
[09:18] on telegram trigger over here in schema
[09:20] and we're going to be looking through
[09:21] this information and we're looking for
[09:22] chat ID so the exact same thing that we
[09:25] gave our window buffer memory we're
[09:26] going to give that to telegram so it
[09:29] knows what you know Channel it wants to
[09:31] send this message back to so we can grab
[09:33] right here chat ID we'll drag it right
[09:35] in there and it's as simple as that we
[09:37] are now set up and then we just need to
[09:39] configure what text is actually going to
[09:41] be coming through through the telegram
[09:43] so text right here all we have to do is
[09:45] we just want what whatever the agent's
[09:47] saying that's what we want so we're
[09:48] going to grab the output from the AI
[09:50] agent drag that into there and now we
[09:52] can see we have our Channel setup and we
[09:54] have our um text setup so if I hit test
[09:58] step pull up Telegram now we got that
[10:00] information Nate herk's email is nerk
[10:02] 88@gmail.com and then we also got this
[10:04] this message was sent automatically with
[10:06] NN what we can do is go to add field
[10:08] append nadn attribution and then just
[10:11] flick that off we'll test that again
[10:12] open up Telegram and now we got that
[10:14] message in telegram but we didn't get
[10:16] that attribution so it's really clean
[10:18] that's exactly how we want it and we've
[10:20] pretty much got this guy set up we'll
[10:22] just name this
[10:23] um
[10:25] response and now we can see we have our
[10:27] telegram trigger and then we have our AG
[10:29] agent and it will be actually responding
[10:31] to us in telegram so we've got this kind
[10:33] of foundation set up now let's continue
[10:35] to add more tools okay what we're going
[10:37] to add now is an email agent so what
[10:39] we're going to do is we're going to go
[10:41] open up a new tab we'll go back to the
[10:43] home screen of nadn then we're going to
[10:44] add a completely new workflow so once
[10:47] this loads up we'll click add
[10:49] workflow and this one is going to be an
[10:52] email agent so now we have an email
[10:55] agent that we're going to be plugging
[10:56] into our personal assistant so the first
[10:58] thing we have need to do is add the
[11:00] trigger which is going to be when called
[11:02] by another workflow so this workflow is
[11:05] going to be called by our personal
[11:06] assistant whenever we ask can you send
[11:08] an email can you get my emails that sort
[11:10] of stuff so this is the agent that's
[11:13] going to have all the actions within um
[11:15] our Gmail so we're going to add an AI
[11:17] agent once
[11:19] again um we are going to just call this
[11:23] guy the email agent it's going to be a
[11:26] tools agent we'll get rid of this chat
[11:27] trigger because that's not how we're
[11:29] going to be interacting with this agent
[11:31] and once again we're going to set up our
[11:32] chat model for this one we'll use 4
[11:36] because it's only going to have a few
[11:36] tools um we don't need to give this guy
[11:38] any memory
[11:39] really and now we just have to add tools
[11:42] to this agent that is going to be a tool
[11:44] for the personal assistant so what we
[11:47] want to do is grab Gmail and this is
[11:49] really cool because within Gmail we have
[11:51] a ton of different actions we can take
[11:53] and we're going to keep this this agent
[11:54] very simple just like we did in the the
[11:56] personal assistant 2.0 video but still
[11:59] use cool use cases of what it can do so
[12:01] this first one let's just do sending an
[12:02] email
[12:04] so call this guy send email we've got
[12:06] our Gmail account
[12:08] connected um we want to be sending a
[12:10] message and now we need to configure the
[12:12] two the subject the email type and the
[12:14] actual message that's coming through so
[12:16] what we're going to do is we're going to
[12:17] use this cool expression called from AI
[12:19] if you want to go more in depth a little
[12:21] bit of how that's going to work you can
[12:22] feel free to watch my video I'll tag it
[12:24] right up here where I dive into this
[12:26] actual function but it's just a really
[12:27] cool way to have a interpret an incoming
[12:30] query and actually send out messages on
[12:32] our behalf filling in these fields
[12:34] automatically
[12:35] so um the first one we're going to do is
[12:38] the actual two field so in here we're
[12:40] going to grab um from Ai and we are
[12:44] going to put in the key of what what
[12:45] this from AI is looking for and this is
[12:48] just going to be we'll just say email
[12:52] address and then I want to Define
[12:54] actually we need we need to throw the
[12:55] quotes in there so we've got email
[12:58] address and then I actually want Define
[12:59] what that means just in case
[13:01] so the
[13:03] email um address we are sending to Okay
[13:09] so we've got that set up um we need to
[13:11] do the same a very similar thing with
[13:13] our subject so we're going to come in
[13:15] here also do from
[13:17] Ai and then this time we're just going
[13:19] to say subject and we can leave it as
[13:21] simple as that we want to change the
[13:23] email type to text and then in the
[13:25] message we are going to do once again
[13:27] from Ai and we are going to say um email
[13:32] body and so this really should work we
[13:35] will test this out of course first thing
[13:37] I want to do is we want to go to append
[13:39] attribution we want to turn that
[13:42] off and then in this case we can add a
[13:44] sender name so um let's say you know
[13:47] we're always going to be sending from
[13:49] from me because this is my personal
[13:50] assistant so I'll I'll put Nate in here
[13:52] um and this won't actually always sign
[13:54] off the email this is basically just
[13:56] saying when it comes through in Gmail
[13:57] who is it going to be sent for so we'll
[14:00] see that in action we'll save this and
[14:03] then real quick let's come in here and
[14:04] we'll just test out what this stuff's
[14:06] going to look like so if we come in here
[14:09] and we put in the query because when um
[14:14] when the personal assistant is going to
[14:15] be sending information to the email
[14:18] agent that we're building right now it's
[14:19] going to send off a query so we're just
[14:22] kind of putting in Sample information of
[14:23] what a query could look like so let's
[14:25] say that we asked can you send an email
[14:30] to um Nate herk and then also it would
[14:33] be giving that email because the
[14:36] personal assistant is grabbing the
[14:37] contact data and then it's forming a
[14:39] query to send over to the email agent in
[14:41] this case it's already gone and got my
[14:42] email so it would send that over as
[14:47] well and we'll just say
[14:49] asking what's up so that's the query
[14:51] that we're going to be testing we this
[14:53] data will be pinned so now we can come
[14:55] through and test this information um and
[14:57] we will pretty much just be testing this
[14:59] send email function so we can see how
[15:00] information is coming back we'll hit run
[15:04] um no prompt specified okay so once
[15:05] again we can't just be taking it from
[15:07] previous node we have to Define below
[15:09] and what we're grabbing is json. query
[15:11] as you can see now it's coming through
[15:13] and now we'll test up we'll see it's
[15:15] going to hit the send email tool okay so
[15:18] we're airing let's see what's going on
[15:19] here provided authorization okay so I
[15:22] just need to refresh my credential let
[15:25] me just log in and do that real quick so
[15:26] good learning opportunity right here if
[15:28] you have your off credential set as just
[15:30] a test app and you put in your
[15:32] information I think those credentials
[15:34] expire every you know few days so you
[15:36] just have to log in and do it again but
[15:38] if you publish your app then you should
[15:39] be good to go so anyways this
[15:41] information filled out automatically
[15:42] right so we got the query that was can
[15:44] you send Nate herk an email all this
[15:45] kind of stuff and so now this
[15:47] automatically filled that in so it grabs
[15:49] the the two which is Nate herk 88 it
[15:51] grabbed a subject it made a subject
[15:53] what's up and then it made an actual
[15:55] message which as we can see the message
[15:56] was hey Nate just wanted check in see
[15:59] what's up with you hope all is well best
[16:01] your name so the reason it signed off as
[16:03] your name is because we just haven't
[16:04] prompted it the sender name as you can
[16:06] see we filled out down here is going to
[16:07] be sort of a static sender name in our
[16:09] Gmail so let's open up the email um
[16:12] refresh this and we should see the email
[16:14] that we just sent off so we got what's
[16:17] up um so you can see right here this is
[16:19] this is the Nate that's what we put in
[16:20] the sender name but if we wanted to
[16:23] actually sign off we have to prompt the
[16:25] agent so um really quickly what I'm
[16:28] going to show you is a cool GPT that you
[16:29] can use if we come into here and we just
[16:32] say an agent who
[16:36] um sends or no who who takes
[16:39] action in
[16:42] Gmail it should sign off all emails
[16:47] from
[16:49] Nate
[16:51] never using
[16:55] placeholders okay so we we set that off
[16:57] really easy it's a super simple prompt
[16:58] shout out to Tyler um who showed me this
[17:02] gbt super awesome great work Tyler but
[17:04] anyways it's gonna make it a super cool
[17:06] Sim system prompt for you and it's going
[17:08] to be in markdown so the agent going to
[17:11] understand like you know the headers all
[17:12] this kind of stuff so we've got that
[17:13] really quick we'll copy
[17:15] that go into our email agent and we will
[17:19] add a system message and then we can
[17:22] come in here paste that in and so now
[17:25] it's going to be signing off as Nate so
[17:27] let's save that let's try this one more
[17:28] time
[17:29] it's going to send us another email I'm
[17:31] going to pull up the email in here
[17:34] refresh this and so now at the bottom
[17:37] you see it's signing off best regards
[17:38] Nate so that's sort of how that's going
[17:40] to work let's go back into the email
[17:42] agent and let's add another Gmail
[17:46] tool this time we are just going to be
[17:50] so you can see there's you can expand
[17:51] off this agent give it tons of different
[17:52] actions you can add labels you can
[17:54] delete messages you can Mark stuff as
[17:56] unre you have you could basically add a
[17:57] tool for all these functions in this
[17:59] case let's just get many emails okay so
[18:02] we have to set up the limit we have to
[18:04] set up um we want to be asking like who
[18:06] they're coming from so we'll say sender
[18:08] and as you can see there's different
[18:09] ways you could filter you know um you
[18:12] could filter by date you could filter by
[18:13] the status all this kind of stuff so you
[18:15] could you know configure this to say um
[18:19] if you wanted to get all emails from the
[18:20] past um you know five days you could
[18:23] come in here and you could set up the
[18:25] received after and the received before
[18:26] and you could have the from AI figure
[18:28] out what it needs to do as far as you
[18:30] know um what filters to put in here but
[18:32] for now we're going to keep it simple
[18:34] we're just going to do a limit and we're
[18:35] going to um do a sender so in the limit
[18:38] we're going to again use from
[18:40] AI okay let's get rid of all this we're
[18:43] going to be using from
[18:44] Ai and we're basically just going to be
[18:47] saying um limit and I think we should be
[18:50] good to go with that we'll test it out
[18:52] and we don't want this to be simplified
[18:53] because this is going to return a
[18:55] simplified version of response instead
[18:56] of the raw data so in our use case in
[18:59] this example video it should be fine but
[19:01] basically it's going to cut off emails
[19:03] so if you have long emails coming back
[19:05] and you don't want them to be simplified
[19:06] you want to get all the content of the
[19:08] email to come through then you're going
[19:10] to want to turn off
[19:12] simplify and then sender once again
[19:14] we'll make this an
[19:15] expression we will do um from
[19:18] Ai and then we're basically just going
[19:20] to be saying the sender we need to put
[19:22] the
[19:24] quotes sender email ended off with
[19:27] quotes and we should be good to go here
[19:28] and we'll just call this one get
[19:33] messages okay so we got this tool
[19:35] connected
[19:36] also and now let's come in here and
[19:38] change the query
[19:40] so um actually first what I want to do
[19:44] is I need to send some emails to this
[19:45] inbox so that we can actually get them
[19:47] back so give me a sec to do that we now
[19:49] have two emails in the inbox um they're
[19:52] coming from a different email as you can
[19:53] see in here they're coming from up at
[19:55] digital gmail.com which we have
[19:57] associated with Michael Scott so anyways
[19:59] that's why they're signed off Michael
[20:00] but they're coming through is Nate
[20:01] because my actual email is Nate anyways
[20:04] we have this email stuff coming back and
[20:06] now we're going to put a query in here
[20:08] that says can
[20:11] you grab
[20:13] my past emails
[20:16] from Michael Scott and it would also at
[20:20] this point be getting that email so up
[20:22] at digital
[20:25] gmail.com and this is just um something
[20:27] that I like to do when I'm testing out
[20:29] different workflows you put obviously
[20:31] the example query that would be coming
[20:32] through and then you can go ahead and
[20:33] test them so let's run this it's now
[20:36] understanding that it needs to get
[20:37] messages rather than send
[20:40] email and it should be giving us
[20:42] basically a summary of those couple
[20:45] emails that we just um got back so we'll
[20:49] come in here and we'll see your current
[20:51] emails from Michael Scott so it pulled
[20:52] all this information back and there's
[20:54] actually a ton so um because in here
[20:57] it's not just these these two we didn't
[20:59] set them as a filter to only pull back
[21:01] unread messages only pullback um
[21:04] messages from the past couple days and
[21:06] also if you remember in the
[21:08] query we just said past emails we didn't
[21:11] say like past two so if I say can you
[21:13] grab my past two emails from Michael
[21:16] Scott now we'll run this again and it
[21:18] should be grabbing that limit because we
[21:20] put in you know the limit of how many
[21:21] emails that we were asking for right
[21:23] here so now it says limit two from up a
[21:25] digital and now it's just basically
[21:27] making a summary of those email
[21:30] so right here we only have two emails
[21:31] email one was Project mountain and um
[21:35] email two was want to grab lunch so if
[21:37] you can see right here we have project
[21:39] mountain and want to grab lunch so now
[21:41] we see the limits working we see um that
[21:44] it's getting it from the correct email
[21:46] and then once you understand this
[21:47] concept you could come and start to add
[21:49] in more filters like if you only want to
[21:51] get you know certain dates if you want
[21:53] them to only be unread messages all that
[21:55] kind of stuff but this is just to give
[21:57] you an idea of the found foundations of
[21:59] how these tools work within agents and
[22:01] how this agent is a tool for the
[22:03] overarching agent of the personal
[22:05] assistant so now all we need to do here
[22:06] is we want this agent to respond back to
[22:09] the personal assistant so if we grab a
[22:11] set
[22:12] field and we just call this field
[22:15] response and all we have to do is drag
[22:17] in this expression which is the
[22:19] information coming back from um the
[22:22] email so we can see we have two emails
[22:24] that's summarizing them and then this is
[22:26] this is what the the agent's going to
[22:28] get
[22:29] um
[22:30] so real
[22:33] quick we'll just call this response
[22:35] we'll hit save and so this workflow is
[22:37] called email agent demo now coming back
[22:40] into the personal assistant we're going
[22:41] to add a tool and we're going to do call
[22:43] anded and workflow tool because we're
[22:45] calling a different um workflow this
[22:48] guy's going to be called email
[22:50] agent just copy this into here as
[22:54] well call this tool to take action
[22:59] in email sorry about the cursor right
[23:01] there and so now we just need to
[23:03] configure which it is so you can choose
[23:05] from list you can choose by ID but list
[23:07] is really easy we can just come in here
[23:09] and grab our um actually we might need
[23:12] to refresh this page
[23:15] because yeah we're going to have to
[23:16] refresh this page so save
[23:18] this refresh the page because um it
[23:21] wasn't refreshed since we made that new
[23:23] workflow called email agent demo so now
[23:26] we can come in here grab email agent
[23:28] demo right there as you can
[23:30] see and this is where we set up the
[23:32] response earlier so the field that it's
[23:34] looking for once the personal assistant
[23:37] sends off a query to this AI agent right
[23:39] here it's going to be looking for a
[23:41] field called response so that's why back
[23:44] in this workflow we set up this set
[23:46] field we called it response and then we
[23:48] gave it the answer which is the response
[23:50] so now it's looking for that and then it
[23:51] will actually hit it and be good to go
[23:55] so if we test this guy from here um
[23:59] you know we'll we'll hit test workflow
[24:00] we'll come into Telegram and we'll say
[24:03] can this Emoji thing is annoying okay
[24:06] can you get my past two emails from
[24:10] Michael Scott so just like the query put
[24:13] in as you can see it has to
[24:16] oh this actually might be an issue
[24:18] because it didn't grab the contact data
[24:20] so let's see what it said it looks like
[24:22] there are no pass emails from Michael
[24:23] Scott in your inbox if there's anything
[24:24] else you need um let me know so what
[24:27] happened is it didn't understand that it
[24:29] had to first get the contact information
[24:31] from Michael Scott because then in the
[24:32] email agent it was just looking for you
[24:35] know it didn't actually know who to go
[24:36] to so let's go into executions of this
[24:38] email
[24:40] agent um this is the one that we just
[24:41] hit off and we can see in here it
[24:43] doesn't have a um sender email it's it
[24:46] just made up this sender email
[24:48] michael.sot example.com so that's why we
[24:50] need to prompt this guy to understand
[24:53] that it needs to look for contact
[24:54] database first so let me do the same
[24:56] thing I'll go into that gbt make a
[24:58] prompt and then I'll be back in a sec
[25:00] okay made a super quick prompts using
[25:01] that GPT um we outlined the role we
[25:04] outlined its tasks we gave the tool
[25:06] overview and usage guidelines which is
[25:08] super important outlining what each tool
[25:10] does when to use it and we basically had
[25:12] to tell it to use the contact database
[25:14] before going to try to send an email or
[25:17] you know make a calendar invite stuff
[25:18] like that and then at the bottom under
[25:20] reminders you know we gave it examples
[25:21] too so showing how things should be done
[25:23] which is super important the process of
[25:25] it but then at the bottom we want to add
[25:27] another reminder that says here's the
[25:28] current date and time so we basically
[25:30] just came in here and grabbed the
[25:31] function um dollar sign now and it would
[25:35] originally look like this which you know
[25:37] the computer can understand it but it
[25:39] looks ugly so if you type in format then
[25:41] you can grab this and you can change the
[25:43] way that the date comes back so that's
[25:45] how that works we're going to hit test
[25:47] workflow that's now lising for us we're
[25:50] going to ask can you get my past two
[25:54] emails from Michael Scott we'll send
[25:58] that off off and now it should be
[25:59] hitting the contact database before it
[26:01] actually goes to send that to send that
[26:02] information to the email agent now it's
[26:05] getting those emails it's going to
[26:06] respond to the personal assistant and
[26:08] then it should hit us back with a
[26:10] message which is summarizing those two
[26:11] best emails so as you can see we now
[26:13] have email one email 2 which is exactly
[26:15] what we just saw and real quick we'll
[26:17] just test another one we'll
[26:18] say um we'll have it just send an email
[26:21] real quick can you send an email to Nate
[26:25] herk asking him how the project mountain
[26:31] is going so same thing it will hit
[26:33] contact database it's going to grab Nate
[26:35] herk's email and then it will pass off
[26:37] that query to the email agent which
[26:38] should send an email and then the
[26:40] personal assistant should let us know
[26:42] that it did that so the email has been
[26:43] successfully sent inquiring about
[26:45] project mountain and let's go to the
[26:47] email real quick refresh that so now we
[26:50] got inquiry about project Mountain um
[26:52] hope message finds you well I wanted to
[26:54] check in see how project mountain is
[26:55] progressing all that kind of stuff so
[26:58] one thing I think is super important is
[26:59] before you start to add more tools you
[27:00] want to play with the prompting you want
[27:02] to play with what's currently going on
[27:04] it's going to save you a headache down
[27:05] the road so now that we know that these
[27:06] functions are working we can now come in
[27:08] and add a uh calendar agent that's the
[27:11] next one we're going to build so we're
[27:12] going to hop over to a new
[27:14] workflow um we know that this email
[27:16] agent is pretty much working well and
[27:17] like I said you would start to add more
[27:18] tools onto here but now we're going to
[27:20] add a calendar agent so new
[27:23] workflow this one is going to be the
[27:26] calendar agent and First Step as always
[27:29] we're going to be calling it by a
[27:32] another workflow so we've got this
[27:33] trigger we're going to add an AI agent
[27:36] and this one's going to be the calendar
[27:39] agent so I'll move a little faster on
[27:41] this one because it's going to be the
[27:43] same principles pretty much as that P
[27:44] one we've got our agent we will once
[27:47] again we saw that foral mini worked fine
[27:49] for that that email agent so we'll go
[27:50] with foral mini again we don't need our
[27:53] memory and now we can just come in here
[27:55] and start to add the tools so our
[27:57] accounts already Conn connected the
[27:58] first one we're going to do is going to
[27:59] be creating an event we are going to
[28:01] connect our calendar and now we just
[28:04] basically need to configure start time
[28:06] end time and then um an additional
[28:08] property that we want to add is you know
[28:10] we can add
[28:12] attendees we can also add the summary
[28:14] which I think the summary is the actual
[28:17] title that shows up as the um what's it
[28:20] called as the title in calendar so this
[28:23] is what we're going to do here and yeah
[28:25] let's just start filling in that from AI
[28:26] stuff so first what I want to do is add
[28:28] a sample query so we can play around
[28:30] with this
[28:33] data let's say that we asked the
[28:35] calendar agent
[28:37] to set up a calendar
[28:41] event for 5:
[28:45] p.m for um dinner so we've got
[28:50] this and so if it comes through like
[28:53] this it basically means that we're just
[28:54] doing a personal calendar thing that we
[28:56] just want to block up some time um and
[28:58] also you can notice here that we haven't
[28:59] specified an end time so all we're
[29:01] giving it is a start time and so this
[29:03] should be interesting because in this
[29:05] node which is creating an
[29:09] event um we have to give it a start time
[29:11] and an end
[29:12] time so um from here we're going to do
[29:16] once again we're going to be using from
[29:18] AI which is awesome oops I don't know
[29:20] what just happened there we're going to
[29:22] be grabing from Ai and then we're just
[29:24] going to say in quotes start time
[29:29] I'm pretty much just going to copy that
[29:31] and we're going to add that in here and
[29:32] then we're just going to say end time so
[29:36] this is something where in the prompting
[29:37] of the actual agent in here this is
[29:40] where we want to say like if an end time
[29:41] isn't specified just assume it's going
[29:43] to be 30 minutes after the start time or
[29:45] an hour after the start time so we'll
[29:47] play with that and for
[29:49] summary once again we're going to grab a
[29:52] from Ai and we're just going to say
[29:55] event title okay okay so we got
[30:00] this and we're pretty much just going to
[30:03] test it out um I'm not going to prompt
[30:05] anything yet we'll just see what happens
[30:06] so we've got this we will hit oh once
[30:10] again we didn't specify so to find below
[30:12] we want to grab the query and now we'll
[30:14] hit save and now we'll run this again so
[30:15] now it understands what we're asking
[30:17] it's going to create an event and um
[30:20] also I just
[30:21] realized okay this will be interesting
[30:23] to see let me pull up the
[30:25] calendar um I don't know where it
[30:27] created it because um we didn't give it
[30:30] any sort
[30:31] of yeah so as you can see here it came
[30:34] through as 2023 October 10th so that's
[30:38] interesting but we can see that it made
[30:39] the end time an hour after so let me
[30:42] come in here and prompt this agent we
[30:44] want to give it the current date and
[30:45] time so that it also knows when to make
[30:47] these events okay so we want to keep
[30:49] this prompt shorter straight to the
[30:50] point because it's a calendar agent and
[30:52] right now we're only going to give it
[30:53] three tools so we're going to give it
[30:54] create an event create event with an
[30:56] attendee and then also to get events so
[30:58] we kept everything super simple and we
[31:00] gave it the current date and time and
[31:01] we're just going to leave it as this for
[31:02] now so once again we'll try this we will
[31:05] see that it's going to hit the calendar
[31:07] event you can come in here and see now
[31:09] that it's getting it accurately this is
[31:10] the correct date this is the correct
[31:12] start time um and then it called the
[31:14] event dinner so if we go into the
[31:16] calendar um there it is so 5:00 p.m. we
[31:18] have dinner that was just created um
[31:21] Thanksgiving dinner as you can see today
[31:22] is Thanksgiving but anyways um now that
[31:25] that's prompted in we can add another
[31:26] tool so if if I can just copy and paste
[31:28] this event right
[31:29] here we are going to call this tool
[31:33] create event um with an attendee and so
[31:37] the reason that we're doing this in a
[31:38] separate workflow is
[31:41] because we have this um option here for
[31:45] attendees and so if we were to do this
[31:48] as just one thing and it was not to
[31:50] invite an attendee it would leave this
[31:52] as null and then it would probably it
[31:54] would fail on the calendar creation side
[31:56] of things and and so there are you know
[31:58] some options to get through this you can
[32:00] use specific operators like there are
[32:01] some cool operators um which I'm
[32:04] planning on making a video about like
[32:05] some Advanced tips and this kind of
[32:07] stuff but like you can use um two
[32:09] question marks you can use two pipes and
[32:11] that sort of stuff will help you sort of
[32:12] almost dynamically tell if something's
[32:14] null you'll go with this but to keep
[32:16] things simple in this personal assistant
[32:18] build we're just going to add two
[32:19] different tools and it's super simple
[32:21] so we're going to come in here and we're
[32:25] just going to basically say um
[32:28] um attendee and I think that that should
[32:30] understand it if we are seeing that it's
[32:32] not working we will come in here and
[32:34] prompt after the key we'll give it a
[32:35] description but this should be working
[32:38] great so set a calendar event for let's
[32:42] now do 700 p.m. for dinner and we're
[32:44] going to say
[32:46] with Michael Scott and it would also
[32:48] have included his
[32:54] email and now we'll test this out so
[32:57] we've got that prompted in already we'll
[32:59] hit it it should go to this one because
[33:01] it realizes that there's an attendee now
[33:03] so that came through pop over to the
[33:04] calendar 7 PM dinner with Michael Scott
[33:07] so that's working as it
[33:09] should and now that we have these two
[33:11] tools we will add another calendar one
[33:14] and this one is going to be getting
[33:15] events so right now we head it us create
[33:17] we are going to do get many um we're
[33:20] going to select the calendar once again
[33:23] and we'll return all but now we want to
[33:26] do after and before
[33:30] so when we're asking can you get events
[33:32] from the past 3 days or when you're
[33:33] asking can you get events from today
[33:36] tomorrow we have to outline the
[33:38] parameters of you know it's going to go
[33:40] search calendar but which events you're
[33:42] going to be looking for so that's what
[33:43] we need to set up here okay so we're
[33:45] going to call this
[33:46] one get
[33:49] events um and now this is going to be
[33:51] interesting
[33:52] so let's say we were asking for can you
[33:55] get my events from today
[33:59] the the filters we're looking for are
[34:00] events after yesterday and before
[34:03] tomorrow so what we need to do in here
[34:05] is for
[34:06] after we're going to have the AI figure
[34:08] out um we're going to call this one day
[34:14] before and then we're going to outline
[34:16] that this is one day before the date the
[34:20] user re
[34:22] requested and so we've got that copy
[34:25] this down and see the after or sorry the
[34:27] before
[34:28] and so now this is going to be one
[34:30] day one day
[34:34] after and then we're going to just going
[34:35] to say one day after the date the user
[34:38] requested so if we're thinking about
[34:40] this
[34:40] logically we're asking for can you get
[34:43] my events from today and then it's going
[34:45] to be looking for any events that are
[34:48] after yesterday and any events that are
[34:49] before tomorrow so we'll try this
[34:51] out see what it does in this query we're
[34:54] just now going to be saying
[34:58] get my events from
[35:01] today so we'll save that and we'll run
[35:04] this see what it does it's going to be
[35:06] getting events and hopefully it filled
[35:08] in these correct parameters so we can
[35:10] see it did yesterday and tomorrow so
[35:13] that's working correctly and we can now
[35:15] see that we have our events from today
[35:17] perfect November 28th we've got dinner
[35:19] at 5: and then we have dinner with
[35:20] Michael Scott at s which if you remember
[35:23] those are the events we just created so
[35:25] now that that's working um you know we
[35:28] see that we see the way that this is
[35:30] going through and we see that it's
[35:31] pulling back the correct events and um
[35:33] yeah that's pretty much going to be it
[35:35] for the calendar agent except of course
[35:37] we need to add a response so that it's
[35:39] getting back to our agent so we're going
[35:43] to add the field here we're going to
[35:45] call this one response and then we're
[35:47] just going to be dragging in this output
[35:49] once
[35:50] again call this
[35:52] response and then all we need to do is
[35:56] um come in here we're going to refresh
[35:57] this because it won't have that workflow
[36:00] yet in its knowledge refresh the main
[36:03] agent we're going to add another tool
[36:04] called from another workflow this one is
[36:07] going to be called calendar
[36:11] agent we'll copy that we'll rename the
[36:14] tool calendar agent as
[36:16] well call this tool
[36:18] to take action in calendar and I've had
[36:21] people ask me what is the difference
[36:22] between the description you put here and
[36:24] then the description of the tool in the
[36:25] prompt in the system prompts up here and
[36:28] really it's not a huge difference the
[36:29] tools are outlining what's going on when
[36:31] you would call this but it's just best
[36:33] practice to also outline that in a tool
[36:36] section within the agent system prompt
[36:38] so we've got calendar agent demos the
[36:39] one we just made it's returning
[36:42] response um and yeah let's just test it
[36:45] out we
[36:47] will hit test workflow and then we'll
[36:49] say make an event for
[36:54] tomorrow um with Michael Scott
[36:59] at okay we'll do from 6:00 p.m. to 8:00
[37:05] p.m. and we'll just call
[37:08] it for a
[37:11] meeting okay so now it's going to do
[37:13] that it should grab the email so it's
[37:16] that's working well it's going to now
[37:17] hit the calendar agent and then it
[37:20] should respond to us with saying that
[37:21] that event was created um it may even
[37:23] provide a link to the event which would
[37:25] be pretty cool obviously we can promp
[37:27] that stuff in but okay so the meeting
[37:29] with Michael Scott's been scheduled um
[37:32] project discussion November 29th 6:00 to
[37:34] 8:00 p.m. Michael Scott with his email
[37:37] and now let's hop into calendar and we
[37:38] can see right here it got created it got
[37:40] created twice because it did one for us
[37:42] and then one for the email invite with
[37:44] uh with Michael Scott but that's great
[37:47] so um that is working and then real
[37:50] quick we'll just test can you get my
[37:51] events for tomorrow get my
[37:55] events from tomorrow
[37:58] so real quick just doing another test to
[38:00] make sure all our tools within our
[38:01] calendar agent Works um you know that we
[38:04] we tested out queries but we want to see
[38:06] it working in action the full picture so
[38:09] make sure everything's working before we
[38:10] move on to the next tool and now we can
[38:12] see we have two events scheduled for
[38:13] tomorrow like I said the project
[38:14] discussion events got duplicated so we
[38:17] would just have to go in there and fix
[38:18] that but everything's working as far as
[38:20] it's able to create an event it knows
[38:22] when to do an event by just us and when
[38:24] to do one with a an attendee it also
[38:27] knows to grab their email so that way if
[38:28] we wanted to do something like um yeah
[38:31] actually let's do that real quick so
[38:32] we're going to test this again we're
[38:33] going to
[38:35] say create an event for today at
[38:39] noon with Michael
[38:42] Scott and send him an email to
[38:47] confirm so we got that it should be
[38:50] hitting both tools we'll see it grab the
[38:53] email um now it should be as you can see
[38:56] it's hitting both tools which is awesome
[38:57] it's going to send him an email it's
[38:59] going to create an event and then we'll
[39:00] check on both of those things so the
[39:02] event should have been created let's
[39:04] just we'll just wait because I think
[39:05] it's really cool to just watch this
[39:06] stuff happen um so we've got the event
[39:09] today it's a meeting with Michael Scott
[39:11] you can view and manage the event here
[39:12] so it gave us a link and then
[39:14] Additionally the email confirming has
[39:15] been sent to Michael Scott so in the
[39:17] calendar we've got the meeting right
[39:18] here and then let me pull up that email
[39:21] okay so I switched over to the other
[39:22] email that's associated with Michael
[39:24] Scott and it said hi Michael just wanted
[39:25] to confirm that our meeting scheduled
[39:27] for today at noon looking forward to the
[39:28] discussion so that's that's a cool way
[39:31] we just show that it can use multiple
[39:32] tools instead of just having to use one
[39:34] um and then you can really you know
[39:36] start to combine tool after tool and be
[39:38] able to text it like hey I I have these
[39:40] five tasks I need you to do can you
[39:42] please do them all and it will go to
[39:43] them all so email agent calendar agent
[39:46] let's look at the next tool that we're
[39:47] going to add all right next agent we're
[39:49] doing is a research agent um this one is
[39:51] just going to be able to answer
[39:52] questions it can search the internet it
[39:54] can search through articles it has
[39:55] Wikipedia as well um and just another
[39:58] cool use case it will be um this one
[40:01] setting this one up is a lot easier the
[40:03] the email and the calendar ones are
[40:05] obviously the ones that you know when
[40:06] people are thinking of a personal
[40:07] assistant that's like what what comes
[40:09] most important to them so let me just
[40:10] put in assistant prompt real quick but
[40:13] you know obviously in this video we
[40:14] didn't really go super in depth with
[40:16] those two um what are they called those
[40:18] two agents but the idea is just to to
[40:21] open your eyes to how you can give all
[40:24] your agents different tools how you can
[40:26] um you know make make them more robust
[40:29] and really just making it that if you
[40:30] build out one email agent and you have
[40:33] all these different functions you can
[40:34] plug in this email agent to multiple
[40:36] different workflows and it's just going
[40:37] to be really scalable really modular and
[40:40] um you know you can just basically reuse
[40:42] the same build and just improve on this
[40:44] workflow and it will just be able to
[40:45] plug in anywhere so that's sort of what
[40:48] I wanted to show you guys with those two
[40:49] agents but now we have a research agent
[40:52] um we're going to set up this model real
[40:53] quick for Min is
[40:55] good um and then we're going to give it
[40:56] different tool TOS so the first one is
[40:58] going to be
[40:59] Wikipedia this is going to be the first
[41:01] thing that we wanted to go through so as
[41:02] you can see sorry I didn't I didn't read
[41:04] this prompt basically what I said in
[41:05] here is your research assistant you have
[41:08] Wikipedia Hacker News API and ser API
[41:11] and you first want to search Wikipedia
[41:13] if you can't find your answer then
[41:14] you're going to search articles with
[41:15] Hacker News and then if that doesn't
[41:17] work you'll use Ser API and we set it up
[41:20] like this so that you basically can get
[41:21] all the answers you need in here but we
[41:24] don't always want it to be first going
[41:26] to
[41:27] surf API because
[41:30] um that one has credits and it's an API
[41:33] call and you don't want to burn through
[41:35] all those so what we're doing is pretty
[41:37] much giving it almost like a tier system
[41:39] to do so in Surf API if you make an
[41:41] account you'll have a certain amount of
[41:42] free credits per month you'll just
[41:44] connect your API key
[41:46] there um but yeah so this is pretty much
[41:49] the framework and then what we want to
[41:51] do in here is give it an expression so
[41:55] um that's what we want wanted to do so
[41:57] wait
[41:59] anyways we have to limit the articles
[42:01] that it's going to come back so same
[42:04] thing this is such a cool a cool tool
[42:07] that we have is the from Ai and this is
[42:08] just going to say limit so that way we
[42:10] can limit the amount of Articles we want
[42:11] back you could ask for five you could
[42:13] ask for 10 um whatever that is okay so
[42:16] the reason that the right field wasn't
[42:18] coming up the way I wanted it to is
[42:20] because now we're looking for all
[42:23] getting many um and now we just need to
[42:25] basically set this stuff up again so
[42:27] um I don't know why it always does that
[42:29] but we're going to just do the same
[42:30] thing we're typing in our our limit here
[42:34] which is going to just obviously do its
[42:37] thing and then we want to add the
[42:38] keyword which this is going to be
[42:40] another
[42:41] expression it's going to be another from
[42:44] AI we're basically just grabbing um this
[42:48] is how it's going to specify what type
[42:49] of Articles to look for so we should be
[42:51] able to just go through like that so
[42:53] we've got Wikipedia Hacker News surf API
[42:56] um and then we're just going to give
[42:59] it the
[43:00] response once
[43:03] again which should be um an
[43:07] expression and I believe it's going to
[43:09] be json. output okay so now we'll just
[43:13] test out this
[43:17] thing
[43:19] um yeah okay
[43:22] so let's actually just test this out
[43:25] with um telegram so we'll make this guy
[43:27] pretty much active we will come back
[43:30] into here refresh this page so we can
[43:32] add our tool which is going to be that
[43:34] research agent that we just built and
[43:36] then we'll just test it out and we'll
[43:37] see if it goes through um you know
[43:40] Hacker News or what what it's coming
[43:42] through
[43:44] so this is going to be
[43:47] the research
[43:49] agent
[43:52] um this in here call this tool to
[43:57] search the
[44:00] internet to answer the user's
[44:04] question we're going to choose the
[44:05] research agent and we're good to go
[44:08] so sorry I really like to make sure it's
[44:12] like set up almost I like to make him
[44:14] sort of symmetrical but it's not perfect
[44:16] anyways um yeah we'll test this guy out
[44:19] so first if we just say something
[44:22] like what is
[44:24] the biggest mountain
[44:28] in the world maybe Tallis would have
[44:30] been a better word but anyways okay so
[44:32] we got a already in the research agent
[44:34] um I
[44:37] wonder okay I've done this every time I
[44:41] think we need to Define below obviously
[44:44] and it's going to be json. query so um
[44:48] hopefully you guys like you probably
[44:49] noticed when I was setting this up
[44:51] you're like oh it's going to fail
[44:53] because I've done that every time but
[44:55] anyways we can pretty much I I think we
[44:57] can just run that query again no it's
[44:59] it's waiting
[45:03] okay okay interesting so I think what it
[45:05] did is that it was able to answer that
[45:07] just using its its open AI model right
[45:09] here which is pretty cool I don't know
[45:12] why that wasn't
[45:13] going okay it's listening for us but it
[45:16] was able to answer that last time with
[45:17] the open AI chat model because it just
[45:19] has information but now it's hitting the
[45:21] research agent um and then we'll hop
[45:24] into the execution of the research agent
[45:26] so we've got the information about Mount
[45:27] Everest I'm going to assume that this
[45:29] one just used um
[45:35] Wikipedia okay so it actually used all
[45:37] of them which is interesting so it got
[45:39] information here it probably pulled back
[45:41] some articles so that's not really what
[45:43] we wanted to be doing because it grabbed
[45:45] five articles with highest mountain
[45:49] um and obviously it could have just
[45:51] answered that question with using
[45:53] Wikipedia so because it passed through
[45:55] the query of biggest mountain in the
[45:56] world so let's let's fix this up real
[45:58] quick to make sure that it's only using
[46:00] what we want it to use okay so in the
[46:02] reminder we just said you should only be
[46:03] calling one tool never call all three
[46:05] tools if you can get an answer with just
[46:06] one and then we just gave it a reminder
[46:08] of what the tools are so we'll just test
[46:11] it in here so we can see it happen
[46:14] live um let's ask it about like
[46:17] something
[46:19] where something trendy so what are
[46:23] the current
[46:25] trends with with um
[46:28] cryptocurrency so we've got that
[46:31] query we'll test this guy out and see so
[46:34] now it's using surf
[46:35] API and it's going to respond back to us
[46:38] just using that one so that's perfect
[46:40] it's going to give us the current trends
[46:41] in the cryptocurrency bull market
[46:43] emergence Ai and crypto all that kind of
[46:46] stuff that's perfect now let's ask
[46:48] something about
[46:51] um can you get me three articles about
[46:55] the
[46:57] um election so we'll go with
[47:01] that fire that off this one I assume
[47:03] we'll go to Hacker News it's just going
[47:04] to use one tool perfect just the way we
[47:06] want it to and then respond back with
[47:10] those
[47:10] articles so it's also going to give us
[47:13] the actual link to each article which is
[47:15] cool so let's real quick just go back
[47:17] into the personal assistant we will test
[47:20] the workflow and we'll say get me three
[47:24] articles
[47:25] about Finance so we've got that research
[47:29] agent it's going to give us those
[47:30] articles and then we'll just click on
[47:31] one of those links and see um you know
[47:35] that we can actually go look at them
[47:36] which is going to be
[47:38] cool there we go so we've got um
[47:40] personal finance for
[47:42] engineers so if we open this
[47:45] link we've got this blog course material
[47:49] awesome and then of course you can click
[47:51] on those other
[47:53] links which are right here so that's
[47:57] pretty much how the research agent is
[47:58] going to work so I don't want this
[47:59] tutorial to go super long but at this
[48:01] point you should understand how you can
[48:02] build agents as separate workflows give
[48:04] them access to or give the personal
[48:06] assistant access to these different
[48:07] agents if you were to build on more it's
[48:09] super simple um once you've seen these
[48:11] it's just a matter of prompting them so
[48:13] that it knows when to use them you could
[48:15] add on Vector store stuff like that too
[48:17] but now I want to show you guys
[48:18] something really cool which wasn't in
[48:19] the original build which is how you can
[48:21] make the agent understand an audio file
[48:24] and also output back an audio file so
[48:26] you can talk to it and listen to it
[48:28] rather than having to text it all the
[48:29] time so what we're going to do we're
[48:32] going to drag this out over here um and
[48:34] so as you see when we're texting with
[48:36] the agent we're getting back the actual
[48:38] text which is you know json. chat. text
[48:41] whatever and then we're feeding it into
[48:44] this guy as message.
[48:46] text so what we want to do now is add a
[48:49] switch node so in here we have basically
[48:53] two paths that it's going to go down
[48:54] we're going to have one for voice
[48:57] um actually that want yeah we want to
[48:59] rename it down here
[49:01] voice
[49:03] and that's how we want to do so we're
[49:06] going to have two paths right like I
[49:08] said one for voice and one for text so
[49:12] what we want to do is if text exists so
[49:15] right here is a text message if this
[49:18] exists then it's going to go down this
[49:21] path right here called text and if it
[49:24] doesn't
[49:25] exist or not it doesn't exist but if a
[49:27] voice file exists um which actually we
[49:30] could make it as simple as just this but
[49:32] if a voice file exists it's going to go
[49:33] down this path so how do we get this
[49:34] voice file we are going to have this
[49:38] listen for an
[49:40] event we're going to come in here and
[49:41] just say hello testing so now we've
[49:45] gotten back in here a voice
[49:47] file and then what we can do in here is
[49:50] we see that we're getting this voice
[49:51] file rather than a text file so what we
[49:53] want to do is grab that voice file which
[49:55] will be file ID right here
[49:57] and we're going to say well now if this
[49:58] one exists you're going to go down this
[50:01] route so we have two routes um in order
[50:04] to talk to our agent and so the first
[50:06] thing we want to do is we need to make
[50:09] sure that this input right here is going
[50:10] to be consistent so it needs to always
[50:12] be called the same thing that way if
[50:14] it's a voice file or a text file we're
[50:16] going to get it no matter what so we're
[50:18] just going to come in here and we're
[50:19] going to call this one I hate that it
[50:21] does that we're going to call this one
[50:23] um json. text
[50:26] and now we just need to map out and make
[50:28] sure that each file coming through is
[50:30] going to be or each in output is going
[50:32] to be json. text so how we can do that
[50:34] with text is we're going to add a an
[50:37] edit field set we're going to map this
[50:41] one um and just call it text and we'll
[50:46] drag in that that input real
[50:50] quick so I'm just naming this for
[50:54] organization so we're going to have this
[50:56] one setting as text and coming through
[50:58] and I'll show that in a sec but now if
[50:59] it's a voice file the first thing that
[51:01] we need to do is actually download that
[51:02] file so we're going to go to telegram
[51:05] we're going to let's see chat actions
[51:09] file actions get a file right there so
[51:11] we're getting a file the operations get
[51:14] resources file and then we need the file
[51:15] ID so if we can test this guy we'll see
[51:18] it's a voice file it's going to come up
[51:19] here and now the file ID is just pretty
[51:22] much down here which is what earlier we
[51:23] said does the file ID exist so
[51:29] download voice file now we've got the
[51:32] file put in here we want to download it
[51:33] we test the step and now you can see
[51:35] it's going to come back over here um and
[51:37] this is what we're looking for so now
[51:38] what we need to do with this file is we
[51:40] want to grab an open AI node and we're
[51:42] going to grab one that is going to
[51:44] transcribe a recording so we're
[51:47] transcribing this
[51:50] one um
[51:53] transcribe audio we're transcribing
[51:56] recording in it's coming in from here
[51:58] and then we just I think we actually
[52:00] should be good with that so if we hit
[52:01] test it's grabbing the input data field
[52:04] data and we just said hello testing we
[52:06] got that file coming back and as you can
[52:08] see it's coming back as json. text so
[52:10] we'll route this into here and now we
[52:13] can see in the personal assistant it's
[52:14] getting our message that said hello
[52:16] testing and now we just need to make
[52:18] sure that it's going to get this message
[52:19] as well so now if we have this guy
[52:23] listening for us we will just say hello
[52:27] it got that file it understands that
[52:29] it's a text file now because we routed
[52:31] it right here and then we'll run this
[52:33] guy and in here it took it didn't do it
[52:36] yet so we have to set it up it's going
[52:38] to take this input which is our text
[52:41] which is currently being called json.
[52:42] message. text we'll test it now it's
[52:44] coming out as json. text and now our
[52:47] assistant is going to be getting that
[52:48] message regardless whether it's a voice
[52:50] file or a text
[52:52] file so that's super cool and now we
[52:55] just need to Output over here here when
[52:57] we're getting an answer from the
[52:58] assistant that it's going to respond to
[53:00] us with a text message but also with a
[53:02] voice file all right so we've already
[53:04] got the text message coming through we
[53:05] know that this works so let's drag it up
[53:07] here and now we need to go down another
[53:08] path which is going to obviously give us
[53:11] the information as a text file so first
[53:13] what we want to do is I'm going to use a
[53:17] summarization chain because we don't
[53:20] exactly want
[53:21] um we don't want the exact text coming
[53:24] back what we want is a summary of it so
[53:27] that we can see the details but then
[53:29] visually or sorry um audibly we're just
[53:32] getting a summarization so actually I
[53:35] don't know why I was going to rename
[53:36] that that's fine so we've got this um it
[53:40] will be summarizing the actual text that
[53:41] we would be getting back and then now
[53:44] with the summary we want to feed this
[53:45] into a post request we're going to be
[53:47] sending it to 11 Labs which is going to
[53:49] be helping us make the actual audio file
[53:52] so HTTP request um we're going to be
[53:55] doing a post like I said and then we
[53:58] need the URL we need to set up some
[53:59] headers and stuff like that so in 11
[54:01] laps if you haven't made an account go
[54:03] ahead and make one real quick um I also
[54:06] want to mention that when I was testing
[54:08] this kind of stuff I was on the free
[54:09] plan and I was getting some errors with
[54:11] like it was saying my credentials were
[54:12] incorrect so if you are experiencing
[54:14] those errors then you may want to try
[54:16] the starter plan which is only five
[54:17] bucks and you get 40,000 credits which
[54:20] lasts a decent amount of time as long as
[54:21] you're not getting files like 2 minute
[54:23] long but
[54:25] anyways um if you're getting that error
[54:27] that may be why but once we're in here
[54:29] we're looking at text to speech because
[54:30] we're going to be feeding it in text
[54:32] obviously and then it's going to be
[54:34] coming back with our um audio file so up
[54:38] here we click on curl and you could copy
[54:40] this in and you could import your curl
[54:42] into NN but what we're going to do is
[54:44] just grab this this URL and so we're
[54:46] going to grab um actually yeah we can
[54:49] just grab this whole thing and we're
[54:51] going to paste that in here but what
[54:54] follows the text to speech slash as you
[54:57] can see right here is the voice ID so if
[55:00] you go into voices in 11 Labs you can
[55:04] listen to these different voices um and
[55:08] you can figure out which one you want
[55:09] I'm going to be using Ryan Kirk and then
[55:11] you're going to click on view you're
[55:13] going to click on
[55:14] ID and you've copied the ID so now all
[55:18] we have to do is after the text of
[55:19] speech forward slash we just copy in
[55:21] that ID so now 11 Labs knows um which
[55:25] voice we want to use so we've got the
[55:26] that set up and now all we need to do is
[55:27] set up our our headers so with our and
[55:29] our Json body but headers the first one
[55:32] that we have to do if you go back to the
[55:34] API documentation is our API key so it's
[55:38] going to be
[55:40] xi- api-key we'll grab
[55:45] that um paste that in there and then we
[55:48] need the actual API key of course so
[55:50] we'll go back into
[55:53] um 11 Labs we will we will just
[55:56] basically create a new
[55:58] key this one will be called
[56:01] test we've got our value we copy that in
[56:04] and then we're going to paste that right
[56:05] here just make sure there's no trailing
[56:07] white space anywhere and then we're
[56:09] going to add another header as you can
[56:11] see this header is content
[56:14] content-type so we'll grab that back and
[56:17] end it in that's our header name and
[56:19] then the actual value is going to be
[56:21] application
[56:23] sljs so we paste that into there and so
[56:26] should be set up now we just need to set
[56:27] up the actual body what we're sending
[56:30] over to um 11 Labs so first what I want
[56:33] to do is I'm just going to test this
[56:34] assistant because we want some actual
[56:36] data to be coming through so um I'm just
[56:39] going to
[56:40] say testing so now it should be going
[56:43] through it's probably going to respond
[56:44] with something like you know we don't
[56:45] actually you know the assistant said if
[56:48] you're testing please let me know if
[56:49] there's any specific but now we have
[56:50] data coming through our summarization
[56:52] chain which is the speaker offers
[56:54] assistance and invites input so
[56:56] now we have that information coming back
[56:58] we'll go into our send body we're going
[57:00] to be using Json expression and we'll
[57:04] open this up I want to paste that in
[57:06] here um and what we want is to make this
[57:10] Json
[57:12] do let's see json.
[57:15] response. text and so now we have this
[57:18] and I will paste this code in here as
[57:20] far as the replace and the stringify
[57:23] I'll paste this in the free school
[57:24] Community as well link for that will in
[57:26] the description go to ret YouTube
[57:28] resources and you can grab this um
[57:30] little code snippet as well as the
[57:33] workflows that were shown in this video
[57:35] but now we're just getting a nice clean
[57:37] string that will be sent over to 11 Labs
[57:39] so it can turn this right here into
[57:41] audio
[57:43] so um let's actually just test this real
[57:47] quick and that went
[57:49] through okay it's it's being all weird
[57:51] because of the what's it called because
[57:55] of the multiple switch routes but
[57:56] anyways from here we'd have an audio
[57:58] file and then once again it's just as
[58:00] simple as adding
[58:01] Telegram and we're going to be sending
[58:04] an audio file is the resource send audio
[58:07] file chat
[58:09] ID once again we're doing the same chat
[58:11] ID from earlier which is going to be we
[58:13] get that from the telegram
[58:15] trigger we want item. json. message.
[58:20] chat. ID there we go and this should be
[58:23] the correct one we can always just check
[58:25] that in here
[58:26] that we're getting the chat ID you could
[58:28] also just copy and paste that into
[58:31] there
[58:33] and send
[58:36] audio and then we just need the actual
[58:38] audio it's going to be a binary file and
[58:40] so it should just be coming through as
[58:41] data um we should be good to go with
[58:44] that so let's do a
[58:47] test um let me just make this stuff a
[58:50] little
[58:51] more concise so that we can see the
[58:54] stuff happening I like the way it does
[58:56] that that's fine that's
[59:00] fine okay
[59:02] anyways testing workflow we'll send over
[59:04] an audio file can you send an email to
[59:08] Nate herk um just checking in on his day
[59:11] so now we're getting that file you can
[59:13] see it's being downloaded it's being
[59:14] transcribed the actual assist is now
[59:16] taking place it should be hitting the
[59:18] email agent okay it actually didn't so
[59:22] it had an inform it had an issue with my
[59:23] contact data so we'll fix that in a sec
[59:26] but now we just need to make
[59:28] sure file name is needed to send
[59:31] audio um okay right so we have to add a
[59:34] file name and that's just going to be
[59:37] data.
[59:39] MPEG hit test
[59:41] again okay and now we have to do that
[59:44] again so anyways this is the the beauty
[59:48] of the um almost sort of live builds but
[59:51] anyways let's see what the issue was I
[59:52] found it Nate herk in the database with
[59:54] the email address nerk gmail.com
[59:56] H okay it's because it it transcribes my
[59:59] name as Nate herk with a u so let's just
[60:03] try something else let's say um can you
[60:05] send an email to Michael Scott checking
[60:07] in on his day so that's actually kind of
[60:09] ridiculous with the transcribing um
[60:12] because it couldn't find Nate herk
[60:13] anyways so it's finding Michael Scott
[60:15] now it's going to hit the email agent um
[60:18] we should see it get summarized so
[60:19] there's the text and then the audio file
[60:21] coming back should be a little different
[60:23] so we've got this
[60:27] the email to Michael Scott has been sent
[60:29] inquiring about his
[60:30] day okay awesome so that's pretty much
[60:33] how it works the way that you can talk
[60:34] to it you can see a detailed breakdown
[60:37] um but then you also get something else
[60:38] back so if I
[60:39] said let's test this
[60:43] workflow can you summarize my calendar
[60:45] events for
[60:47] today so same thing it's going to get
[60:50] that information hit the right
[60:52] agent it's going to send us a text
[60:54] that'll be a little more detailed but
[60:55] then the summary will be um well a
[60:59] summary that's kind of the whole point
[61:01] of the summary anyways so this the
[61:03] information we got back now it's
[61:04] creating that audio file for us and it
[61:07] shouldn't be as detailed as we get
[61:09] here so let's listen to this we won't
[61:12] listen to the whole thing today's
[61:13] calendar events for November 28th 2024
[61:16] include one asterisk asterisk meeting
[61:20] with Michael Scott asterisk asterisk
[61:23] okay so that was awful it was reading
[61:24] off asterisk asteris we don't want that
[61:27] um I was trying to play around the sum
[61:29] with the summarization chain but what
[61:30] we're going to do is just um we're going
[61:33] to grab an open AI message model and
[61:36] basically when we're telling it to
[61:38] summarize we're going to say like to
[61:40] make it as plain text we don't want any
[61:43] of
[61:44] the um you know Asters coming through so
[61:46] real quick am I able
[61:48] to
[61:51] yeah anyways we're just going to come in
[61:53] here um we grab foral mini and your goal
[61:58] is just to
[62:02] summarize this incoming information
[62:06] which will
[62:07] be this output right here and yeah so we
[62:12] got that and then we're just going to
[62:14] say output only plain text there should
[62:19] be
[62:20] no um like markdown formatting or
[62:29] um or any
[62:32] symbols okay so that should be simple
[62:35] enough we'll test that
[62:38] out it is going to be weird about that
[62:42] because um you know the the whole
[62:44] looping but this should be
[62:47] json. message. content now I believe so
[62:51] we'll give it another run
[62:56] please summarize my calendar events for
[63:00] today
[63:02] okay what is this I don't know what what
[63:04] try I was about to say third times's a
[63:05] charm but we'll
[63:06] see it should now be just summarizing
[63:09] information it should be a plain string
[63:11] um that way when the audio file is being
[63:14] created it's going to be much cleaner
[63:16] let's see what we got okay this looks a
[63:18] lot cleaner and then we'll see what the
[63:19] actual file sounds like hopefully this
[63:22] one's
[63:23] better your calendar events for today
[63:26] November 28th 2024 include 1 meeting
[63:29] with Michael Scott from 12:00 p.m. to
[63:31] 1:00 p.m. MDT status confirmed response
[63:34] needed from up at digital gmail.com two
[63:37] dinner from 5:00 p.m. to 6 p.m. so that
[63:39] one comes to cleaner we would probably
[63:41] want to play with the prompting so it's
[63:43] gives you an even more high level
[63:44] summary we don't want to maybe hear that
[63:45] it's confirmed or if it needs a response
[63:47] or maybe we do but anyways that's just
[63:49] you know You' play with the prompting
[63:50] within that opening I node right there
[63:52] but yeah I mean that's the foundations
[63:53] really we could you know obviously come
[63:55] in here and we could add something like
[63:57] a a vector
[63:58] store um let's just call this
[64:02] data
[64:05] retrieves information
[64:08] about company projects so we can do
[64:12] that obviously we'd set up the other
[64:15] information we need for the vector
[64:18] store um but yeah obviously the idea is
[64:21] that we're just pretty much building on
[64:24] top of the the agent um type workflow
[64:29] you can continue to come in here and add
[64:30] more and more tools which is obviously
[64:32] the super cool part and um yeah just the
[64:35] whole theory of like being able to build
[64:36] out workflows in end andn and being able
[64:38] to you know call them in multiple
[64:41] different workflows they're very
[64:42] scalable it's very flexible and yeah the
[64:45] whole idea is that you have all these
[64:46] different workflows you can sort of Plug
[64:48] and Play which is super
[64:49] cool um so yeah I hope that this
[64:52] workflow or I hope that this
[64:53] step-by-step tutorial was insight
[64:56] um you know there's a lot of things that
[64:57] we could do to improve upon this one
[64:59] thing I'll just show really quick is a
[65:01] cool way that you could have your agents
[65:03] be able to like talk to each other a
[65:04] little bit more so you know obviously
[65:07] we're calling email agent we're calling
[65:08] calendar agent stuff like that let's say
[65:11] we were calling the calendar agent and
[65:13] it aired right um so this is the an
[65:16] actual workflow that I was using for the
[65:19] personal assistant build and this is not
[65:20] the one we just built but anyways you
[65:21] come into here and you want to go to
[65:23] settings and then you want to make it
[65:24] continue using an output so if we do
[65:27] that we have two different options so if
[65:29] the workflows errors for some reason
[65:31] rather than it just stopping or rather
[65:33] than the agent responding to us on
[65:35] Telegram and saying we couldn't do that
[65:37] it's going to go down this path and it's
[65:39] going to respond to that personal
[65:40] assistant with the response of unable to
[65:43] perform task please try again so this
[65:45] agent would hit this it would get a
[65:47] response and then rather than responding
[65:48] to us it would be like okay well that
[65:50] didn't work what do we need to do
[65:51] differently and you would maybe prompt
[65:53] that a little more
[65:54] specifically but let's say for some
[65:56] reason it didn't grab the email then it
[65:57] would try again it would run through
[65:58] that whole query and then this time it
[66:00] may go grab the email and then
[66:01] understand okay well that's sort of
[66:03] where I messed up there anyways I hope
[66:05] this video was insightful like I said
[66:07] the workflows that we used in this video
[66:08] as well as the code Snippets will be in
[66:10] the school Community you'll just go to
[66:11] YouTube resources find this video
[66:13] everything will be attached there and
[66:15] you know I mentioned there's a lot of
[66:16] ways to improve on this build to make it
[66:18] really more production ready and if you
[66:19] want to dive deeper into that please
[66:21] check out the paid Community if you have
[66:22] any questions about that reach out to me
[66:24] um the link for that will o be down in
[66:26] the description but thank you guys
[66:28] really appreciate your time today and um
[66:30] we'll see you in the next one