Video Title: n8n's Native MCP Integration (without the hype)
Video ID: VTEg8uJ4yxo
URL: https://www.youtube.com/watch?v=VTEg8uJ4yxo
View Count: 52,125

[00:00] So, Naden just released their native
[00:02] integration for MCP servers. We got two
[00:04] new nodes and it's definitely a step in
[00:06] the right direction, but it's not
[00:07] exactly what I was hoping for. So, today
[00:09] we're going to break down what these two
[00:10] new nodes actually do and what that
[00:12] means for us and kind of the limitations
[00:14] and what's next. So, these are the two
[00:16] new nodes that we got. We have an MCP
[00:18] server trigger and an MCP client tool
[00:20] that you have to hook up to an AI agent
[00:22] as you can see up here. Now, in order to
[00:24] get access to these, you need to update
[00:25] your instance of Naden to the latest,
[00:27] which is 1.88. Previously, in order to
[00:30] get these MCP server nodes, you would
[00:32] have had to self-host and then install
[00:34] the MCP server community node, and that
[00:36] looked more something like this. But now
[00:38] with this new update, we have these
[00:39] natively in Naden. And I wanted to come
[00:42] in here and make this video. As you can
[00:43] see, I'm not in my home setup. So, sorry
[00:44] if some of the production quality isn't
[00:46] as high, but I wanted to make this video
[00:48] and just talk to you guys about my
[00:50] thoughts around this integration because
[00:52] I imagine there's going to be a ton of
[00:53] videos coming out that may not really
[00:56] dive into what this really means and
[00:57] it's just going to be more kind of hype
[00:59] around it, which don't get me wrong, I'm
[01:01] not trying to bash on it. This is super
[01:02] cool. I'm glad that they've released
[01:03] this because it means that they're kind
[01:05] of, you know, forward thinking and it's
[01:06] taking a step in the right direction
[01:08] around these MCP servers. But what's not
[01:10] here yet is the ability to truly create
[01:12] like an MCP agent that we hook up a
[01:15] bunch of different MCP servers to and
[01:17] we're able to dynamically and flexibly
[01:19] have that agent take action in a ton of
[01:21] different servers. So far the main
[01:23] benefit of this MCP integration is that
[01:25] we have this trigger which means we can
[01:27] now hook up claw desktop or something
[01:30] like cursor or any IDE you know MCP
[01:33] client of our choosing. we can now give
[01:35] it access to our NEN workflows and
[01:37] tools, which is where things get pretty
[01:39] cool. So, we're going to do two demos
[01:41] today. The first one is me using an MCP
[01:43] agent in Nitn where we're going to be
[01:45] using this new client server tool in
[01:47] order to call our MCP server trigger and
[01:49] access these different tools down here.
[01:51] And then I'll show you guys how we can
[01:52] connect this to Claude desktop and
[01:54] actually be able to talk to some Naden
[01:56] tools in Claude. Okay, so before we
[01:59] actually get into the breakdown, um, if
[02:00] you don't really understand MCP or model
[02:02] context protocol, then definitely watch
[02:04] this video. I'll tag it right up here. I
[02:06] basically break it down as well as I
[02:07] can. But anyways, let's quickly take a
[02:10] look at what's going on within this
[02:11] actual server trigger node. When we
[02:13] click into it, we can see a test URL and
[02:15] a production URL, very similar to the
[02:17] way that we have our web hooks in
[02:18] Nitnen, where we can use the test one to
[02:20] see what's going on visually, but then
[02:22] when we want to make this workflow
[02:23] active, we will have to grab that
[02:24] production URL. So, I just copied that
[02:26] test URL. I'm going to go into a new
[02:28] workflow where we have an MCP agent.
[02:30] We're going to add this tool which is
[02:32] going to be the new MCP
[02:35] um client tool right here. As you can
[02:36] see, all we have to do is paste in that
[02:38] SSC URL. And so an SSC endpoint stands
[02:42] for server sent event endpoint. And this
[02:45] is why these aren't yet as flexible and
[02:47] dynamic as we want them to be um when we
[02:50] can eventually connect to all these
[02:51] different MCP servers. And basically the
[02:53] reason that is is if you see back in our
[02:55] self-hosted version with our community
[02:57] node when we go to create a new
[02:59] credential and so you can see all the
[03:00] different servers I've connected to we
[03:02] have the option to connect via command
[03:04] line stddio where we would do our
[03:06] command of you know ex or whatever it is
[03:08] our arguments and our environment
[03:10] variables or we could have done server
[03:12] sent events and most of the MCB servers
[03:14] that we'd be looking at on this list in
[03:16] the GitHub repo these all basically
[03:19] don't offer SSSE connection some do some
[03:21] don't but for the majority you would
[03:23] have to connect like this firecall one I
[03:24] did in the demo. We had to connect using
[03:26] a command and our arguments and our
[03:28] environment variables. Anyways, that's
[03:30] kind of the difference and that's why
[03:31] the truth is we're not really able to do
[03:33] this type of stuff. The community node
[03:35] is still going to be pretty powerful for
[03:36] certain MCP servers. But now in Naden
[03:38] using this trigger, we can connect
[03:40] something like claude to our different
[03:41] tools which is still very cool. So
[03:43] anyways, I've connected these this agent
[03:45] client tool to that trigger that we were
[03:47] just looking at. And now if we talk to
[03:49] this guy, it's going to send data over
[03:51] here, call one of these tools, and then
[03:53] respond back to our agent. So this use
[03:55] case that I'm showing right here is not
[03:57] very different to if we were to just add
[03:59] one of these tools, call n workflow, and
[04:02] we're just basically choosing a workflow
[04:04] from our list to actually send data to.
[04:06] That's very similar to what's going on
[04:08] in this specific example. So anyways,
[04:10] I'm going to go back into this workflow,
[04:12] hit test workflow, so that this trigger
[04:14] is listening for us, and then we're
[04:15] going to send over a message. Okay, so
[04:17] I'm going to ask it to create an event
[04:18] for 3 p.m. As you can see on my
[04:19] calendar, nothing at 3 p.m. We'll hit
[04:21] send. We'll see it call the MCP client
[04:24] tool, which is going to be calling that
[04:26] other trigger. We'll flip back into the
[04:27] other workflow. We can see that the
[04:28] trigger got activated and it called
[04:30] create event tool. And then we can see
[04:32] in our calendar, we have a team meeting
[04:33] now at 3:00. So what's actually going on
[04:35] is it decided to call this client and it
[04:38] understands the different tools that it
[04:39] has as well as the parameters it needs
[04:41] to send over, everything like that. As
[04:43] you can see, we got our event start
[04:44] time, event end time, and event title.
[04:46] And then we can see the tool name that
[04:48] it used was create event. And then what
[04:50] it did in the create event tool was the
[04:52] resource was event. The operation was
[04:54] create. And so this is interesting to me
[04:55] because we can see we have like a
[04:57] resource and an operation. And if we go
[04:59] back into the actual tools in each of
[05:01] these tools, we have a resource and an
[05:03] operation, but they have to be fixed. So
[05:05] for example, creating event, the
[05:07] operations create, the resource is
[05:08] event. If we were to get an event, the
[05:11] operation is get many, the resource is
[05:13] event. So what would be really cool is
[05:16] you know moving forward if we had one
[05:19] mode for Gmail for example one tool
[05:21] where in here you know the way that we
[05:23] have the tool and the subject and the
[05:25] message can be defined by the model. If
[05:27] we could also have the resource and the
[05:30] operation be defined by the model based
[05:32] on the incoming query. That's when we
[05:34] truly get into some really cool like a
[05:37] onesizefits-all tool that you know, hey,
[05:40] here's a Gmail MCP server. Now you have
[05:42] all of these options of different
[05:44] resources and different operations and
[05:46] then within all of those operation
[05:47] resource pairs, you can do different
[05:49] things and the model will decide all of
[05:51] that. So that's where we aren't yet.
[05:53] That's where we will be eventually which
[05:55] will be super super exciting to see. But
[05:57] um that is why that's like a current
[05:59] limitation just because we now have the
[06:01] native integration for this MCP server
[06:03] through SSE endpoint um and a new
[06:06] trigger. We don't yet have the ability
[06:08] to give our agents a Gmail MCP server, a
[06:10] calendar MCP server, a Slack MCP server,
[06:12] and then have it just be able to figure
[06:14] out everything. Not quite yet. And so
[06:16] another thing that I found that's kind
[06:17] of a limitation is when you're sending
[06:19] over things to the server, one of the
[06:22] things that makes our agents so smart
[06:23] and actually a huge deal of making our
[06:25] agents so smart is how we system prompt
[06:27] them. And if the MCP server is just
[06:29] capturing information, it's not always
[06:31] getting that same type of prompting. So
[06:33] here's an example I'll show you guys. If
[06:34] I test workflow, we're going to be
[06:36] sending it to this LinkedIn post
[06:37] generator where I'm going to come back
[06:39] into our workflow and I'm going to ask
[06:41] it to create a LinkedIn post about
[06:46] image generation with AI. So, we'll send
[06:49] that off. It's going to correctly call
[06:51] the right tool and everything, but what
[06:52] we'll do is we'll actually look at
[06:54] what's going on. So, give this a sec.
[06:57] We'll flip back into here and we'll see
[06:58] that it should call the right tool,
[07:00] which will be this this LinkedIn post
[07:01] one. Um, it's a little bit weird with
[07:03] the data transfer of like the actual
[07:06] what's going on and and when it's
[07:07] sending data. As you can see, it's
[07:09] taking a while, but I imagine if we
[07:11] clicked into this LinkedIn post
[07:12] generator right now, we would get this
[07:14] one is executing because that's kind of
[07:15] what takes the longest time. As you can
[07:17] see, um, it instant finished. So, it
[07:19] basically won't show you that it's done.
[07:21] It won't even show you that it's
[07:22] triggering until it's actually done,
[07:23] which is something I found interesting.
[07:25] But anyways, it created that LinkedIn
[07:26] post. Um, what's going on in this
[07:28] workflow is actually I'll just open it
[07:29] up real quick to show you guys. sending
[07:32] this over to a sub workflow that is
[07:33] going to take our query, do some
[07:36] research with Tavi and then send it to
[07:37] our LinkedIn sheet. So now you can see
[07:39] we have um AI and creative industries,
[07:42] we have generative AI tools, images, all
[07:45] this kind of stuff. Anyways, that's not
[07:47] the point. What I wanted to show you
[07:48] guys is what it actually sent over here,
[07:50] which it sent
[07:52] over basically a LinkedIn post already.
[07:54] So anyways, it knew to use its tool
[07:55] called LinkedIn post because we gave it
[07:57] this description of when to call it. But
[07:59] what it did is it sent over a full
[08:01] LinkedIn post already. And so yes, maybe
[08:03] that's prompting on this side. But when
[08:05] you actually want to connect this MCP
[08:07] client to your Claude or your
[08:10] cursor, you don't have that prompting
[08:12] element there of, you know, if we're in
[08:13] Claude and we ask it to create a
[08:15] LinkedIn post using the MCP server. It's
[08:17] probably not just going to send over a
[08:19] short query like, you know, puppies or
[08:21] whatever we want the topic of the post
[08:23] to be. It's going to probably try to
[08:25] create a post first and then send that
[08:26] post to the workflow. So, there's just
[08:28] going to be some issues like that with
[08:30] prompting. Similarly, with my testing,
[08:32] when I was asking it to do stuff like um
[08:35] you know, create an event with someone
[08:36] or send an email to someone, it didn't
[08:38] always know intelligently through the
[08:40] server that I could get contacts first
[08:42] and then send an email. So, that would
[08:44] just be kind of a step-by-step like,
[08:45] hey, can you get someone's contact? Hey,
[08:47] can you send them an email now? So
[08:49] that's why in this case when you kind of
[08:50] want that multi-step dynamic tool
[08:52] calling ability, you're actually better
[08:53] off just using like the ultimate
[08:55] assistant where you'd have different
[08:56] child agents down here, which you could
[08:58] almost think of these as like different
[08:59] MCP servers. Like this is a Gmail MCP
[09:02] server. This is a calendar MCP server.
[09:04] It's not exactly the same, but it's a
[09:06] way you can think about it because in
[09:08] that email agent, we have all of these
[09:09] actions to take here. And we have
[09:11] prompting going on within each of these
[09:13] agents to understand kind of how to
[09:15] delegate tasks and what to send over to
[09:17] each workflow. Anyways, I don't want to
[09:19] get too sucked into this and confuse you
[09:21] guys, but this is exactly what I mean.
[09:22] So, this is the run where we asked our
[09:24] main agent, hey, can you help us create
[09:26] a LinkedIn post for image generation
[09:28] with AI? what it sent over was it
[09:31] already tried to create one before it
[09:33] did any research or hit this workflow.
[09:35] So, it sent over a LinkedIn post. The
[09:37] agent then took that, did research on
[09:39] it, and then it again created a LinkedIn
[09:41] post. So, it's just not super efficient,
[09:42] and that's just one of the limitations
[09:44] with the way that you actually have to
[09:45] like prompt these things to send data
[09:48] between each other. So, anyways, let's
[09:50] quickly connect this to Claude Desktop
[09:52] because that's truly where this is
[09:53] actually pretty cool because now we can
[09:55] have Claude talk to our N& tools. So
[09:57] anyways, I am now in Claude Desktop.
[09:59] Prerequisite if you want to follow along
[10:00] and do this is you need to obviously
[10:02] install Cloud Desktop. You'll have to
[10:04] install Node.js on your laptop as well
[10:06] or your computer. So you'll just
[10:08] download that. It's it's super easy to
[10:10] set up. And then in Cloud Desktop on the
[10:13] top of the options up here, you'll have
[10:14] something you'll have a help and then
[10:16] you'll just want to enable developer
[10:17] mode. And now what we can do is we come
[10:20] into our cloud settings. Um what we want
[10:22] to do is open up developer and we want
[10:24] to click on edit config. And then you
[10:26] have this cloud desktop
[10:28] config.json and you're going to open
[10:30] this up in some sort of code editor. So
[10:32] for me that open cursor I'm going to
[10:34] paste in this which I will have in the
[10:36] description of this video and all you'll
[10:37] have to change is your actual URL. So
[10:40] I'm going to go ahead and grab my
[10:42] production URL of that trigger. So back
[10:45] in any I'm going to switch this workflow
[10:46] to active. I'm going to click got it.
[10:48] We're going to open up this server
[10:50] trigger. Click on production and grab
[10:51] the production URL. Now that that's
[10:53] copied, we'll put that back into that
[10:55] JSON file. So, I pasted that right in
[10:57] there. All we have to do now is save
[10:58] this file. And then you'll have to just
[11:00] restart your Claude and then we should
[11:02] see tools available. Okay. Also made a
[11:04] mistake and I messed up the JSON. So, I
[11:06] just had cursor fix it. It's replacing
[11:08] the JSON. And then we'll have to
[11:10] relaunch Claude once again. Okay. So,
[11:11] I've just relaunched Claude after I
[11:13] fixed the JSON. And now you can see that
[11:15] we have 10 MCP tools available. So, if I
[11:17] click into here, we can see we have add
[11:19] contact, create draft, create event,
[11:21] delete event. We have all these tools
[11:23] that are all coming from the server
[11:24] NAND. And all of these tools are the 10
[11:27] tools that we have listed down here and
[11:29] that we've given this MCP server trigger
[11:31] access to. So we basically just built an
[11:33] NADN MCP server right here that has
[11:35] access to these different tools. So now
[11:37] if we were to talk to Claude, we can
[11:38] have it use those tools. Okay. So first
[11:40] of all, the example I always go with,
[11:42] we're going to ask it to get contact
[11:43] information for Michael Scott. And we
[11:44] should see that it's going to be using
[11:46] the MCP server for NN. We're going to
[11:49] allow for this chat. And now it's going
[11:51] to basically go access this workflow
[11:53] that's in the background and it's going
[11:55] to get that information. So as you can
[11:57] see we got mike atgreatscot.com. We have
[11:59] phone number everything like that. So
[12:00] here's execution that was just fired off
[12:02] from claude and we can scroll all the
[12:03] way down here and see that it used the
[12:05] get contacts tool from our workflow. And
[12:08] so earlier when I alluded to some of the
[12:10] limitations with prompting, we'll see
[12:11] what happens here. We're going to ask it
[12:12] to create a LinkedIn post about Nvidia
[12:14] and send that to the team in Slack. So
[12:17] we'll send that off. What I imagine it's
[12:18] going to do is it's going to ask us to
[12:19] use the LinkedIn post tool. As you can
[12:21] see, it's doing that right now. And then
[12:23] it's going to let me just allow this.
[12:25] And then it's probably going to create
[12:26] that post. And then it will come back
[12:27] and ask us, okay, now we need to use the
[12:29] send slack message tool. So we'll watch
[12:33] what happens here. Cool. So as you can
[12:34] see, it created the post and then it
[12:36] came back and asked us if we could use
[12:37] the Slack tool. So that's what it did.
[12:39] Now let's basically just go check what
[12:41] happened. So in the LinkedIn post, we
[12:43] can see the sheet got updated with a
[12:45] media LinkedIn post. And then in my
[12:47] Slack, we now have that LinkedIn post
[12:49] about Nvidia right there. So, I don't
[12:52] want this video to go too long, but I
[12:53] just wanted to get in here and kind of
[12:54] cut out all of the hype around this
[12:56] native integration. I'm super glad they
[12:58] brought it. It is really cool. But focus
[12:59] around this integration should be I can
[13:01] now use Naden tools in Claude Desktop or
[13:04] in Cursor, which is awesome because you
[13:06] can do things like this where you're
[13:07] going to set up some really custom
[13:09] workflows in NAN and then you can have
[13:11] Claude Desktop trigger those, which is
[13:13] that's where the power really comes in.
[13:15] I know, you know, with past videos and
[13:17] everything I've showed, especially when
[13:18] I made this little demo, we got really
[13:21] excited about the idea of having an
[13:23] agent being able to hook up to a bunch
[13:24] of different MCB servers and more
[13:26] intelligently and flexibly make
[13:28] decisions and actually take action.
[13:30] That's not where we are yet in N&N. But
[13:32] like I said, now that we can have this
[13:34] trigger connect to a bunch of different
[13:35] tools and then we can have Claude take
[13:37] action in step-by-step fashion like the
[13:39] way it did here. That's pretty cool. And
[13:41] just going back to that whole prompting
[13:42] thing, and the reason I see there's some
[13:44] issues still is because when you're
[13:45] doing a multi-step prompt like, "Hey,
[13:47] could you send an email to Michael Scott
[13:48] and do this and also this, it's going to
[13:50] break it down step by step, which is
[13:52] fine, but also like with something like
[13:54] the LinkedIn post." We asked it to make
[13:56] one about Nvidia. We have this workflow
[13:58] set up to do the research based on a
[13:59] keyword and then create the content
[14:01] using this, you know, agent that we have
[14:03] hooked up to open router. But this is
[14:05] the run about Nvidia. And once again, we
[14:07] can see that Claude desktop sent over a
[14:10] LinkedIn post that it generated already
[14:12] and then basically this was processed
[14:13] through the rest of the workflow. So
[14:15] that's still like you don't have full
[14:17] control over the prompting. Or you could
[14:19] always in here say, "Hey, help me create
[14:21] a LinkedIn post, but all I need you to
[14:22] send over to the tool is this." And it
[14:24] would be like, you know, two keywords or
[14:26] something. So, just another thing I
[14:28] wanted you guys to keep in mind as far
[14:29] as actually thinking about what's going
[14:31] on behind the scenes and how data is
[14:33] being sent from one platform to another.
[14:36] But anyways, that is going to be it for
[14:37] today's video. Appreciate you guys
[14:39] bearing with me as I'm sort of traveling
[14:41] and unable to be at my home setup. But
[14:43] as always, appreciate you guys making it
[14:44] to the end of the video. If you enjoyed
[14:46] it, you learned something new, please
[14:47] give it a like. Definitely helps me out
[14:48] a ton. And if you enjoyed the video and
[14:50] this sort of teaching style and you'd
[14:52] like to have a deeper discussion on MCP
[14:54] servers or just have a more hands-on
[14:56] experience learning N and A automations,
[14:58] then definitely check out my paid
[14:59] community. The link for that will be
[15:00] down in the description. We've got a
[15:02] great community growing really fast,
[15:03] tons of members who are also dedicated
[15:05] towards learning end and a automations.
[15:08] We obviously have a classroom section
[15:10] with resources that are always updating
[15:11] and of course we have five live calls
[15:13] per week um to make sure you're never
[15:15] getting stuck and also meeting other
[15:16] people in the space. You always need a
[15:19] community of supportive people who are
[15:20] also trying to learn the same things you
[15:22] are. So, hope to see you guys in any of
[15:24] these live calls. Otherwise, I'll see
[15:26] you in the next video. Thanks so much
[15:28] everyone.