Video Title: Untitled_Video
Video ID: vVdS-ZEFf50
URL: https://www.youtube.com/watch?v=vVdS-ZEFf50
View Count: 0

[00:00] LLM observability is such a big deal
[00:02] when we're talking about AI agents
[00:04] because unlike traditional software,
[00:06] these systems can be a little bit
[00:07] unpredictable. They can hallucinate and
[00:09] they can become expensive, especially at
[00:10] scale. So, it's important to monitor
[00:12] their usage. So, today I'm going to be
[00:14] showing you guys how to implement this
[00:15] system that I built that gives us full
[00:16] visibility into what actions our agents
[00:18] took, how many tokens that ate up, and
[00:20] what was the actual cost associated with
[00:22] that run. As always, we're going to run
[00:24] through a quick demo. Then I'll break
[00:25] down the build and then I'll talk about
[00:27] how you can actually get this template
[00:28] and set it up in your own agents. All
[00:31] right, here's the agent we're going to
[00:32] be looking at today, but the main focus
[00:34] is going to be these two pieces where
[00:35] we're logging the actions and the cost,
[00:37] whether it is a successful run or an
[00:39] error. All right, so let's run through a
[00:41] few examples and see what the outputs
[00:42] look like. Can you please get Michael
[00:44] Scott's contact information and then
[00:45] send him an email asking what's up? So,
[00:48] we're just going to fire that message
[00:49] off. We're going to see it's using open
[00:50] router so chatbt 4.1 mini in order to
[00:54] you know think it just got the contact
[00:56] information it's sending the email and
[00:57] now it's going to clean all that data up
[00:59] log it and then we'll get a response in
[01:01] telegram as you can see I have found
[01:02] Michael Scott's information and send him
[01:04] an email so the focus obviously isn't
[01:06] the tool calling in the use case what we
[01:07] want to look at is the agent logs where
[01:09] we can see we just got a new run our
[01:11] time stamp is right now we have the
[01:13] workflow we have the input and the
[01:15] output for this run we had no error
[01:17] message but here's where it gets cool
[01:18] because Now we can see the actions that
[01:20] were taken and the tokens and the cost.
[01:22] So for the actions we can see that it
[01:24] called two tools which the first one was
[01:25] get contacts and the second one was send
[01:27] an email and we can also see who it sent
[01:29] the email to what the subject was and
[01:31] what the message was. Then if we look at
[01:33] the tokens we can see the total tokens
[01:35] for each of these two items here as well
[01:37] as what model was chosen which in this
[01:39] case it was always GBT 4.1 mini. And
[01:41] then over here we get the total cost
[01:43] which was all the tokens and the cost
[01:45] associated summed up. All right. So now
[01:47] let's just make this workflow error so
[01:49] we can see what happens if we do an
[01:50] error log. So I'm going to disconnect
[01:51] the chat model. We're going to come back
[01:53] in here and I'm just going to say hello.
[01:55] And obviously this is going to go down
[01:57] the error path because it has no brain.
[01:59] It doesn't know what to say. So we get
[02:00] the error a chat model sub node must be
[02:03] connected and enabled. And if we go to
[02:04] the log we can see that we got our
[02:06] current run with a time stamp. Um it
[02:09] says the error message and then we
[02:10] actually have no actions or tokens
[02:12] because there was no chat model
[02:13] connected and the cost was zero. And
[02:16] keep in mind the different fields in
[02:17] your agent logger can be customized if
[02:19] you want to see different things. But
[02:20] this is the template that you'll be able
[02:21] to download as well as this workflow
[02:23] you'll be able to download and plug in
[02:25] and just kind of hook this stuff up to
[02:26] your agents. Okay, so we're just going
[02:28] to send off one more which is going to
[02:29] have it use all three tools and then
[02:31] we're just going to kind of walk through
[02:32] step by step and break down how this
[02:35] system actually works. Okay, so the key
[02:37] to this system is within your AI agent
[02:39] you have to add an option called return
[02:41] immediate steps and turn it on. And what
[02:43] this does is it outputs the intermediate
[02:45] steps that the agent took. So we're
[02:47] basically just able to see the agent
[02:49] logs and we're able to reference that
[02:50] sort of as variables to pass through
[02:52] somewhere else in the workflow. So
[02:54] typically the output of an AI agent will
[02:56] just be an output right here. But you
[02:58] can see it also outputs another field
[02:59] called intermediate steps. And this is
[03:01] where we can see the different actions
[03:02] that it took, the different tools it
[03:04] called, the different parameters it sent
[03:06] over, the responses it got back. We can
[03:08] see the different tokens associated with
[03:09] it. So, like in this example, we can see
[03:11] it called the tool create event and it
[03:13] created the event for 2 p.m. to 3 p.m.
[03:16] for lunch. And then the other key is
[03:18] that we're in our AI agent and we go to
[03:21] settings and instead of doing on error
[03:23] stop workflow, which is the default
[03:25] option, meaning if anything were to
[03:27] happen and this node errors, it's going
[03:28] to stop the whole workflow. We changed
[03:31] that to continue using an error output.
[03:33] So, you could also make it just
[03:34] continue, but we wanted it to go down a
[03:36] different branch if it failed. As you
[03:38] can see, there's a success branch and an
[03:39] error branch. And that's exactly what
[03:41] you see right here, which we are able to
[03:43] split successful runs this way and
[03:44] errored runs down this way. Okay, so the
[03:47] reason I have these code blocks is just
[03:49] to clean some stuff up. So what I did
[03:50] was I clicked on the JSON that was
[03:52] incoming into this code block and I just
[03:55] copy and pasted this into claude and I
[03:57] said, "Hey, help me write an NAN code
[03:59] node where I want to, you know, it's
[04:01] going to get this and this is what I
[04:02] want back." And I told it that I wanted
[04:04] to get two fields. One called steps with
[04:06] all of the tool calls that it took. And
[04:07] as you can see in this case, there was
[04:09] create event, get contacts, and send
[04:11] email. And actually, I wanted it to
[04:13] output three fields, not just two,
[04:15] because I wanted the tokens. But then I
[04:16] also wanted it to sum up the total cost
[04:19] and put that in a new field called total
[04:21] cost because programmatic code like in
[04:24] this block is going to be a lot better
[04:25] at doing math than an LLM. So, we're
[04:28] just having it basically add up the two
[04:29] costs and put it in a new field called
[04:31] total cost. And now once we have this
[04:33] data cleaned up, all we have to do is
[04:35] grab a Google Sheets that's going to
[04:37] feed in this data into the log. And what
[04:40] we're doing is just referencing
[04:41] different things. So let's break down
[04:42] how we're actually updating this log.
[04:44] Okay. So the first thing is we're
[04:45] sending over a time stamp. And what I
[04:47] did is dollar sign now. And I just
[04:48] formatted it in a pretty way that we can
[04:51] see like kind of in natural language
[04:53] what time this run happened. And the
[04:55] second thing I did was I pulled in the
[04:56] workflow name just in case you want to
[04:58] hook up a ton of different agents to
[05:00] this one Google Sheet log. You can then
[05:02] see, you know, which workflow they came
[05:04] from. And so to get to this workflow
[05:06] name variable, if you go to schema and
[05:08] if you scroll all the way down, you can
[05:10] see that we have variables and context.
[05:12] And in here, we can see, you know,
[05:13] dollar sign now today. We can see the
[05:15] execution or we can also see the
[05:17] workflow ID and name. So all I did was I
[05:19] dragged the workflow name right into the
[05:21] workflow parameter to send over to our
[05:23] Google sheet. Then I just wanted to send
[05:25] over the input and the output. So the
[05:26] input I got from our Telegram trigger
[05:28] where I just dragged in the text that we
[05:30] sent to this workflow. And for the
[05:31] output, I just dragged in the actual
[05:33] output from the AI agent, which is this
[05:35] one. Not the intermediate steps, just
[05:37] its actual output. Okay. But then for
[05:39] the actions, I dragged over the
[05:41] JSON.steps that we had output from the
[05:44] code node. So I basically dragged in
[05:46] this array right here of steps. And then
[05:47] what I did is I used a JavaScript
[05:49] function to actually stringify it and
[05:51] clean it up. So what that does is it
[05:54] basically reformats this so we can
[05:55] actually read it as an array. And it
[05:57] spaces it out. Because if I didn't have
[05:59] this function and I basically just
[06:01] dragged in um JSON.steps, it would look
[06:04] like this, which would just be super
[06:05] hard to read and it's not very
[06:07] intuitive. So, because we did it like
[06:09] this, we can see, okay, here was tool
[06:10] one. This is what it did. Here's tool
[06:12] two, and then here's tool three. And
[06:15] then I did that exact same thing for the
[06:16] tokens. So, I went down here to the code
[06:18] node. I dragged in the tokens array. And
[06:20] then I did the same JSON.stringify and
[06:23] spacing it out so we can see the prompt
[06:24] tokens and the cost associated with it.
[06:27] and also the model. And then the final
[06:30] field we're sending over is the total
[06:31] cost, which all I had to do was drag in
[06:33] the total cost that the code node
[06:35] outputed to us. And then that's
[06:37] basically going to get sent over every
[06:38] time. And in our log, this is the one
[06:40] that we were just looking at here, we
[06:41] can see very clearly that we had these
[06:43] three tools get called. And we can see
[06:44] that it costed us not even 1 cent. But
[06:48] now that you have everything being
[06:49] logged automatically in something like a
[06:51] Google sheet, you can do some analytics
[06:52] here. And you can do some pivot charts
[06:54] where you can say, "Okay, let's look at
[06:56] all of the runs from my this workflow,
[06:58] workflow A from this month." And you can
[07:00] see the total cost. And then let's look
[07:02] at workflow B and all that kind of
[07:03] stuff. And then down here, we're pretty
[07:05] much doing the exact same thing. We're
[07:06] just sending over some different things.
[07:08] So in the executions, this is the one
[07:10] that aired. Let's just copy this one to
[07:11] the editor. We can see that it goes down
[07:12] the error branch because there wasn't a
[07:14] chat model connected. And then all we're
[07:16] doing once again is we're cleaning up
[07:17] the steps, the tokens, and the total
[07:19] cost, which in this case there was
[07:20] basically nothing, but it's good to have
[07:22] that just in case. Um, and then we're
[07:23] logging pretty much the same thing with
[07:25] timestamp, workflow, input. For the
[07:27] output, we're just saying error. And
[07:29] then we have our error message coming
[07:30] through, which we grabbed from the AI
[07:32] agent because it'll output an error
[07:33] message. And then actions, tokens, and
[07:36] total cost. Real quick, just wanted to
[07:38] say if this kind of stuff is interesting
[07:39] to you, you should definitely check out
[07:40] my course. The link for that is in the
[07:42] description. Not only is it a course on
[07:44] sort of the foundations and how you can
[07:46] identify processes and start to automate
[07:48] them, but it is also a community of
[07:50] people that are using end to end to
[07:52] build AI automations every day. So the
[07:54] link for this is in the description. We
[07:55] also run five live calls per week to
[07:57] make sure you're never getting stuck. So
[07:58] I'd love to see you guys in those calls.
[07:59] But anyway, let's get back to the video.
[08:01] So one more thing I wanted to touch on
[08:02] real quick is that sometimes your agents
[08:05] will error, but it will still go down
[08:06] the success branch. And let me explain
[08:08] what I mean by that. So, I'm going to
[08:10] change my email credential to one that's
[08:11] not currently working. We'll hit save.
[08:13] And we'll ask this agent to send an
[08:15] email. So, test workflow. We'll bring
[08:17] this up and say, "Please send an email
[08:19] to Michael Scott asking him how his day
[08:21] is going." So, we'll shoot that off.
[08:23] We're going to see that the agent's
[08:24] going to grab contact information. All
[08:26] good. It's going to hit this tool and it
[08:28] will probably error. There we go. But,
[08:30] it's going down the success item because
[08:32] the agent itself didn't error. The agent
[08:34] basically just realized there was an
[08:35] error in our tool. So, if we go to our
[08:37] logs, we can see that we have this run
[08:39] and it says, "I'm currently unable to
[08:40] send the email due to an authorization
[08:42] issue. Is there anything else you'd like
[08:44] me to do?" But what we can do is we can
[08:46] still see we got our actions and we can
[08:47] still see how much this run costed us.
[08:50] All right. So, if you guys want to set
[08:51] this up on your own agentic workflows,
[08:53] all you have to do is go to my free
[08:54] school community. The link for that's
[08:55] down in the description. There's the the
[08:57] paid community with the course, but also
[08:58] the free school community, and that is
[09:00] where you can get this template for
[09:01] free. You'll just join the community and
[09:03] then you'll search for the title of this
[09:05] video or if you go to YouTube resources
[09:06] and just find the post associated with
[09:08] this video, you'll have basically a JSON
[09:10] file right here to download. I know this
[09:12] one's a zip, but you'll have a JSON file
[09:14] and that is the Nin workflow. And then
[09:16] all you have to do is import it into
[09:18] your Naden instance right here. And then
[09:20] on that same post, you'll see a link to
[09:22] some sort of Google sheet, which will be
[09:23] this Google sheet template. and you'll
[09:25] have the same names and everything
[09:26] already set up so that all you'll have
[09:28] to do is come into here and you'll have
[09:30] to log into your own Google Sheets and
[09:32] link up that template and then you'll be
[09:34] good to go. All right, that is going to
[09:36] do it for this one. I know this one
[09:37] wasn't as flashy, but definitely some
[09:38] stuff that's really, really important to
[09:40] talk about. So, hopefully you guys
[09:41] enjoyed and you learned something new.
[09:42] If you did, please give it a like.
[09:44] Definitely helps me out a ton. And as
[09:46] always, I appreciate you guys making it
[09:47] to the end of the video if you made it
[09:49] this far. Um, anyways, appreciate you
[09:51] guys and I'll see you in the next one.
[09:53] Thanks everyone.