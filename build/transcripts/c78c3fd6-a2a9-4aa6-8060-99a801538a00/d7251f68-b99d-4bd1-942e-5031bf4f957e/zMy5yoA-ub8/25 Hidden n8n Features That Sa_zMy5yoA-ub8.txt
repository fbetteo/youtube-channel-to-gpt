Video Title: 25 Hidden n8n Features That Save Hours of Work
Video ID: zMy5yoA-ub8
URL: https://www.youtube.com/watch?v=zMy5yoA-ub8
View Count: 80,122

[00:00] All right, here are 25 Naden hacks that
[00:02] I wish I knew when I started building
[00:03] with Naden last year. We're going to
[00:04] start simple and get progressively more
[00:06] advanced. And hopefully these are going
[00:08] to help your productivity explode. All
[00:09] right, starting off with number one.
[00:11] Hopefully, we all know the difference
[00:12] between a fixed value and an expression
[00:13] value. And what you can see right here
[00:14] is that we have the word high and it's
[00:16] fixed. And typically, if you wanted to
[00:17] make this an expression, you would have
[00:19] to come over here and hit expression.
[00:20] But what you can do is if something's
[00:21] fixed and before you start typing in
[00:23] there, you can just hit the equal sign
[00:24] on your keyboard and it will switch to
[00:25] an expression. Okay, number two is the
[00:27] ability to pin data. So let's say I'm
[00:29] running this perplexity search where I'm
[00:30] looking for what is naden. Once I got
[00:32] this output, this costed me money. So
[00:34] what I want to do is pin it. That way
[00:35] when I want to run the workflow later, I
[00:37] don't have to resubmit another call to
[00:39] perplexity's API or any API. This is
[00:41] really helpful for any nodes that are
[00:42] going to cost you money every time you
[00:44] run them or if they take a long time to
[00:46] run because now I have this data and
[00:47] let's say I want to map out the rest of
[00:49] the process. Now that it's pinned, I
[00:50] could basically and let me just steal
[00:51] this manual trigger real quick. I could
[00:53] basically continue to run this over and
[00:54] over and it's not going to make a new
[00:56] call to perplexity every time. And then
[00:58] we're able to use all of this data over
[00:59] here to continuously map out the
[01:01] different variables for the rest of the
[01:02] workflow. Number three is mock data. So
[01:04] we have the ability to basically set
[01:05] data within any sort of node or a
[01:07] trigger like this where I could click on
[01:08] this little pencil mark in the top and I
[01:10] could basically fill this in with data
[01:12] to test through the rest of the
[01:13] workflow. So this is very similar to
[01:14] pinning data where I could now say we're
[01:16] going to have a field called query. The
[01:17] value in there is going to be test and
[01:18] you can see it's pinned and now we can
[01:20] use this to map the rest of our process.
[01:22] This is especially useful when you're
[01:23] doing a when executed by another
[01:25] workflow trigger because then you don't
[01:26] have to use the main workflow to trigger
[01:28] this subworkflow every time you want to
[01:29] test it out. And another quick hack when
[01:31] it comes to pinning data is you can just
[01:32] click on the node and hit P to pin it or
[01:34] unpin it as you can see. All right,
[01:36] number four is the ability to move
[01:37] between nodes. So let's say you're in
[01:39] the configuration panel of a certain
[01:40] node and you don't want to have to, you
[01:42] know, click out of here and click into
[01:43] another one every time. If you move your
[01:45] mouse to the right end or the left end,
[01:46] you can basically just switch between
[01:48] your node configurations without ever
[01:49] having to leave one. So, this will
[01:50] hopefully save you some time. And also,
[01:52] if you're just looking at your workflow
[01:53] from this view, you can see that I have
[01:54] node number one selected right now. I
[01:56] can use the arrow keys to move between
[01:57] them and then I can hit enter to open
[01:59] one of them up. Okay, number five is
[02:01] being able to deactivate nodes. So, what
[02:02] you can do is you can click on these
[02:03] three dots and click on activate. Or if
[02:05] you highlight over the node, you can
[02:07] just hit D. And that's like basically
[02:08] just the keyboard shortcut to deactivate
[02:10] stuff. And if you've ever been in a
[02:11] workflow and you're trying to test it
[02:12] out and you get a little error that
[02:13] says, you know, resolve outstanding
[02:15] issues before you can trigger the
[02:16] workflow, then you just click on this
[02:18] one, hit deactivate, and then you should
[02:19] be able to test the rest of the
[02:20] workflow. Number six is organization. So
[02:22] there's two aspects here. The first one
[02:24] is using sticky notes, which we can get
[02:25] to by coming up here and adding a sticky
[02:27] note like that. Or anywhere in your
[02:28] workflow, you can just hit shift plus s,
[02:30] and it will pop up a sticky note. And
[02:32] once you're in that sticky note, it says
[02:33] double click to edit me. And as you can
[02:34] see in here, we're using markdown. So
[02:35] you can change, you know, bold or header
[02:38] one, header two, header three based on
[02:39] markdown. So whenever I'm trying to
[02:40] create a sticky note like those setup
[02:42] guides, I have chat GBT create those for
[02:44] me. You can even see right here it says
[02:46] you can style with markdown. You can
[02:47] also change the color of your sticky
[02:48] notes just to keep your workflow
[02:49] organized. Sometimes I like to do, you
[02:51] know, AI nodes in blue and data
[02:53] transformation nodes in green and notes
[02:55] in yellow, whatever you want to do. And
[02:57] then another aspect of organization is
[02:58] just naming your nodes. So you could of
[03:00] course click into them and then come up
[03:01] here to rename your node. Or if you want
[03:03] to be more quick about it, you just
[03:04] click on the node and hit F2 and then
[03:05] you'll be able to change the name right
[03:06] there. Number seven is about workflow
[03:08] history. Same way on a Google doc or
[03:09] Google sheet, you can see previous
[03:10] versions and you can restore those if
[03:12] you want. So, all you have to do is
[03:13] click on this little, you know, timer
[03:15] looking thing with an arrow and it will
[03:16] pop up different versions of this
[03:18] workflow and then you're able to go in
[03:20] here and restore a workflow if you want.
[03:22] You can download it. You can clone it to
[03:24] a new one, whatever you want to do. As
[03:25] you can see here with the previous
[03:26] version, I have the option to restore
[03:28] it. All right, number eight is just
[03:29] another quick keyboard shortcut. So, if
[03:30] you're anywhere in your workflow and you
[03:31] want to add another node, you can just
[03:33] hit tab and it will pull that up so you
[03:34] can start typing right away. Number nine
[03:36] is with Nin attributions. So let me just
[03:38] quickly reactivate all these nodes and
[03:39] tell you what I mean by that. When
[03:40] you're sending an email or a telegram
[03:42] message or a slack or any of these
[03:43] different integrations, a lot of times
[03:45] at the bottom it will say this message
[03:46] was sent by nitn. So what you want to do
[03:48] is in this node if you add an option you
[03:50] can click on append attribution and you
[03:53] can just flick that off and now you
[03:54] won't get that message. It's the exact
[03:55] same thing in telegram where you add the
[03:57] append and end attribution and you turn
[03:59] that off. But in Slack it's a little
[04:00] different where you come into here and
[04:02] it says include link to workflow and
[04:03] that's the one you turn off in Slack.
[04:05] So, every integration is a little bit
[04:06] different with their terminology, but
[04:08] you can pretty much always turn off that
[04:09] attribution. And by the way, did you
[04:10] guys see how quick I activated all those
[04:12] nodes earlier? Anyways, number 10 is
[04:13] current date and time. So, let's say you
[04:15] have an AI agent or any sort of node
[04:16] where you want to give it the current
[04:17] date and time. Or maybe you just want to
[04:19] send over a time stamp to your Google
[04:20] Sheets. All you have to do is make sure
[04:22] you're in an expression and then you're
[04:23] going to do two curly braces and then
[04:24] you'll see right here is a dollar sign
[04:26] now function. And now your agent or your
[04:28] node has access to the current date and
[04:30] time. You can also go ahead and format
[04:32] that by typing dot format. And then you
[04:34] can play around with how you want to see
[04:35] the date and time. Number 11 is really
[04:37] cool. It's the ability to save your
[04:38] credentials when you're making API
[04:40] calls. So, Perplexity is something I use
[04:41] a lot. Tavly is something I use a lot.
[04:43] Open eyes image generation is something
[04:44] I use a lot. So, why would I want to go
[04:46] copy that API key every time I was
[04:48] setting up this HTTP request? I don't
[04:50] want to. So, what you're going to do is
[04:51] when you come in here, you can do your
[04:53] authentication. You choose generic. If
[04:55] you know it's a header off, you choose
[04:56] header. If it's query off, you'll choose
[04:58] query. Whatever type of authentication
[05:00] it is. And then you can see it pulls up
[05:01] all the header all that you have saved
[05:02] in here. And it's basically the same way
[05:04] you would set up a header off right
[05:05] here. And you type in like authorization
[05:07] and then bear space your API key. You
[05:09] would pretty much just do that in here.
[05:10] As you can see, that's exactly what I
[05:12] did. And now it does two things. This is
[05:14] saved every time I want to use
[05:15] perplexity later. And if I'm making a
[05:17] recording like this, it's not going to
[05:18] expose my API key. Especially if you're
[05:20] like downloading your template and
[05:21] sending it to someone else, you won't
[05:23] have your API key actually there because
[05:24] this will just reset. And as you can
[05:26] see, I did the exact same thing with
[05:27] OpenAI right here and with Tavi. And by
[05:30] the way, because I'm not exposing my
[05:31] credentials here, this entire workflow,
[05:33] if you want to access it, will be
[05:34] available for download in my free school
[05:36] community. The link for that is down in
[05:37] the description if you want to play
[05:38] around with some of these hacks. And if
[05:40] you're wondering how I did this, I hit
[05:41] one to zoom out and I hit zero to zoom
[05:42] back in. That was a little bonus hack
[05:44] for you guys. Anyways, number 12 is
[05:46] error workflows. You can use this native
[05:47] integration error trigger and you can
[05:49] link it up to any of your active
[05:50] workflows and this trigger will
[05:52] basically go off whenever that active
[05:54] workflow errors. This way you can send
[05:56] yourself email notifications, text
[05:57] notifications, whatever you want if one
[05:59] of your main workflow errors. And I
[06:01] actually did a full video on this one
[06:02] which you can check out right here.
[06:03] Okay, number 13 is workflow variables.
[06:05] And what do I mean by that? Let me show
[06:06] you. You can access stuff like execution
[06:08] ID, workflow name, workflow ID, workflow
[06:11] active, yes or no. You can access this
[06:12] kind of stuff with the workflow
[06:14] variables. So, if I just grab this
[06:15] trigger, hook it up, and hit test
[06:16] workflow. When we come back in here, we
[06:18] can see there's a little section right
[06:19] here that says variables and context.
[06:21] And it has stuff like dollar sign now,
[06:23] dollar sign today, execution variables,
[06:25] and workflow variables. All right,
[06:26] number 14 is you can specify inputs when
[06:29] you're sending data from one workflow to
[06:30] a subworkflow. So, what you'll do is
[06:32] you'll click into that actual trigger.
[06:33] You can see that what you typically
[06:35] would do is maybe just click on accept
[06:36] all data, and this would put all of the
[06:38] incoming data into a field called query.
[06:40] But what you can do is you can come in
[06:41] here and say, I want to define using
[06:43] fields below. And then I can say, you
[06:44] know, I want this workflow to receive,
[06:46] you know, phone number, I want it to
[06:48] receive email, and I want it to receive
[06:51] uh customer name. And that's it. So,
[06:53] it's going to be already put into those
[06:54] three fields for you to map later, which
[06:56] makes it a lot easier. And of course, if
[06:58] you wanted to use some mock data, you
[06:59] could hit this pencil and set those
[07:01] three fields so that you can map the
[07:02] rest of the workflow. All right, number
[07:03] 15, 16, and 17 all sort of go handinand.
[07:06] So, let's take a quick look. What we
[07:07] have in here is this AI agent is going
[07:09] to send an email to
[07:10] nate@acample.com asking if he enjoys
[07:12] playing with sand. So I'm going to real
[07:14] quick grab this manual trigger so we can
[07:16] actually fire this off. Hook it up there
[07:18] and hit test workflow. Okay. So what
[07:19] this is going to do is it's going to use
[07:21] this email agent which is a sub workflow
[07:23] and it's going to say okay we sent that
[07:25] message for you. So number 15 is looking
[07:27] at subexecution data. So what we would
[07:28] do is we'd click on this tool that
[07:29] called and then right here we click on
[07:31] view subexecution. So, this pulls up
[07:33] that actual execution of the workflow
[07:35] that we just called. And this is how we
[07:37] can see if it actually did what we
[07:38] wanted or not. And what you may notice
[07:39] is that it didn't actually call that
[07:40] send email tool. And we only would have
[07:42] known that because we looked at the
[07:43] subexecution data. Because if we come
[07:45] back into the agent itself, it tells us
[07:47] I've sent an email to Nate asking if he
[07:49] enjoys playing with the sand. So, we
[07:50] would now think that it's been done when
[07:52] in reality it has not been done. So,
[07:54] looking at hack number 16 is agent logs.
[07:56] We would come into the agent logs. We'd
[07:57] basically see what it did. First of all,
[07:59] it used its brain to read through the
[08:00] system prompt and then take action.
[08:02] There's no system prompt for this agent
[08:03] as you can see. So there wasn't much to
[08:04] read. Then we can see it called the
[08:06] email agent and then we can see exactly
[08:08] what it sent over to that tool and what
[08:10] it got back. And so because it sent over
[08:12] a full email and not really any
[08:13] directions, that's why that sub workflow
[08:15] was kind of confused. And then it sent
[08:17] us back this response which was the
[08:18] email. And then the main brain gets back
[08:20] that response from the tool and that's
[08:22] why it thinks, okay, we sent that off.
[08:23] So I'm going to let the human know that
[08:24] we did. And then finally, when it comes
[08:26] to viewing the subexecution data, you
[08:28] can copy stuff to the editor. So, if I
[08:30] go back into that subworkflow execution
[08:31] right here, what I can do is click copy
[08:34] editor, and this is going to pull in the
[08:35] live data that we just saw in that
[08:37] execution, and now we're able to play
[08:39] with it. So, you can see this is the
[08:40] query that was sent over from our main
[08:41] agent, and we'd be able to remap stuff
[08:43] in here and test it out to make sure
[08:45] we're good. All right, number 18, we
[08:46] have human in the loop node. So, if I
[08:47] can just reactivate these real quick,
[08:48] and if I hit tab, you can see right here
[08:50] we have human in the loop nodes, which
[08:52] basically says wait for approval or
[08:54] human input before continuing. And you
[08:55] can do this with Discord, email, Google
[08:57] chat, all these things, all these
[08:59] integrations. And basically what that
[09:00] means is we have this operation where we
[09:02] send off something in something like
[09:03] Discord and we wait for the human to
[09:05] respond. So let's take a look at what
[09:06] that looks like in Slack real quick. In
[09:08] this case, we can send just an approval,
[09:10] which would just be a button that says
[09:11] yes. We could change the type of
[09:13] approval to have an approval and a
[09:14] disapprove button rather than just an
[09:16] approve button. We could also do a
[09:18] custom form or free text, and that way
[09:19] we're able to actually get feedback from
[09:21] a human that's textbased rather than
[09:23] just a yes or no button. I made a full
[09:24] video breaking down this operation in
[09:26] Naden. So if you want to watch that,
[09:27] check it out right here. All right,
[09:29] number 19 is we have the ability to
[09:30] standardize inputs. So let me just
[09:32] activate these two nodes real quick and
[09:33] let me explain what's going on. So we
[09:35] have an AI agent that's listening for a
[09:37] field right here called
[09:39] JSON.ext. And if we were to hit test
[09:41] workflow and now our Telegram trigger is
[09:42] listening for us and I pop this up and I
[09:44] say hi, we can see that the agent's
[09:46] going to get that message and it's able
[09:48] to process it because it comes through
[09:50] Telegram in a field called JSON.ext. But
[09:53] if we were to open up the native end
[09:54] chat and say hi, this is going to error
[09:56] out because there's no prompt specified
[09:58] because what comes through in the native
[10:00] chat is a field called chat input. So
[10:02] the idea here is to standardize the
[10:04] input so you can have multiple forms of
[10:06] communication with an agent. So all I
[10:07] have to do is hook up this set node that
[10:09] I built, hook that into our NN AI agent,
[10:12] and what that's going to do is take this
[10:13] message and put it in a field that
[10:15] matches this field and we'll be good to
[10:17] go. So if I say hi now we can see the
[10:19] agent's going to be able to process it
[10:21] because it comes through in a field
[10:22] called JSON
[10:23] message.ext. Okay. Number 20 is the
[10:26] option to continue on error. So what we
[10:27] have right here is three URLs within
[10:30] this um code node. McDonald's Chipotle
[10:32] and a fake URL. So if we hit test
[10:34] workflow, we can see that it's going to
[10:36] loop through each of those and it's
[10:38] going to finish out and basically say
[10:39] okay here is the, you know, HTML content
[10:42] from that first one. Here's the third
[10:44] one and then here's that last one. But
[10:46] what you didn't see is that that third
[10:47] run of the false URL didn't actually
[10:50] work. We got a 404 error. But the first
[10:52] two are coming back with actual HTML.
[10:54] And so the reason this didn't stop the
[10:55] whole workflow is because in this node
[10:57] in the settings, we're telling it to
[10:58] continue on error rather than stopping
[11:00] the entire workflow. So if I change it
[11:02] back to stop workflow, what it's going
[11:03] to do is it's just going to break and
[11:04] then the automation is never going to
[11:06] finish. As you can see, even though the
[11:08] third one didn't work, but the first two
[11:10] still did. So, imagine you had a lead
[11:11] list of a thousand people that you were
[11:12] trying to process and the a thousandth
[11:14] one failed. You would lose pretty much
[11:16] all that data. Well, you really wouldn't
[11:18] because, as we know, you can copy it to
[11:19] the editor and still access it, but it
[11:22] would be annoying. And then just to stem
[11:23] right off of that, you can also have it
[11:25] continue on error with an error output.
[11:28] So, that's just another option in the
[11:29] settings, as you can see, using error
[11:31] output. So, that would basically mean
[11:32] anything that errored would go off down
[11:34] this other branch. So, we could
[11:35] basically say, okay, anything that's
[11:37] good, we'll send back this way. But if
[11:39] it errors, we're just going to send
[11:40] ourselves an email and say, "Hey, this
[11:41] URL errored." And it doesn't have to be
[11:43] just like an HTTP request or an AI agent
[11:45] node. Pretty much every node has this
[11:47] functionality within naden. Okay, so
[11:49] moving on to some other settings that
[11:50] you can play around with in these nodes.
[11:52] They're all a little bit different based
[11:53] on the node you're playing with. So
[11:54] definitely just take a look when you're
[11:55] setting up these workflows. But in your
[11:57] settings, you can have SSL certificates
[11:59] if it's with an HTTP request. You can
[12:00] have it always output data because
[12:02] sometimes it might just like not return
[12:04] anything, but you still want the process
[12:05] to continue on. You can have it only
[12:07] execute once. And I've actually had some
[12:08] workflows where I didn't really know
[12:10] this was there. So I would just have
[12:11] three items coming through. I'd limit it
[12:13] to one and then I'd continue on. But all
[12:14] I'd have to do is click on execute once.
[12:16] You can also have stuff retry and fail
[12:18] and you get to specify, you know, like
[12:19] what to do, how many times, how much you
[12:21] wait. But like I said, each node has
[12:23] kind of different settings. So in here
[12:24] we have, you know, we don't have the SSL
[12:26] certificates one obviously. In here we
[12:28] have one called duplicate item. So you
[12:29] can basically, you know, tell it how
[12:31] many times to duplicate stuff. And I
[12:32] think this is primarily used for testing
[12:34] and debugging. And then of course you
[12:35] can leave notes down here which don't
[12:37] actually change anything about the
[12:38] functionality of the node. It's just in
[12:40] case you're you know sending over a
[12:41] template or someone on your team has to
[12:43] look at this workflow, you can leave
[12:44] some important notes right there. Okay.
[12:46] Number 23 is that we can have structured
[12:47] outputs with our agents. So right here
[12:49] I'm telling this guy to output four
[12:51] stories. And we're going to see it
[12:52] outputs four different scenes all in one
[12:54] item, all in one object. So as you can
[12:56] see right here, these are our four
[12:57] different stories. The Missing Key, The
[12:59] Last Leaf, Midnight Bakery, Quantum
[13:01] Leap. What I can do is right here I turn
[13:03] this switch on which says require
[13:06] specific output and it creates this new
[13:07] little tool for us and I drag that into
[13:09] my structured output parser which
[13:11] basically says output stuff like this
[13:13] and you can have chachebt generate the
[13:15] JSON example that you need and now if I
[13:17] run this guy it's going to output it in
[13:19] four different little objects. So there
[13:21] we go just finished up and now we can
[13:22] see we have four scenes and now I can
[13:24] sort of like split those out and process
[13:25] them individually or whatever I want to
[13:27] do with them. Okay so number 24 is a
[13:29] little function we can do with an array.
[13:31] So in here we have a list of foods which
[13:33] is apple banana steak. And then if I
[13:35] come into here, if we're basically
[13:36] outputting that, it comes through in a
[13:37] weird ugly way called apple banana
[13:39] steak. So if I open this up, what I can
[13:41] do with an array is at the end I do dot
[13:43] join. And now you can see it's going to
[13:45] separate them by commas. But what we can
[13:46] do is within this little parenthesis, we
[13:48] can tell it how do we want this array to
[13:50] be separated. So I just have to put two
[13:52] quotes and all of a sudden they're
[13:53] they've been combined. So I could put a
[13:54] space, I could put two spaces, I could
[13:56] say and and then I could put more
[13:58] spaces. And you can see that's how we
[13:59] can split up these items. You can also
[14:01] do a slash and an N to create a new
[14:03] line. And you can also do multiple. So
[14:05] you can have them like really spaced out
[14:06] if you want. As you can see. All right.
[14:07] And then last but not least, we have the
[14:09] ability to replace things. So the most
[14:11] common example I use is replacing double
[14:13] quotes with something else. So right
[14:15] here we can see we have the query
[14:16] pineapples on pizza. And we're trying to
[14:18] search the web for pineapples on pizza.
[14:20] But as you may know, it's not going to
[14:21] work to have, you know, basically double
[14:23] quotes inside double quotes in a JSON
[14:25] body. So, all I'd want to do is I'm
[14:27] going to go in here and I'm going to
[14:28] grab this function real quick. Go back
[14:30] into the HTTP request, open up our
[14:33] expression, and paste that at the end.
[14:35] And that's basically just removing those
[14:37] double quotes as you can see. So, now if
[14:39] I run this, it would actually be able to
[14:40] search the web for pineapples on pizza.
[14:42] And there you go. You can see we got our
[14:43] answer back from Tavi. And there you
[14:45] have it. Those were 25 Nin hacks that
[14:47] are hopefully going to increase your
[14:49] productivity. If you enjoyed this one or
[14:50] you learned something new, leave a like.
[14:51] It definitely helps me out a ton. And as
[14:53] always, I appreciate you guys sticking
[14:54] around to the end of this one for hack
[14:57] number 25. I'll see you guys in the next
[14:58] one.