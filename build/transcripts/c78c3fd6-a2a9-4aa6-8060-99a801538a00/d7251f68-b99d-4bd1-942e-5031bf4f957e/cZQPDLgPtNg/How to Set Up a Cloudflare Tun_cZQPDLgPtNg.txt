Video Title: How to Set Up a Cloudflare Tunnel for Local n8n (2025)
Video ID: cZQPDLgPtNg
URL: https://www.youtube.com/watch?v=cZQPDLgPtNg
View Count: 25,331

[00:00] Today I'm going to show you guys how we
[00:01] can take our locally hosted instance of
[00:03] Naden and set up a Cloudflare tunnel so
[00:05] that we can actually talk to thirdparty
[00:06] apps and services like Google or
[00:08] Telegram. By the end of this video,
[00:10] you'll have a better understanding of
[00:11] how the tunnels work and how to set it
[00:12] all up cuz I'm going to walk you through
[00:13] it step by step. So, let's get started.
[00:15] All right, so like I mentioned, we're
[00:16] going to be setting up a tunnel on
[00:17] Cloudflare. So, you're going to go over
[00:19] to cloudflare.com and this is what it's
[00:20] going to look like. And then you're
[00:21] going to go ahead and create an account.
[00:22] So, I just logged into Cloudflare and
[00:24] the first step is going to be you need
[00:25] to set up a public URL. So, you need to
[00:27] have some sort of domain. You could go
[00:29] ahead and add one if you already have
[00:30] one or you could buy one right here
[00:32] through Cloudflare for like 10 bucks for
[00:34] the year. It's not going to be too bad.
[00:35] So, you'd click on add domain and then
[00:37] you would either have to buy a new one
[00:38] or transfer over a different one. And
[00:40] you may have seen stuff with using Enro
[00:42] to create a free tunnel, but what that's
[00:43] going to do is give you just a free
[00:45] public random URL and it's not going to
[00:47] be super permanent. It's going to be
[00:48] more temporary. So, if you want to
[00:50] really understand more about the
[00:50] difference between Cloudflare and some
[00:52] of these other providers, I would do a
[00:53] quick perplexity search. But today,
[00:55] we're focusing on Cloudflare. Anyways,
[00:56] from here, what we need to do is set up
[00:58] a tunnel using this public domain. So,
[01:00] we're going to come over here and click
[01:01] on zero trust on the lefth hand side.
[01:03] Now, we're going to go over to networks
[01:04] and click on tunnels. And then all we
[01:06] need to do now is add a tunnel. So, I'm
[01:08] going to click on add a tunnel. We're
[01:10] going to be using a cloudflared tunnel.
[01:12] So, I'm going to click on that. And now
[01:13] we just need to give it a name. So, I'm
[01:15] just going to say n test and then save
[01:18] that tunnel. And now what we have to do
[01:20] is install and run the actual connector
[01:22] locally on our device. So, you're going
[01:24] to choose your environment that you're
[01:25] operating in. So, I'm going to choose
[01:26] Windows. If you had a Mac, you'd click
[01:27] on Mac. And there's different setup
[01:29] instructions based on what you're using.
[01:31] We are using Docker, but I'm going to go
[01:32] ahead and just use Windows. So, follow
[01:35] the steps here, and then we'll meet back
[01:36] up after you've done this. So, after you
[01:38] install and run that connector, you'll
[01:39] see that it's connected at the bottom.
[01:40] And if you go back out to your tunnels,
[01:42] you should see the one that you just set
[01:43] up, and it should over here say status
[01:45] is healthy. And now, what we need to do
[01:47] is set up that actual domain that we
[01:49] connected earlier in Cloudflare to this
[01:51] tunnel. So, I'm going to click on these
[01:52] three dots and click on configure. What
[01:54] we want to do is go to the public host
[01:56] name and this is going to be the public
[01:58] address that basically different apps
[02:00] can send data to and then the tunnel
[02:02] will send that data securely to n. So
[02:05] before we set this up real quick let me
[02:06] just go to an excalaw and actually
[02:07] explain how this works. So right now we
[02:10] have our docker container where we did
[02:11] the self-hosted AI starter kit with n
[02:14] postgress quadrant and lama and all of
[02:16] these apps and services are able to talk
[02:17] to each other because they're all in the
[02:19] same containerized environment right
[02:21] here. And so what happens is if we try
[02:22] to access something like Gmail from this
[02:25] container, we're going to get blocked
[02:26] right here by this firewall. And vice
[02:28] versa, if Gmail tries to talk to us, our
[02:30] Nident instance, it's not going to be
[02:32] able to go through. Same thing with
[02:33] something like Telegram. So what we have
[02:35] to do is we have to drag in Cloudflare
[02:37] here to basically create a tunnel and
[02:38] this is going to be some sort of you
[02:40] know actual public address. So right now
[02:42] we access our Neden instance through
[02:44] localhost 5678 which means only our
[02:47] local device right here where we
[02:48] installed everything can use it. But
[02:50] through Cloudflare, what we do is we set
[02:52] up some sort of public domain, which is
[02:53] going to be HTTPS. And then what happens
[02:56] is something like Telegram can send data
[02:57] to Cloudflare. Gmail can send data to
[03:00] Cloudflare. And then our tunnel from
[03:01] Cloudflare is basically just going to be
[03:03] able to eat right through this wall and
[03:05] go talk to our NAND instance. So data
[03:07] will be sent from Gmail to our
[03:09] Cloudflare public domain. And then that
[03:11] will get sent through the tunnel to
[03:12] Naden. So I know that illustration was
[03:15] pretty gross, but hopefully that
[03:16] actually makes sense in your mind now
[03:18] how this stuff works. So, what we're
[03:19] going to do now is add our public host
[03:21] name. So, in the subdomain, I'm just
[03:23] going to put naden. This is what's going
[03:24] to show up at the top. Instead of local
[03:26] host, it'll be naden whatever. So, my
[03:28] domain here is going to be retcp.org.
[03:30] And then what we need to do down here
[03:31] with the service is go to http and then
[03:34] type in basically whatever is the local
[03:36] host and the port that you're using in
[03:38] Docker. So, right here, if I click on
[03:39] this, I can see my nitn is on port 5678,
[03:42] which is the default for n. So, what I
[03:44] would do is type in localhost colon
[03:47] 5678.
[03:48] And now we're good to go and save this
[03:50] public host name. Now that we've saved
[03:52] it, we have successfully saved our DNS
[03:54] record for this public host name, which
[03:57] is going to be reaching this service,
[03:58] which is our locally hosted NAN. And
[04:01] that was super quick. Look, we can
[04:02] already click on this, open up this
[04:04] domain, which is naden.techcorp.org.
[04:07] And so, right now, you guys can't see
[04:08] it, but up in the top, rather than
[04:09] saying localhost, it says
[04:11] nadn.tech.corp.
[04:13] and it's an HTTPS. And now we would just
[04:15] have to sign into our instance. And so I
[04:17] just wanted to adjust the screen real
[04:18] quick so you guys could see. Here was
[04:19] the local instance that we started on,
[04:21] port 5678. And here's the one that we
[04:23] just spent up, which was naden.corp.org.
[04:25] And they're the exact same instance of
[04:27] NAND. But what's cool is you can now
[04:28] take this public URL and pull it up in
[04:30] your phone on a different laptop. And
[04:32] you'd be able to access your locally
[04:33] hosted version of NAND. But we're not
[04:35] done yet because even though we're on
[04:36] our public domain, if I added a web hook
[04:39] right here, we would see that this web
[04:41] hook address is still calling the local
[04:43] host. So, we wouldn't be able to
[04:45] actually access anything through here.
[04:47] Even though we could still access other
[04:49] third party stuff like Perplexity
[04:50] because we're able to talk through that
[04:52] public domain. The issue is our web hook
[04:54] isn't set up right. So, other services
[04:56] can't really send data to our local
[04:59] instance. So, like I said, there you go.
[05:00] Perplexity now works and other services
[05:02] will work, but we have to set up our
[05:04] actual web hook so we can do things like
[05:06] Telegram and Google. All right, so I
[05:07] close out of the NN instances and what
[05:09] we're going to do is we have to go to
[05:10] our docker compose file of this
[05:13] container. So I'm going to open up this
[05:16] stack. I'm going to click on view
[05:17] configurations and this is the docker
[05:19] compose file where we can edit these
[05:21] environment variables. So what we need
[05:22] to do is add a web hook URL variable and
[05:25] a protocol variable. So basically you
[05:28] can see right here this is the path in
[05:29] your PC or your Mac to get to this
[05:31] self-hosted AI starter kit docker
[05:33] compose file. So go to that path and
[05:35] open up the file. So as you can see
[05:37] right here I had to go to see users Nate
[05:39] H self-hosted AI starter kit and right
[05:40] here's the docker compose file. So when
[05:42] I click on that this is going to
[05:43] automatically pull it up in cursor on my
[05:45] computer. It may pull up in Visual
[05:47] Studio Code or maybe you want to
[05:48] download Cursor or something else like
[05:50] that real quick. And now we just have to
[05:51] change a few things in here. So like I
[05:53] said that first one's going to be a web
[05:54] hook URL. So, I'm going to go all caps
[05:56] and type in web hook URL. And you can
[05:59] see because I'm using cursor, it already
[06:00] sort of knows what I'm going to do, but
[06:02] web hook URL. And then I'm going to do
[06:04] an equals. And then we just need to grab
[06:06] our actual public domain. So, I'm going
[06:08] to click back into Cloudflare. We're
[06:09] going to open up this domain one more
[06:11] time. And then I'm just going to grab
[06:13] this from up here. We're going to come
[06:15] back into cursor, paste that in there.
[06:17] And then I just want to get rid of the
[06:19] um /home/workflow.
[06:21] But I am going to leave that slash at
[06:23] the very end after.org. or and then we
[06:25] just need to throw in this one as well
[06:27] which is nen protocol and we just wanted
[06:29] to say that we are now using https.
[06:32] Okay, cool. So I think that should be
[06:33] it. What we're going to do now is just
[06:35] make sure we save this docker compose
[06:36] file. But it hasn't actually reflected
[06:38] these changes yet in nadn because we
[06:41] have to basically shut down the
[06:43] container and spin it back up. Okay, so
[06:45] what we're going to do is within docker
[06:46] itself, I'm just going to click on this
[06:47] button to open up the terminal. And the
[06:49] first thing we need to do is we need to
[06:50] change our directory to get into this
[06:53] container basically. So, I'm going to do
[06:54] cd and then just type in
[06:56] self--hosted-ai-starter-kit.
[07:01] We hit that. And now we see that we are
[07:03] in the self-hosted AI starter kit
[07:04] directory. And now I'm just going to
[07:06] type in docker compose down. Hit enter.
[07:10] And that's just going to stop what's
[07:11] going on right here. Okay. So, we got an
[07:13] issue because one of the resources is
[07:15] still in use. I think that we should be
[07:16] all right though if we just do docker
[07:18] compose up-d. And it's going to spin
[07:20] that container back up. And now it's
[07:22] going to load back up the new end and
[07:24] everything like that with the different
[07:25] environment variables and we should be
[07:27] good to go. Okay, there we go. So,
[07:29] everything launched back up and it looks
[07:30] like we're all running healthy. We got
[07:32] our stuff right here and I'm going to go
[07:34] back into our public URL, load that back
[07:38] up and we'll open up this workflow and
[07:40] see if our new web hook address is
[07:41] changed. And as you can see, now it is
[07:44] nitn.corp.
[07:46] And that's also going to be huge because
[07:47] if we wanted to set up some Google
[07:48] credentials like Google Drive, let's say
[07:50] we're doing this, as you guys know, you
[07:53] have to have an a redirect URL to give
[07:55] to Google. And now, because this is no
[07:57] longer a local one, we see that we
[07:59] actually can set up our Google
[08:01] credentials. And so, anyways, just to
[08:03] hop back to what actually happened here,
[08:04] it just couldn't stop one of these
[08:06] resources because it was still being
[08:08] used. Um, and the thing is, we were able
[08:10] to just spin everything back up and it
[08:12] loaded all four of these back up
[08:13] healthy. And as you guys know, we talked
[08:15] about how we're pulling from our volumes
[08:16] over here. So, we're still good to go
[08:18] and we have all the storage running. But
[08:19] anyways, if you are running into issues
[08:21] in your terminal down here, you know,
[08:22] I'm not an expert at this. I have never
[08:24] like formally learned terminal commands,
[08:26] but all the large language models are
[08:28] pretty good at them. You just have to
[08:29] give enough context as to here are my
[08:31] directories. Here's what I'm trying to
[08:32] do. Help me with the different commands,
[08:34] and they're going to be pretty good at
[08:35] helping you out there. So, that's like
[08:36] honestly what I did here when I was
[08:38] trying to learn how to do this. Anyways,
[08:40] that's going to do it for this one. I
[08:41] hope that it was helpful and now
[08:42] hopefully you understand it's not as
[08:44] complicated as you may have thought
[08:45] initially, although I know it can be
[08:46] intimidating. So, if you learned
[08:47] something new or you appreciated this
[08:49] video, please give it a like. It
[08:50] definitely helps me out a ton and I'll
[08:51] see you guys in the next one. Thanks
[08:52] everyone.