Video Title: Learn to Code in 3 Hours, Not 3 Years (Free Course)
Video ID: QD50Pkf0Ov0
URL: https://www.youtube.com/watch?v=QD50Pkf0Ov0
View Count: 147,154

[00:00] AI won't replace programmers but rather
[00:02] make it easier for programmers to
[00:03] replace everyone else when I learned to
[00:05] code in 2016 I didn't even know where to
[00:08] start I ended up buying courses on Udi
[00:10] but I almost gave up because it was so
[00:12] long and boring so in 2018 I ditched all
[00:15] the theory and instead build tiny
[00:17] internet businesses now in 2025 I have
[00:20] built 28 website and I know earned $1.2
[00:23] million per year as a solo developer if
[00:26] I had to learn how to code again I would
[00:27] do it completely differently so in this
[00:29] video I'm going to show you the exact
[00:31] road map to go from complete beginner to
[00:33] knowing how to code fast using AI okay
[00:36] so this is the entire road map we're
[00:38] going to go through it's divided into
[00:40] three parts the first one is important
[00:42] you stick with me even though people
[00:43] make mistake and skip it it's the
[00:45] fundamentals of the internet if you want
[00:47] to understand how to use AI to code fast
[00:49] you need to understand how things work
[00:50] so you know what to tell the AI you know
[00:52] what to search when you're stuck in the
[00:54] second Park we're going to build a
[00:56] software business from scratch I'm going
[00:57] to show you the tools I use to build my
[00:59] own software business
[01:00] I'm going to show you how to set up your
[01:01] computer we're going to talk about front
[01:03] end backend API databases we're going to
[01:05] send emails we're going to process
[01:06] payments and all the things you need to
[01:08] set up a business on the internet and
[01:10] finally we're going to talk about how to
[01:12] use the AI modern AI Tools in order to
[01:14] 10x your development process and code
[01:16] even faster in the first part we're
[01:18] going to cover the fundamentals of the
[01:20] internet we're going to understand what
[01:22] it means for you as a developer to build
[01:24] an app that could be seen by millions of
[01:25] people across the world it is very
[01:27] important that you stick with me for
[01:29] this part because later you'll see that
[01:31] 80% of your work will be done by an AI
[01:33] and you just have to tell the AI what
[01:34] you want but for that you need to
[01:36] understand how things work you need to
[01:38] understand the foundation of the
[01:39] internet so first we're going to
[01:41] understand how the internet work as a
[01:43] consumer you right now watching this
[01:45] video we are browsing hundreds of
[01:46] websites per day so you want to
[01:48] understand what actually happens when
[01:49] you go to a website for that you can
[01:51] just open chpt and ask chpt or whatever
[01:54] AI you're using to explain what happens
[01:56] when you visit a website you want to
[01:58] mention that they should not explain
[02:00] using technical skills you want to use
[02:02] like metaphors and things that are very
[02:04] simple for you to understand first and
[02:06] here chpt is doing actually a pretty
[02:08] good job at explaining it Compares um
[02:10] searching for a website on the internet
[02:11] to sending a letter uh to the post
[02:13] office try to have like a little image
[02:16] in your mind of what is going on when
[02:17] you visit a website when this is done
[02:19] learn the fundamental concept of the
[02:21] internet so go back to chpt and ask chpt
[02:24] uh to explain the same thing the same
[02:26] Journey but instead this time not using
[02:28] a metaphor but using the actual terms
[02:31] that developers use htps uh URLs DNS Etc
[02:35] there are seven terms that I think are
[02:37] important for you to know you don't need
[02:39] to know everything about it but just try
[02:40] to have a a clear understanding of what
[02:43] each of those is doing as a quick
[02:44] example this is me going to YouTube in
[02:47] New Zealand and this is what the journey
[02:48] looks like I'm on my internet browser
[02:50] and I search for youtube.com so I'm
[02:52] considered as the clients when I press
[02:54] enter my request is sent to my Wi-Fi and
[02:56] then it goes basically on the internet
[02:59] the internet is is basically like a
[03:00] collection of uh devices that are
[03:02] somewhere across the planet you have DNS
[03:05] you have servers you have a bunch of
[03:06] things and the role of the internet is
[03:08] to find the right recipient for my
[03:10] request so in my case since I'm
[03:12] searching for youtube.com it search for
[03:14] the YouTube server the server is
[03:16] basically like a big online computer
[03:18] that is somewhere on the planet likely
[03:20] in the United States in the case of
[03:22] YouTube and this server is going to
[03:23] receive my request and then he's going
[03:25] to send me back an HTML uh page using
[03:28] the same route that it took to come to
[03:30] the server so it's going to go back to
[03:32] the DNS and the servers that are on the
[03:34] internet and then it going to come back
[03:35] to my computer and then my internet
[03:37] browser Safari Google Chrome whatever is
[03:39] going to take this HTML page and display
[03:41] it so that I can actually see the
[03:43] YouTube homepage as a consumer and now
[03:46] to jump to the next part you can do
[03:47] something interesting you can open the
[03:49] developer console search for your
[03:51] developer console so here developer
[03:52] tools it's called on Google Chrome um
[03:55] and you can see on the right side I have
[03:57] a bunch of stuff that might look like
[03:58] foreign language for you right now now
[04:00] but it's going to become much more clear
[04:01] soon um and we see that I have this like
[04:04] um a body and head and HTML now if I go
[04:07] to Reddit homepage and I open the
[04:09] developer console again you see that I
[04:11] have this HTML head and body thing again
[04:14] H that is quite interesting actually
[04:16] here what is going on is that everything
[04:18] on the internet that Transit whenever
[04:19] you're browsing as a consumer you get
[04:21] HTML pages and what you see here in the
[04:24] console HTML head and body is basically
[04:26] the structure of an HTML page a web page
[04:29] and so after this part you will
[04:30] understand that your job as a developer
[04:32] is to build web pages and put them
[04:34] somewhere on the internet so that
[04:36] millions of people can access it across
[04:38] internet so let's build your first web
[04:40] page as a developer we're entering the
[04:42] second phase now you need first to
[04:44] install a code editor so there are two
[04:46] popular ones and actually many others
[04:48] but there is a visual studio code and
[04:50] you have also corser AI be honest both
[04:53] are very similar it really doesn't
[04:54] matter which one you choose both support
[04:57] AI features I think cursor AI are the
[04:59] moment I'm making this video has a plan
[05:01] for like $20 per month to have the AI
[05:03] features and vs code has a free plan for
[05:07] their uh GitHub copilot AI feature once
[05:09] you picked your code editor just open it
[05:12] and create a new file usually you can go
[05:14] to help and type file and you will see
[05:16] like new text file now we're going to
[05:17] write your first web page remember
[05:19] everything that Transit on the internet
[05:21] whether you're going to Facebook Google
[05:22] Instagram no matter what is a web page
[05:25] so for that we need to know what is the
[05:26] default structure of a web page and so
[05:28] here our best friend is chpt so it can
[05:30] just say what is the default structure
[05:32] of an HTML page and then it's going to
[05:35] send you back a similar piece of code
[05:37] just copy that code and go back to your
[05:39] code editor and past it there then press
[05:41] command s to save the file and you can
[05:43] name it no matter what you want I'm
[05:45] going to call it homepage and then make
[05:46] sure you keep the HTML at the end
[05:48] because a web page is a file so it needs
[05:51] an extension just like MP4 is used for
[05:54] uh videos PNG is used for images HTML is
[05:58] used for web p pages so you can name it
[06:00] the what whatever you want just add.
[06:02] HTML you'll see that the structure of an
[06:04] HTML page is always the same it starts
[06:06] with this little thing here and then you
[06:08] have HTML tag here HTML closing tag here
[06:12] and then you have a head and a body just
[06:15] like we saw on YouTube and reddits
[06:16] before and on top of that CH GPT already
[06:18] added a few information in this head and
[06:21] body tag but we're going to see that
[06:22] later okay now you want to learn what
[06:24] you can add inside of a web page as a
[06:26] developer the web page 101 and for that
[06:29] I don't want you to just learn I want
[06:31] you to uh build something a real web
[06:33] page that you could show to a friend
[06:35] that could be a portfolio that could be
[06:36] a lending page for your IDE it doesn't
[06:38] matter just think about something that
[06:39] you can show to a friend and now any web
[06:42] page you see on the entire internet is
[06:44] made of three things HTML CSS and
[06:47] JavaScript if we compare this with a
[06:49] house HTML is the foundation the
[06:51] structure of the house without HTML
[06:53] there is no house we have CSS which is
[06:56] used for styling to make your web page
[06:58] beautiful the colors Etc and we have
[07:00] JavaScript which is used for uh user
[07:03] interaction and adding some Dynamic
[07:05] parts to your page so first we have HTML
[07:07] which is the foundation of any web page
[07:09] it is made with tags and attributes so
[07:11] just like we saw before this is uh
[07:13] written in HTML you have here a tag is
[07:17] this little thing here that where you
[07:18] see HTML it is surrounded with brackets
[07:21] around it and you always have an opening
[07:23] tag and a closing tag and everything
[07:26] inside is like a children of this tag
[07:28] and attributes like this are properties
[07:30] that you give to those tags you will see
[07:32] HTML is very simple uh there are a few
[07:34] tags you want to learn like for instance
[07:36] links to be able to link between web
[07:39] pages headings for titles paragraph if
[07:41] you need to write a block of text images
[07:43] of course buttons and inputs in forms
[07:46] and containers if you need to wrap
[07:48] things around you don't need to learn
[07:49] all the tags just learn the very minimum
[07:51] you can start writing the first version
[07:53] of your ID of your web page using HTML
[07:56] tags only then you can jump into CSS CSS
[07:59] is basically a way to style your page to
[08:01] make it more beautiful to change the
[08:02] layout Etc there are a few things that
[08:04] are important like colors layouts
[08:06] heading phone size Etc you don't need to
[08:08] learn everything once again in the road
[08:10] map you'll see there are few CSS
[08:12] properties that you can learn that are
[08:14] important but learn just enough to make
[08:15] a beautiful web page and then finally
[08:17] there is Javascript so JavaScript could
[08:20] be like a kitchen a bedroom a toilet
[08:22] whatever it has interaction it adds
[08:24] features to your web page for instance
[08:26] when you click the like button under
[08:27] this video on YouTube it will Tri
[08:29] JavaScript to do something if you
[08:31] actually do like the video that means a
[08:33] lot for me JavaScript could be quite
[08:34] Advanced there are many things to learn
[08:36] I would recommend to start with those
[08:38] foundations the very minimum for
[08:39] instance you could have a button that
[08:41] when you click on it it sends a little
[08:42] Hello message somewhere on the page and
[08:44] use that homepage. HTML file we created
[08:47] earlier to add text to change the text
[08:49] color add features using JavaScript no
[08:51] matter what and whenever you're stuck
[08:53] with something whenever you need to
[08:54] learn something ask chpt to help you
[08:56] around once you're done and you've saved
[08:58] your file what you can do is is you can
[08:59] open this file and view the results of
[09:01] your creation for instance now if I open
[09:04] this like homepage. HTML if I double
[09:06] click I'm going to go in my internet
[09:08] browser and it's going to display the
[09:10] things that I wrote with my code and now
[09:12] you can do something even crazier you
[09:13] can send that web page to someone I'm
[09:15] just going to go drag and drop it to my
[09:17] wife on WhatsApp send the page to my
[09:19] wife and now if she opens her phone and
[09:21] double click on this file it will open
[09:23] her internet browser and she will be
[09:25] able to see the code that I wrote and
[09:27] just like this you have made your first
[09:29] web page now of course uh it is not
[09:32] available on the internet there is no
[09:34] way for anyone across the world to
[09:36] access my web page but you'll see that
[09:37] is very simple we're going to cover that
[09:39] in the next part okay now moving on to
[09:41] part two here you're going to learn
[09:43] exactly what you need in order to build
[09:46] any internet business here I said SAS
[09:48] short Force software but that can be a
[09:50] directory that can be a habit tracker
[09:52] that can be an AI tool it can be
[09:53] literally anything for instance these
[09:55] are all the websites that I built
[09:57] they're all very different you have like
[09:59] a analytics tools that I built habit
[10:01] tracker that are made for people to uh
[10:02] track their reading and workout habit um
[10:05] I have built directories like this one
[10:07] where you have like thousands of uh
[10:09] pages indexed on Google and I am using
[10:11] all the time the exact same road map
[10:13] that I will show you right here so we're
[10:15] going to cover how to create landing
[10:16] pages how to process payment how to
[10:18] create user account API database front
[10:20] end backend anything that you have heard
[10:22] of and that you think you need in order
[10:23] to build an internet business will be in
[10:25] this road map the first step is to pick
[10:27] a text tack so this is the text T I use
[10:30] for absolutely all of my apps in the
[10:32] programming language I am using
[10:34] JavaScript some developers use python or
[10:36] C or C++ usually for the back end but
[10:39] mine only use JavaScript language it's
[10:41] much easier I don't have to learn two
[10:42] languages just JavaScript on the front
[10:44] end part which is what people are going
[10:46] to see I'm using react which is a
[10:49] JavaScript library to build reusable
[10:51] components like buttons and and forms
[10:53] that my users can click on I am using
[10:55] twin CSS to make writing CSS a little
[10:58] bit easier I am using Daisy UI which is
[11:00] a free UI component Library so it has a
[11:03] set of like predefined buttons and
[11:05] tables so I don't have to design
[11:07] everything from scratch and I am using
[11:08] nextjs as a reactjs uh framework in
[11:12] order to organize pages on the back end
[11:14] which is the part that users don't see
[11:16] usually the server I am using two
[11:18] Services I'm using nextjs for the API
[11:21] we're going to cover that later but it's
[11:23] basically the invisible part where you
[11:24] do all your business logic and I am
[11:26] using mongodb for the database to store
[11:29] information and I'm using some
[11:30] thirdparty tools in order to help me in
[11:32] my process so for instance for user
[11:35] authentification uh login with Google
[11:37] Etc I am using OJs to send emails across
[11:40] the internet I am using recent I am
[11:43] using stripe and sometimes lemon squeezy
[11:45] to charge and process payments so
[11:47] subscription what time payments invoices
[11:49] Etc and I am using data fast as a web
[11:51] analytic tools to know for instance who
[11:53] visits my website okay maybe at this
[11:55] point you're wondering like what is
[11:56] going on to HTML JavaScript and CSS what
[11:59] are we doing all of this you'll see that
[12:01] even though the internet relies on web
[12:02] pages and everything you see on the
[12:04] internet is HTML JavaScript and CSS as a
[12:06] developer it is much faster to use those
[12:09] tools in order to write HTML JavaScript
[12:11] and CSS for us those tools are just
[12:13] meant to make our life easier the text
[12:15] tack I use right here is almost free for
[12:18] you to use you see most of those tools
[12:20] have free plans so you can get started
[12:21] with 0 and of course if you don't like
[12:23] my Tex tack if you have heard of another
[12:26] tools that you prefer to use it is
[12:27] perfectly fine what is important here is
[12:29] that whenever you have decided what
[12:31] you're going to use for your text tag
[12:32] you want to stick to it and never change
[12:34] it because every time you have to learn
[12:35] a new tool you're losing time on things
[12:37] that matters which is shipping apps and
[12:39] you will see that in the ends all those
[12:40] text tax thing it's always the same
[12:42] debate you can do pretty much anything
[12:44] you want with any text stack and finally
[12:46] I want to mention that I am not
[12:48] sponsored whatsoever in here to make
[12:50] this video uh none of those tools that
[12:52] you see here are paying me to make that
[12:54] the only sponsor of this video is myself
[12:57] I created this course called code fast
[12:59] uh to teach people how to learn to code
[13:01] quickly it's a 12 hours course on the
[13:03] same Principle as you see in this video
[13:05] it's more Hands-On because we're going
[13:07] to code along over 2,000 students have
[13:09] already learned how to code using the
[13:11] course but of course you don't need the
[13:13] course in order to learn how to code you
[13:15] can learn by yourself using an AI in the
[13:17] road map I am going to show you right
[13:18] now okay before we get started you want
[13:20] to discover what the terminal is if you
[13:23] go on your computer and you search for
[13:24] terminal it is going to open a little
[13:26] app that looks like this where you can
[13:28] type command line
[13:29] it's basically a chat box to do stuff on
[13:31] your computer so here for instance if I
[13:33] type PWD is going to tell me in which
[13:35] folder I am I can navigate inside of
[13:38] folders like CD and here I entered the
[13:40] desktop there are very few simple
[13:42] commments like those ones PWD CD LS Etc
[13:45] that you can learn to help you later you
[13:48] also have a terminal inside of your code
[13:51] editor now if you go to the top and you
[13:52] search for terminal you can pop up a new
[13:54] terminal directly inside of your code
[13:56] editor which going to be useful for
[13:58] later and the reason we need a terminal
[13:59] at some point is because we're going to
[14:01] have some tools developer tools running
[14:03] on our computer to make our life easier
[14:05] and those tool usually need to be run
[14:07] using common lines in the terminal okay
[14:09] now that we're good with the terminal
[14:11] things we're going to move on and set up
[14:13] your computer to use all the tools we
[14:15] have from the text tack so first of all
[14:17] you will need to install node.js you'll
[14:19] find nodejs as the first link on Google
[14:21] just click here and download it for your
[14:23] computer it was not really clear for me
[14:25] when I started to code why I need nodejs
[14:27] so here is a quick example of why you
[14:30] need it when you are on your uh computer
[14:32] your internet browser so Safari or
[14:34] Google Chrome there is something called
[14:36] the V8 engine which is the little
[14:38] background process that is running all
[14:40] the time and that is used to execute
[14:42] JavaScript if you want to test your V8
[14:45] engine on your computer you can go to
[14:46] any website you can open the developer
[14:48] console and you can see that you can
[14:50] write JavaScript inside of the console
[14:52] here and if I write alert name is going
[14:55] to print uh send me a little alert with
[14:57] my name this thing here is able to run
[14:59] JavaScript thanks to the V8 engine that
[15:02] is coming already installed on your
[15:04] computer and it allows us developers to
[15:06] write JavaScript inside of HTML Pages
[15:09] now nodejs it's very similar to the uh
[15:11] engine except that it can run on any
[15:13] computer anywhere any time that means
[15:15] now that you could start a little engine
[15:17] on your computer not necessarily on
[15:19] internet browser but like in the
[15:21] background on your computer and you can
[15:22] run JavaScript from anywhere so we're
[15:24] going to use it for two things we're
[15:26] going to use it right now on your
[15:27] computer to set up all those developer
[15:29] tools and run them in the background and
[15:31] you're going to use it later
[15:32] automatically when we're going to push
[15:34] your site on the internet there will be
[15:35] some processes that are always running
[15:37] on the machine we're going to push your
[15:39] code so that it listens for like
[15:41] visitors coming to your site and is able
[15:42] to answer those requests okay the second
[15:45] thing we need is to install
[15:47] nextjs we're going to use nextjs for two
[15:49] things the front end what people see and
[15:51] the back end what people don't see some
[15:53] developers use two completely separate
[15:55] Frameworks for their front end and
[15:57] backend I just find it easier to use GS
[15:59] for both of them for the front end for
[16:01] like web pages thing that our visitors
[16:03] are going to see and use um you remember
[16:06] from the previous section of this video
[16:09] that we have HTML files that are able to
[16:12] be shown somewhere on your internet
[16:14] browser but you'll see that with nextjs
[16:16] we're not going to write HTML directly
[16:19] we're going to write JavaScript and then
[16:21] on your computer there will be a process
[16:23] that will turn these JavaScript into an
[16:25] HTML files that we are going to send
[16:28] back to visitors so that they can see
[16:30] your creation on their internet browser
[16:32] and this process that will turn the
[16:33] JavaScript into HTML is using behind the
[16:37] hood nodejs that we just downloaded and
[16:40] for the backend part with nextjs it is
[16:42] using serverless so we won't have to
[16:44] manage an entire instance or machine and
[16:47] put it on the internet uh this will be
[16:49] done automatically for us so we won't
[16:51] have to think about that but don't worry
[16:53] about that we're going to go deeper
[16:54] later and finally if you haven't done it
[16:56] from the previous lesson already you
[16:57] want to install a code editor like vs
[17:00] code or cursor okay now we need to
[17:01] install nextjs the framework that we're
[17:04] going to use to show pages to our
[17:07] customer so the front end part but also
[17:09] as the backend the server so the thing
[17:12] that is invisible to customer where
[17:13] we're going to have our API and database
[17:15] logic Etc some developers prefer to have
[17:18] two separate projects for their front
[17:20] end and their backend I just find it
[17:22] easier to use just nextjs for both the
[17:24] front end and the back end so to install
[17:26] nextjs just go on Google Search for
[17:28] nextjs
[17:29] and take the first link that you see you
[17:30] will see this little command line
[17:32] written right here just copy that and
[17:34] open your terminal just before you pass
[17:36] the command here and press enter make
[17:39] sure you are in the right folder because
[17:41] it's going to create a nextg project so
[17:43] for that I am going to navigate to my
[17:45] desktop on my computer and I'm going to
[17:48] go inside of the nodejs workspace this
[17:51] is exactly the same as if I were going
[17:53] to click here on the desktop and open
[17:55] this node.js workspace so now that I am
[17:58] inside of the node.js workspace I can
[18:00] pass the common and press enter so quick
[18:03] breakdown of the common here uh this npx
[18:06] thing now is available because we just
[18:09] downloaded nodejs so we have access to
[18:11] this command which is going to execute
[18:13] something the something we're going to
[18:15] execute is this common here create next
[18:19] app which is something that the nextjs
[18:21] team has created to uh create an entire
[18:24] project right on our computer and the AD
[18:27] Sign and latest right here just mean
[18:29] that we want to use the latest version
[18:31] of this program so we have access to the
[18:33] latest feature it's not a big deal but
[18:35] it's better you just copy paste it the
[18:36] way it's given here it's going to promt
[18:38] you with a bunch of questions so you
[18:40] press y to proceed I'm going to name my
[18:43] project unicorn uh I am not going to use
[18:46] typescript yes foran lint yes for kwin
[18:49] CSS we don't need the SRC directory yes
[18:52] we need the app router yes we need turbo
[18:54] pack and we don't need to customize the
[18:57] import alas once you press enter here it
[19:00] is going to set up something on your
[19:01] computer and you will see that on the
[19:03] left side in this folder there will be a
[19:05] new folder that is created uh that I
[19:08] named unicorn that in this unicorn
[19:11] folder will contain all the nextjs file
[19:14] the project was successfully created and
[19:17] now if I visually go to my uh unicorn
[19:20] folder you will see that I can uh
[19:22] actually see all the new files that were
[19:24] added so all of those files here uh were
[19:27] created during the command line script
[19:31] that we executed just before and finally
[19:33] if you haven't already from the previous
[19:34] lesson you want to download a code
[19:36] editor like vs code or cursor okay now
[19:39] open your code editor and open the
[19:41] folder we just created so for me it's in
[19:43] my desktop no JS workspace and then
[19:45] unicorn now you see on the left side I
[19:48] have all the files and folder that were
[19:50] created automatically for me there's a
[19:52] bunch of stuff going on here and this is
[19:53] going to be your workspace basically as
[19:56] a developer so we need to understand and
[19:58] break down a little bit of what is going
[19:59] on so there are multiple things here
[20:02] that are going on inside of this project
[20:04] the first one and a very important one
[20:06] is the package manager we now have
[20:08] access to npm npm stands for node
[20:12] package manager it's basically a
[20:14] directory of modules of packages that we
[20:16] can use from the internet so for
[20:18] instance uh there are developers who
[20:20] create really cool libraries like a date
[20:22] peer a nice form or this like a
[20:25] component library that we're going to
[20:27] use later in the project with there's a
[20:28] bunch of components that were already
[20:30] made and are available for free and you
[20:32] can just download it uh here for
[20:34] instance the commment to download this
[20:35] entire package with all those components
[20:38] is npm I short for install Daisy UI and
[20:42] if you run this common inside of your
[20:43] terminal you will have access to all
[20:45] those components inside of your own
[20:47] project actually if we go back to the
[20:48] project and you open the nodecore
[20:51] modules folder you will see you already
[20:53] have a bunch of packages that were
[20:55] installed already for you you can
[20:57] actually see a list of all the packages
[20:59] that we have installed now they are here
[21:01] inside of your package the Jon is like a
[21:04] a controller of all the list of packages
[21:06] that we have installed they are here in
[21:08] the dependencies or the dev dependencies
[21:10] here we have react react D and next and
[21:13] sometimes those packages realiz on other
[21:15] packages which r on other packages
[21:17] that's why we have like an array of
[21:19] packages so here we only have a few
[21:21] packages but you have a thousands maybe
[21:24] 100 packages here in the ne modules is
[21:26] because some of those ones here rely on
[21:28] more packages and whenever you installed
[21:30] a new package it's going to appear
[21:32] somewhere here in this package.json file
[21:36] so now I'm going to open a terminal
[21:38] inside of the code editor so I am
[21:39] already inside of my project and if I
[21:42] want to install a new package I just
[21:44] have to type npm installed and the name
[21:47] of the package and another part that is
[21:50] important in your package manager is
[21:51] that you can run script using the npm
[21:54] Run script name comment so let's go back
[21:57] to the project here here we see in the
[21:59] package J Json you have already four
[22:02] scripts and the first one the dev script
[22:04] is one that we're going to use a lot to
[22:06] run a script npm run and the name of the
[22:09] script now when I press enter it's going
[22:11] to execute this command this is
[22:13] something that was created by the nextjs
[22:15] team and it's going to set up my
[22:17] computer to uh run a little development
[22:19] server so that I can write and compile
[22:22] code here it tells me to go to uh Local
[22:25] Host
[22:25] 30001 is because I already have another
[22:28] script run running but for you it's
[22:29] likely local h 3000 just copy or follow
[22:32] this link go to your internet browser
[22:34] and press enter and you should see right
[22:36] here a little uh website that is now on
[22:39] your computer so as a quick recap about
[22:41] the node package manager uh now on your
[22:45] project you have access to a few
[22:47] commands you can install or update
[22:49] packages which are like uh tools uh that
[22:51] were created by other developers that
[22:53] will help you in your uh programming
[22:55] journey and you can run scripts which
[22:58] are going to do a stuff on your computer
[23:01] which going to execute something on your
[23:02] computer like the one we just run npm
[23:04] runev where we are setting a local
[23:06] development server to make your website
[23:09] the next part that's important for your
[23:10] project is the Version Control System I
[23:12] might get canceled by real software
[23:14] engineer for putting GitHub and git
[23:15] inside of the same uh topic here uh but
[23:18] roughly those two Services git and
[23:20] GitHub will help you do a bunch of
[23:22] things on one hand you have git which is
[23:25] going to help you make versions of your
[23:27] code so for instance you push a new
[23:29] feature or you fix a bugs you create a
[23:31] new version for your code and so that
[23:33] later if you realize you made a mistake
[23:35] you can revert back to the previous
[23:37] version it helps you organize your code
[23:39] and GitHub is like a Google Drive for
[23:41] developers where you're going to push
[23:42] your code uh what you write on your
[23:44] computer you're going to push it on the
[23:45] internet in GitHub it's a free service
[23:48] and we're going to push all of our code
[23:49] out there so in case you lose your
[23:51] computer you can still download your
[23:52] code from GitHub later on you'll see
[23:55] that we'll have something connected to
[23:57] GitHub and then whenever GitHub as a new
[23:59] change a new code that is being pushed
[24:01] is going to deploy our change to our
[24:03] actual website okay first let's start
[24:06] with Git and just a few thing here those
[24:08] three commments GI had git commit and
[24:10] git push um you don't need to memorize
[24:13] them but basically they're inside of
[24:14] your code editor there uh whenever for
[24:16] instance I press the plus Button as
[24:19] stage the change it is the same thing as
[24:21] if I type git add dots inside of my
[24:25] terminal right here those three commands
[24:27] are the ones you're going to use the
[24:28] most but technically you won't have to
[24:30] write them because well your code editor
[24:33] has a interface for you to just type
[24:35] buttons so you don't have to write those
[24:38] comments and finally there is the dogit
[24:40] ignore file uh which is already
[24:42] installed in your project uh right here
[24:44] on the root side if you open it you'll
[24:46] see a bunch of uh words and things here
[24:50] um each line is basically one thing to
[24:52] ignore so we don't want git to track
[24:55] those files or folders uh for instance
[24:58] the slash node modules which is this one
[25:01] right here this like a massive folder of
[25:04] modules that we've talked about earlier
[25:06] we don't want git to track this because
[25:09] those are dependencies this is not code
[25:11] that we write as developers those are
[25:14] just packages we installed so we don't
[25:16] need to track this inside of git
[25:18] normally you won't have to touch the git
[25:20] ignore file but just in case you know
[25:23] that anything that is in here will be
[25:25] ignored by git and therefore won't be
[25:28] put pushed to GitHub to install git on
[25:30] your computer go to those three dots on
[25:32] the left and click download git for your
[25:33] Mac follow the link they tell you and
[25:37] here if you are a Windows user you're
[25:39] lucky it's very simple if you're a micos
[25:41] user we need to install a home brew
[25:43] first so click The Homebrew uh link and
[25:47] then install Homebrew copy pass. command
[25:50] line and open your terminal just pass
[25:53] that command into your terminal and
[25:55] press enter it's going to go on the
[25:57] internet and inst the soft it's not a
[25:59] software it's that the it's similar to
[26:01] npm the package manager we had we talked
[26:04] about previously for nodejs except that
[26:06] is for your entire Mac OS system to
[26:09] complete the home brew installation we
[26:11] just need to copy past the lines of code
[26:13] they tell us so uh copy the first one
[26:16] past it interior terminal press enter
[26:19] and do the exact same thing for the
[26:21] second
[26:24] one now that you're done you can go back
[26:27] to the git inst ation page and copy past
[26:29] the command Homebrew install git and P
[26:33] it into your terminal press enter is
[26:36] going to install git and then a few
[26:39] second later you should be done you'll
[26:41] need to restart vs code so go to vs code
[26:44] close the application and then restart
[26:46] the application again open the
[26:48] repository we were working on and then
[26:49] go back to the three dots thing and
[26:51] click initiate repository and here
[26:54] you're going to see the list of all the
[26:55] files that were changed in this project
[26:57] and we're going to go over that very
[26:59] soon whenever you're done coding a
[27:01] little feature for your application or
[27:02] maybe like fix a bug you want to create
[27:05] a new version using git for that you're
[27:07] going to use git commit quite often to
[27:10] make a commit you will have to go on the
[27:12] git part of vs code so the little three
[27:15] dots at the top left and then you would
[27:17] have to write a message usually you
[27:18] would write something that is explicit
[27:21] uh for instance added this feature or
[27:23] fix that buug in this case we're just
[27:25] getting started so we're going to write
[27:26] first commit and the message is only for
[27:28] you later to remember press commit and
[27:31] you're going to see a little error
[27:32] message is because we need to set up git
[27:35] for your computer for the first time and
[27:37] if you scroll in the error message you
[27:39] will see that there are two missing uh
[27:42] things we have to run get config Global
[27:45] you need to set up your email and your
[27:46] username this is not going to log you
[27:49] anywhere it's not on the Internet it's
[27:51] just purely staying on your computer
[27:53] just so you just so git knows who is the
[27:55] user who made those changes so you don't
[27:57] even have to write your actual email you
[27:59] can write anything you want copy paste
[28:01] those lines of code um go to your
[28:03] terminal pass the comment there
[28:05] eventually update the email or the name
[28:06] if you want press
[28:10] enter and then click commit again and
[28:13] boom here we go you've made your first
[28:22] commit now you've created the first
[28:24] version of your app it would be great if
[28:25] your code was stored somewhere on the
[28:27] internet so that if you lose your
[28:29] computer or if you work with other
[28:30] developers they can access it or you can
[28:33] access it from another computer and for
[28:35] that we're going to have to use GitHub
[28:37] so when you click publish branch is
[28:38] going to ask you to sign up for GitHub
[28:41] you'll have to create an account this
[28:42] time with a real email so sign up with
[28:44] whatever you have uh as your primary
[28:46] email finish the GitHub tutorial like
[28:48] sign up entirely and then go back to
[28:51] this course all right so now you're
[28:52] signed up to GitHub it's basically some
[28:54] kind of like Google Drive for developers
[28:57] the code you write on your computer can
[28:58] be pushed on GitHub so it's online and
[29:01] either other developers can use it or
[29:03] you can use it with other computers so
[29:05] now go back to vs code and you can click
[29:08] publish Branch uh it's going to ask you
[29:10] again to sign up with GitHub this side
[29:11] you have an account so you can just
[29:13] authorize vs code to access your GitHub
[29:15] account and is going to reopen vs code
[29:18] for you and here uh select the publish
[29:21] to GitHub private repository and after a
[29:23] few seconds your project will be pushed
[29:24] on GitHub now if you go to your GitHub
[29:27] profile you can see the repository your
[29:29] project with the entire code that we've
[29:31] been writing on your computer okay
[29:33] another tool that is going to make your
[29:34] life much easier as a developer is
[29:36] called the linter the linter we use in
[29:38] our project is called es lint if you
[29:40] open your project if you go to whatever
[29:42] file you want and let's remove for
[29:44] instance uh this little line here you
[29:46] can see that I have a red color and it
[29:48] says GSX element has no corresponding
[29:51] closing tag is because in the background
[29:53] I have this linter called es lint that
[29:55] is analyzing my code all the time and
[29:57] whenever I make some typo or whatever I
[29:59] write code that should not exist it's
[30:01] going to try to tell me uh where the
[30:03] error is and how to fix it and now they
[30:05] even connected with AI so I can actually
[30:07] just click here and ask the AI to fix it
[30:10] in the composer for me if you ever need
[30:12] to customize some of the rules and how
[30:14] it behaves uh you would search for ES
[30:16] lint somewhere in your project and you
[30:18] could customize some of the behavior of
[30:20] the linter okay and finally let's have a
[30:22] quick look at the nextjs project
[30:24] architecture so you see now we have a
[30:26] big folder with a bunch of of files and
[30:28] a bunch of folders inside of the app
[30:31] folder is where you're going to write
[30:33] most of your code you're going to create
[30:35] new pages you're going to create
[30:36] components Etc inside of the public
[30:38] folder is where we're going to put some
[30:40] like files and icons uh things that we
[30:43] want to be available anywhere on the
[30:44] internet and then you have a bunch of
[30:46] other files uh we have the package Jen
[30:49] that is kind of like the controller of
[30:50] our app we have a configuration file for
[30:52] nextjs you have your GE ignore file you
[30:55] have your uh lint uh file as well uh
[30:57] those are more like controller files now
[30:59] you might be wondering like well Mark um
[31:02] previously we used HTML to make a simple
[31:04] web page that I can send to my friend
[31:06] and they can see it and now we have all
[31:07] those things with like different uh type
[31:10] names and extensions and folders Etc
[31:12] where is my HTML file so this is what we
[31:16] have done before we created an HTML page
[31:18] we send it to a friend it opens their
[31:20] internet browser and they can see what
[31:21] you have created and anywhere you go on
[31:23] the internet no matter what website you
[31:25] visit you're going to receive HTML
[31:27] JavaScript and and CSS but the problem
[31:29] is as a developer if you were to create
[31:31] an entire website using just pure HTML
[31:34] JavaScript and CSS it would be kind of
[31:36] tedious and kind of boring to be honest
[31:38] that's why developers have created uh
[31:40] Frameworks and libraries around it to
[31:42] write in a different language that is
[31:44] faster and easier to write and instead
[31:46] is going to turn what we have created
[31:48] what we have coded into actual HTML
[31:50] JavaScript and CSS so this is exactly
[31:52] why we have a nextjs project instead of
[31:54] writing HTML we're going to write
[31:57] JavaScript the JS stands for JavaScript
[32:00] meaning the file will be written using
[32:02] JavaScript language we're going to use
[32:04] libraries like react to write even
[32:07] faster and nextjs is going to compile
[32:10] our uh code into valid actual HTML
[32:13] JavaScript and CSS so there are three
[32:15] main components here the programming
[32:17] language we're using is Javascript on
[32:19] top of it we have reactjs as a
[32:22] JavaScript library is going to give us a
[32:24] set of tools to do things faster so for
[32:26] instance we can create usable components
[32:29] so for instance we can create a button
[32:31] that shows a little message using react
[32:33] and we can reuse that exact same
[32:34] component at many different areas into
[32:37] our app so this is going to make our
[32:38] life much easier and finally on top of
[32:40] this we have nextjs which is a react JS
[32:44] framework which is going to help us
[32:45] organize all our code and also going to
[32:48] compile all the code we write and turn
[32:50] it into actual HTML JavaScript and CSS
[32:52] so that anyone in the world with an
[32:54] internet browser can uh see and use our
[32:57] app all right one one last thing about
[32:59] breaking down the actual project uh you
[33:01] know there are bunch of files here
[33:03] you're not really yet sure of how those
[33:06] files interact with each other but don't
[33:07] worry the goal here with this video is
[33:09] to show you really the minimum you need
[33:11] to know in order to turn uh your idea
[33:13] into an actual project so we're going to
[33:15] jump into the coding as fast as possible
[33:17] and only later when you will need to
[33:19] customize a few things you will learn by
[33:21] yourself um what each of those files are
[33:23] needed for and since now ai is here to
[33:26] help us developers build but also
[33:28] explain stuff I recommend you to start
[33:30] setting up your AI co-pilots in your
[33:32] code editor so for cursor the one I use
[33:34] myself it is already here if I press
[33:36] command L uh it's going to open a chat
[33:39] window with an AI I think if you're
[33:40] using vs code you will have to add a
[33:42] little extension like here you would
[33:44] have to search for GitHub copilot um it
[33:46] really depends on your code editor just
[33:47] search it on Google you'll easily find
[33:49] it one of the first use case of AI which
[33:52] you can use even before starting a how a
[33:54] code is to explain what you don't
[33:56] understand directly in ins of your code
[33:58] base so for instance here um I just set
[34:00] up this project I am new uh to nextjs I
[34:02] don't understand every uh single of
[34:04] those Styles but I can do is I can just
[34:06] type English and I can ask my AI what is
[34:09] the app folder this thing here used for
[34:12] and then you'll see that the AI is
[34:14] actually really good at explaining
[34:16] things for me so I have a clear
[34:17] understanding can also refine my prompt
[34:19] and explain me using metaphors I can ask
[34:21] it to explain it in my own language in
[34:23] French if I want you can really use this
[34:25] AI chats to explain you what every
[34:28] single part of the code is for okay
[34:30] theory is kind of boring so now it's
[34:32] time to jump into the part where we're
[34:33] going to actually code something we're
[34:35] going to build a landing page a landing
[34:37] page is basically a single static page
[34:39] where you can uh introduce your idea or
[34:41] you can showcase your skill like your
[34:43] portfolio page what I want you to do
[34:44] here is to actually build something for
[34:46] yourself even if it's a very simple
[34:48] website just build something along with
[34:50] me because later we're going to deploy
[34:52] it on the internet and you'll be able to
[34:53] send uh your website to anyone and they
[34:56] will be able to access and visualize and
[34:58] see what you have created there are
[35:00] three parts when it comes to creating
[35:01] landing pages there is react nextjs and
[35:03] tedwin CSS okay first we need to start a
[35:06] development server so pop up your
[35:08] terminal common shift n as a shortcut
[35:10] and write npm run Dev press enter and it
[35:13] is going to start a local development
[35:15] server now to view the project I can
[35:17] just go to uh HTTP Local Host 3000 I'm
[35:20] going to copy that link and I am going
[35:22] to my uh internet browser pass the link
[35:24] here press enter and then I can see my
[35:27] actual app and so now whenever you make
[35:29] changes inside of the code this little
[35:31] script here is going to rerun this page
[35:34] and you're going to see the latest
[35:36] changes so for instance if I were to add
[35:38] a yo right here you can see that now my
[35:42] Local Host 3000 website is showing what
[35:44] I just wrote okay the first and probably
[35:46] the most important part is react it's
[35:49] the most popular JavaScript library used
[35:51] to build user interface it's basically
[35:52] like uh you're going to create component
[35:54] that you can use reuse across your app
[35:56] react developer are usually paid really
[35:58] well and there a bunch of courses that
[36:00] you can find on the internet if you want
[36:01] to go deeper uh but you will see that
[36:03] most of them are actually really long
[36:04] like 70 80 uh sometimes 100 of hours I
[36:07] believe that you need way less if you
[36:09] want to turn your idea into a tiny
[36:11] product for the internet so here are
[36:13] some of the core concept I think you
[36:15] should know in order to uh build
[36:17] something on the Internet there are two
[36:18] categories those on the left here are a
[36:20] reacton uh concept and on the right
[36:23] there are some advanc JavaScript concept
[36:25] that you will probably uh need in order
[36:27] to build your react components uh now it
[36:29] would take a couple of hours if I had to
[36:31] go through each of those concept which
[36:33] might be a little bit too much for this
[36:34] YouTube video um if you really want to
[36:36] go deeper with me and code along I have
[36:38] created the course name code fast where
[36:40] you have all those fundamentals concept
[36:42] and we uh go over each of them and now
[36:45] in this future video I'm going to give
[36:46] you a quick overview of all of those
[36:48] Concepts first one is that everything in
[36:51] react is a component if we go to uh one
[36:53] of my website this one here and if we
[36:55] break it down into react component this
[36:58] is what you would see at the top you
[36:59] would have a header component then you
[37:01] would have this like a big hero
[37:03] component and then you would have the
[37:04] smaller one this button checkout
[37:06] component that allows me as a developer
[37:09] to uh write once and then I can put this
[37:11] button for instance at multiple places
[37:14] without having to uh rewrite it every
[37:16] single time so I just wrote it once and
[37:18] then it's here displayed at multiple
[37:20] locations now let's go to your code
[37:22] editor uh I am going to remove actually
[37:24] a bunch of things we don't need here
[37:26] that and that I'm going to save this and
[37:27] on the right this is what you would
[37:29] normally see in your local Whole 3000
[37:31] since we're going to write bunch of
[37:32] components a common practice is to
[37:34] create a new folder code components
[37:36] inside of this folder you're going to
[37:38] create one file per react component in
[37:40] this case here the demo I want to show
[37:41] you is a counter component so I'm going
[37:44] to name it counter with a Capital C and
[37:46] then JS for JavaScript it's important
[37:48] that you name your uh component as well
[37:51] as the file name in a way that is easy
[37:53] for you as a human to understand as well
[37:55] as easy for an AI so that later on the
[37:57] AI can go through your codebase and
[37:59] understand it easier and this is a react
[38:02] component it's very simple it's just a
[38:04] simple JavaScript function so function
[38:06] counter here is the name of your
[38:08] component and it has to return something
[38:11] that something here looks like HTML it
[38:14] is not actual HTML it is jsx this is the
[38:17] notion here jsx it's a syntax language
[38:20] uh that we're going to use to uh
[38:23] basically return every uh thing that we
[38:25] want to show to our users in this case I
[38:27] am just returning this div which is very
[38:29] simple now I need to show this component
[38:32] to the user and since one component is
[38:34] inside of a file we need to export the
[38:37] component so we make it available to
[38:39] other files so then for instance in this
[38:42] page.js we can import the component from
[38:45] that file and we can display it right
[38:47] here when now when I press save you can
[38:49] see that I have the sort of counter
[38:51] being shown here and since it's a
[38:53] reusable component then I can show it
[38:55] even three times if I want and I will
[38:57] have it three time right here and so
[38:58] this component now is reusable I can use
[39:00] it across anywhere I want in my app now
[39:02] there's another important notion in
[39:04] react called props props are like
[39:06] properties that we are going to give to
[39:08] components so they can be customizable
[39:10] in the function to create a react
[39:12] components there will be a parameters
[39:14] pass name props this is an object where
[39:17] we can pass specific properties so the
[39:19] components can behave differently so in
[39:21] this props we're going to show the title
[39:24] now if I go back to my page JS what I
[39:26] can do is I can add title and I can give
[39:28] it the value of counter 1 counter two
[39:30] counter three and now when I press save
[39:32] you'll see that I see counter 1 counter
[39:33] two counter three and so thanks to this
[39:36] prop uh thing then for the same
[39:39] component I can have different output
[39:41] different look different customization
[39:43] now with just those few things here you
[39:45] can already create a nice lending page
[39:47] just a visual lending page to present
[39:49] your idea you might want to have some
[39:51] kind of user interaction like what
[39:53] happens if someone clicks on a button
[39:55] and for that we need to introduce the
[39:56] notion of server and client components
[39:59] so there are two types of react
[40:00] components by default all react
[40:02] component we create are server
[40:04] components and the difference between a
[40:05] server and a client component is
[40:07] basically when is this component
[40:09] rendered so in the case of a server
[40:11] component if a client someone a visitor
[40:13] from the internet goes to your website
[40:15] the server is going to uh take the
[40:18] reactjs component is going to compile
[40:21] this reactjs component which means it's
[40:22] going to turn this JavaScript code into
[40:25] HTML and then it's going to send back to
[40:27] the client this HTML uh component in our
[40:30] case the counter. JS react component is
[40:33] a server component because it's the
[40:35] default value so whenever we navigate to
[40:37] localle 3000 our the little script
[40:39] running in our computer is turning this
[40:42] uh JavaScript code into an HTML code and
[40:45] sending back to the client so that me as
[40:47] a person I actually see HTML here in uh
[40:51] my internet browser now in some cases
[40:53] where you want to have user interaction
[40:55] like people click on buttons and you
[40:56] update the component you want to use
[40:58] react client components in this case
[41:00] when the clients goes to your server and
[41:02] ask for uh whatever page react is going
[41:05] to check the the client components and
[41:08] he's going to send them back as they are
[41:10] and then when the JavaScript code
[41:12] Returns on the client then react is
[41:15] going to swap this reactjs this
[41:17] JavaScript code into an actual HTML the
[41:19] rendering process is going to be done on
[41:22] the client side hence it makes it a
[41:24] react client component to make a react
[41:26] client component all you have to do at
[41:28] the top of the file you just have to
[41:30] write quotequote use client and now
[41:32] since my counter is a client component
[41:34] that gives me access to more react
[41:36] features for instance I have access to
[41:38] react hooks like uh use State and use
[41:41] effects which are very handy function
[41:43] that's going to help us perform some
[41:44] actions we're going to cover that in a
[41:45] minute and we also have access to the
[41:47] unclick listener where we can listen for
[41:51] uh events for like when people press on
[41:53] buttons on our app so now we have a
[41:54] client component we can listen for
[41:56] clicks uh let's actually turn these
[41:58] components into some like an actual
[42:00] counter okay so here I have updated the
[42:02] code uh don't mind about those class
[42:05] name thing those are just used to style
[42:07] a little bit the counter we're going to
[42:08] cover that in the Tailwind CSS section
[42:10] what we have here first we have imported
[42:12] the function named use state from the
[42:15] react Library this is the most popular
[42:17] react hooked which is used to uh save a
[42:20] state the actual state of a component in
[42:22] our case we want to save the actual
[42:25] counter how many times the button has
[42:26] been clicked on we're going to write
[42:28] this line where we call the function use
[42:30] state zero is the default value by
[42:32] default the value of the counter will be
[42:34] zero and then we have uh here a stateful
[42:37] variable named count and a set count
[42:40] which is a function that we can use to
[42:41] update the stateful variable and right
[42:43] here I am just displaying the value of
[42:46] counts and you can see for the three
[42:48] counters we see zero one of the big
[42:50] perks of using those like stateful
[42:52] variable is that whenever we update the
[42:54] count using set count react will
[42:56] rerender under our page it will show the
[42:58] new value of count without us developers
[43:01] having to do anything all we have to do
[43:03] is to just call the method set counts so
[43:05] here I have created two buttons a minus
[43:07] button and a plus button one will
[43:10] decrement the value of count and one
[43:11] will increment it on each of those
[43:13] button we have this event listener on
[43:15] click so that whenever a person clicks
[43:17] on the button then it's going to trigger
[43:20] a function and this function is this
[43:22] thing here this will be called whenever
[43:25] someone clicks on the plus button or the
[43:27] minus button and what this function is
[43:29] doing here it's calling the set count
[43:31] function this one that is going to
[43:33] update the count and we're going to
[43:34] reuse the previous value of the counter
[43:36] so the actual value right before the
[43:38] click and we're going to say that the
[43:39] new value is the count value minus one
[43:42] and exactly the same for the increment
[43:44] counter where we're going to say plus
[43:45] one and so now you'll see that when I
[43:47] press the plus button the value of count
[43:50] is updated and since it's a stateful
[43:52] variable in the background react
[43:54] rerenders the component and shows the
[43:56] actual new value so those are some of
[43:59] the core and fundamental concept of
[44:00] react and you will see that you can go
[44:02] already pretty far just with some of
[44:04] those okay now the next concept is
[44:06] nextjs it's a react framework it's
[44:09] mostly going to be used to organize your
[44:11] pages so we're going to write react
[44:13] components and we're going to put all of
[44:15] them inside of one page and nextjs in
[44:17] the background is going to turn this
[44:20] reactjs code and compile it so we can
[44:22] give it to people on the internet as
[44:24] HTML these are the fundamentals of
[44:27] nextjs I think you should learn um of
[44:29] course there are a bunch of other
[44:30] features that they have but those ones
[44:31] here will get you pretty far so for
[44:33] instance a page.js it's a file
[44:36] convention whenever you write inside of
[44:38] your code page.js nextjs is going to
[44:41] create a new page for you so this right
[44:43] here this entire thing is a page um
[44:45] actually if I look at the content inside
[44:47] of page JS you can see that I am
[44:49] exporting a function with a capital
[44:51] letter that is returning some jsx and
[44:54] what you can notice here is that a page
[44:55] is actually a real reactjs component
[44:58] it's just a big react component that is
[45:00] going to have other components inside to
[45:02] be shown on the client so nextjs is
[45:05] going to help you organize your pages
[45:06] now let's say we want to have another
[45:08] page at SL dashboard like a private
[45:11] dashboard for your customers for
[45:12] instance what you can do is you can
[45:14] create a new folder named uh dashboard
[45:17] the name of the the actual path you want
[45:19] inside of the app folder and inside of
[45:21] this folder you create a new page.js
[45:24] this is a convention it has to be named
[45:26] page.js and here you can uh create a new
[45:28] reactjs component so a function that
[45:31] exports some jsx and now when I go here
[45:33] and I press enter I am going to go in
[45:35] inside of this like new uh page for now
[45:37] it's it's a boring page it doesn't do
[45:39] much thing but uh this is how you are
[45:41] going to use nextjs to create a bunch of
[45:43] pages for your app another feature of
[45:46] nextjs is the layout. JS so here once
[45:49] again we already have one created this
[45:51] is a Convention as well you have to name
[45:53] it layout. JS and it's basically going
[45:55] to be a wrapper around your pages and
[45:57] all the things you do here will be
[45:59] applied to the underneath pages so again
[46:02] here we have a react component because
[46:04] everything is a react component and what
[46:06] it says here is that basically we're
[46:08] going to wrap all the pages so children
[46:10] is a keyword in uh react that you also
[46:13] should learn um and then we're going to
[46:15] wrap all those pages inside of an HTML
[46:18] and a body tag actually we do that here
[46:20] because we applied this G sense variable
[46:23] so this is basically like a font the
[46:25] font we actually get from from Google
[46:27] and we want to apply the same font on
[46:29] every pages and we can do that simply
[46:31] using layout. JS if I want to go crazy
[46:34] and set a background color of red inside
[46:36] of the layout you can see that in my SL
[46:39] dashboard page the background is not red
[46:41] and the background of my main page is
[46:43] also red so whenever you apply something
[46:46] inside of a layout. JS every uh thing
[46:48] here will be applied to all the pages
[46:50] underneath there are two other things
[46:52] that nextjs has created for us that is
[46:53] very handy uh those are two react
[46:56] components so we have link and image you
[46:58] would use the link one in order to
[46:59] navigate from pages to Pages you would
[47:02] first import the link component from the
[47:04] next package and then you would simply
[47:06] do link so you would have the hre
[47:09] attribute and you would point to
[47:10] wherever you want to point so in this
[47:12] case I want to go to the dashboard and
[47:13] then you can write text or anything else
[47:15] inside and then you should have a nice
[47:17] link on your page and if you click I'm
[47:19] going directly to the dashboard so now
[47:21] you might be wondering why we just don't
[47:22] use the HTML a tag and the reason behind
[47:25] is when we use this component nextjs in
[47:27] the background will do some work and is
[47:30] going to prefetch the dashboard page so
[47:32] that whenever we click on this link it
[47:34] is super fast to navigate to the
[47:36] dashboard page so whenever you have some
[47:38] navigation going on inside of your app
[47:39] you mostly want to use the link
[47:41] component again finally the image
[47:44] component here will help you display
[47:46] images in the right format so I have
[47:49] added this little nextjs PNG file inside
[47:51] of my app folder then in my dashboard
[47:54] component I'm going to import this image
[47:57] and I'm also going to import the image
[47:59] component from the next package and I
[48:01] can just use it like this you have a
[48:03] source attribute where in this case I'm
[48:06] passing the image here the image is
[48:08] available inside of the project that's
[48:10] why I'm I'm using this uh thing but you
[48:12] can also pass a URL of an image here
[48:14] instead then a few parameters and then a
[48:16] few uh styling options and then here I
[48:19] can see my image is displayed you could
[48:21] technically use the HTML image tag uh
[48:24] the reason we do it using nextjs is that
[48:26] there are going to optimize our image so
[48:28] my image right here is actually pretty
[48:30] big I think the file is around 1 mbte so
[48:32] what next is doing using this components
[48:35] instead of the traditional image HTML
[48:37] tag they optimize the image now if I go
[48:39] to my console and I check the image
[48:41] itself uh you see that I have multiple
[48:44] uh Source set in the background nexs is
[48:46] basically trying to uh guess how big the
[48:49] size of my screen is and is going to
[48:50] serve the the smallest possible image
[48:53] size so if you can see here uh the file
[48:55] size is only 10 kilobytes which is like
[48:58] I think 10x or maybe even 100x smaller
[49:01] than my original file so it's a common
[49:03] practice to use the image tag to help
[49:05] you um load images faster for your users
[49:08] and better for SEO as well okay now the
[49:10] missing part of the puzzle is how to
[49:12] style our react component and for that
[49:14] we're going to use tawin CSS which is a
[49:16] framework around CSS you can find it in
[49:18] your package.json normally you already
[49:21] have tawin CSS installed with nextjs
[49:23] tawin CSS is a CSS framework which is
[49:26] going to make our our life much easier
[49:27] if you were to write an entire app using
[49:30] only CSS you would go you would do lots
[49:32] of back and forth between your
[49:34] components and the style you apply to
[49:35] them and trust me it would get very
[49:37] boring instead TN has created a bunch of
[49:40] classes that we can apply right away
[49:42] inside of our components for instance
[49:44] here in the title of my counter I
[49:46] already have the text Excel class that
[49:48] was created by twin CSS their class have
[49:51] a good naming so it's easier for us
[49:53] developers to know what they're doing so
[49:55] you would kind of get that if I apply
[49:57] text Excel the text will be of like a
[50:00] large font now if I go crazy if I appli
[50:03] text for Excel you would see that the
[50:05] counter becomes really big and just for
[50:06] fun I'm going to say text EXs and you
[50:08] see that now the counter uh title is
[50:10] very small and actually if I hover my
[50:12] mouse on the the the actual class I can
[50:15] see the CSS uh class that is created for
[50:19] us so this text Excel applies the CSS
[50:22] property phone size of 20 pixels and a
[50:25] line height of 28 pixels if you don't
[50:28] have this inside of your code editor
[50:29] just go for your extension Tab and
[50:31] search for the tawin CSS intelligence
[50:33] plugin and then you will start showing
[50:35] you the CSS property that are applied
[50:37] and you will see twin has a bunch of
[50:39] classes I think they have over a
[50:40] thousand classes uh for instance this
[50:42] one uh P6 P stands for padding and it
[50:46] applies 24 pixels of padding inside of
[50:48] the counter if instead I would write px6
[50:51] and py12 I would apply 24 pixels of uh
[50:56] hor horizontal pading so X stands it's
[50:59] for the horizontal axis and the y stands
[51:02] for the vertical axis and you can see
[51:04] here on my card I have on the left side
[51:06] and on the right side we have 24 pixels
[51:08] and we have 48 pixels at the bottom and
[51:11] at the top the name of the colors as
[51:13] well are much easier to apply so for
[51:15] instance you kind of guess that the
[51:17] Border applied here will be gray which
[51:19] is much easier than if you had to write
[51:21] the hex color into CSS itself there are
[51:23] a bunch of classes and you don't need to
[51:25] learn all of them but I recommend you is
[51:26] to take all the CSS classes you need so
[51:29] maybe like a font size font weight the
[51:31] padding margin Etc and learn only the
[51:33] Tailwind CSS classes you need to style
[51:35] your page one you're going to need quite
[51:37] often is the flex container uh which
[51:40] allows me here to create three
[51:41] containers uh on top of each other uh so
[51:43] I created this little like a cheat cheet
[51:45] if that helps you can uh take a
[51:46] screenshot of it it is going to help you
[51:49] organize your uh Flex container and the
[51:51] flex items inside and have like a
[51:53] layouts where you have stuff on the top
[51:55] left stuff on the top right Etc I think
[51:57] I forgot to mention that we writing
[51:58] react component we are not using the
[52:01] class attribute we're using class name
[52:04] but of course remember next GS is going
[52:06] to compile our project and send HTML
[52:08] JavaScript and CSS to the client so now
[52:09] if I go into my internet browser I
[52:12] inspect the counter um I don't have
[52:14] class name written I have the attribute
[52:16] class written here and if I click on it
[52:19] I can see all the CSS classes that tawin
[52:22] has created for us and of course life
[52:25] wouldn't be fun as a developer if we
[52:27] didn't have access to UI components
[52:29] libraries so the one I use to create
[52:30] buttons form cards Etc on all my app is
[52:33] Daisy UI it is a collection of pre-made
[52:36] component that I can use inside of my
[52:38] app without having to style them so this
[52:40] is the daisy UI website and uh for
[52:42] instance if you go to their
[52:43] documentation you can have access to all
[52:45] those buttons so they have different
[52:46] states so if you press on them they move
[52:49] different colors um they react to when
[52:51] you hover them with your mouse cursor uh
[52:53] you have avatars you have uh badges Etc
[52:57] uh you want to you to leverage UI uh
[52:59] component libraries as much as you can
[53:01] so you don't have to do everything from
[53:02] scratch now in our project what we can
[53:04] do is we can install it so we can do
[53:06] npmi daisy UI this is going to install
[53:09] Daisy UI inside of my project I'm going
[53:11] to restart the de development server and
[53:14] now we should be able to access all of
[53:16] their classes oh actually I just forget
[53:17] one thing I have to open the Tailwind
[53:20] configuration file and then here I have
[53:23] to include the daisy UI plugin in order
[53:25] for tawin to know that we are using this
[53:27] UI Library so now for instance we can
[53:29] use Daisy UI buttons for our counter um
[53:32] I think this round button would look
[53:34] great so I have to look for the jsx and
[53:36] they told me to add BN BN Circle so I
[53:39] just add it right here inside of the
[53:41] button and now I can see that I have
[53:43] like two clicky buttons on the left side
[53:45] and on the right side of the counter
[53:47] which make my app much more stylish and
[53:48] easy to use now is time we are going to
[53:52] deploy your website on the internet so
[53:54] that anyone in the world can see it and
[53:56] I'm going to get a domain name so people
[53:58] have an easy access to go to your
[54:00] website and for that I'm going to give
[54:01] you a free preview of my course cut fast
[54:03] where we're going to go over those
[54:04] lessons and I'm going to guide you step
[54:06] by step in how to deploy your website on
[54:08] the internet first make sure you commit
[54:10] all your changes and push them to GitHub
[54:12] you might have something different than
[54:14] me here it doesn't matter just commit
[54:15] your changes then go to versal decom
[54:18] versal is a company that will provide a
[54:21] server for you so that you can put your
[54:23] code and you can serve to anyone
[54:25] anywhere on the internet and also versal
[54:28] has a free plan that lets us deploy our
[54:30] projects at no cost I personally use
[54:32] versal for all my project I have no
[54:34] affiliation with them whatsoever it's
[54:36] just very simple to deploy a project if
[54:38] you do not fcy Verso uh there are some
[54:40] Alternatives like netlify or render once
[54:43] you're on this page uh click Start
[54:45] deploying and login with GitHub you will
[54:48] enter your github's credential and you
[54:50] will be prompted to connect your versal
[54:53] account with your GitHub account
[54:54] authorize the connection and I will see
[54:56] you on the other side okay now you
[54:58] should land on a page that it's a little
[54:59] bit similar you're going to go uh here
[55:01] add a new project and we are going to
[55:04] look for the repository you created on
[55:06] GitHub this is mine right here I have
[55:09] many other for other my project at this
[55:11] moment you might have only one click
[55:12] import versal might ask you to
[55:15] reauthorize something just make sure you
[55:17] let versal connect with GitHub and then
[55:19] do not change anything right here and
[55:21] just click deploy it's going to take a
[55:24] couple of minutes you have something
[55:26] called build logs this is the place
[55:28] where versal is going to take all your
[55:31] code and is going to run it on their
[55:32] servers as a little hint you can see
[55:35] that it's running in Washington DC at
[55:37] least for me um this is where your
[55:39] server is and then you can follow along
[55:42] with the time and the commments that are
[55:44] being executed um it looks like
[55:46] everything is going fine is generating
[55:48] some pages for our application and
[55:51] within a few seconds maybe a few minutes
[55:53] it should be done here we go the project
[55:55] was deployed I'm going to continue to
[55:57] the dashboard and I am going to get this
[56:00] button where I can visit my project and
[56:03] this is it the project is available on
[56:05] the internet I have a URL that I can
[56:07] share to any friends and anyone on the
[56:09] planet can see my project and just a
[56:11] quick break down here of what we have um
[56:14] this is versal doapp the domain name
[56:16] that versal owns and they give you a
[56:19] subdomain on their domain so that anyone
[56:22] can access your website later we will
[56:24] connect our own domain so we don't need
[56:27] to use the versal one and if you're
[56:29] running into any kind of issue during
[56:31] the building process you can go to the
[56:34] build logs and then here you will see
[56:37] probably some red color it will give you
[56:39] a hint of what is going on what broke
[56:42] down in the deployment phase if you have
[56:44] a code that is a little bit different
[56:45] than mine you might run into an error or
[56:48] two and it's perfectly fine normally
[56:50] they will tell you where the error come
[56:51] from and how to fix it um just copy past
[56:54] this error in Google or CH GPT to help
[56:56] help you let's break down a little bit
[56:57] about the process what is actually going
[56:59] on so you are working on your computer
[57:01] and you make changes on your code and
[57:03] when you press the commit and sync
[57:05] button is going to run those common git
[57:07] commit git push which is going to send
[57:09] the new code to GitHub now that we've
[57:11] connected versal and GitHub then
[57:13] whenever there is a change on GitHub
[57:15] versal will be updated so versal is
[57:18] going to run two command npn run build
[57:20] is going to check the new code and
[57:22] create a bundle of all the pages an npn
[57:26] Run start is going to start a little
[57:28] development server on uh versal and it's
[57:31] going to start listening for requests
[57:33] for people and serve the new pages
[57:36] updated with a new code let's dive just
[57:38] a little bit deeper into the two those
[57:40] two comments so on your local machine in
[57:42] the package.json you have those three
[57:45] scripts the one we always run is npn run
[57:48] Dev and the one that will run on versal
[57:50] by default is npn run build and npn run
[57:53] starts the npn Run build you can
[57:55] actually run it on your computer if you
[57:57] want just stop the development server
[57:58] and say npn run build you can just
[58:01] follow along with this tutorial as well
[58:02] you don't have to do it the npn Run
[58:04] build script is creating an optimized
[58:06] bundle of your application and once it's
[58:09] done running it's going to put all the
[58:11] code in the do next folder it's a very
[58:13] complicated folder with stuff will'll
[58:14] never touch but it's the code is there
[58:16] and it's optimized to be sent to
[58:18] visitors and the npn Run start command
[58:21] is going to start a local development
[58:22] server so it's listening for HTTP
[58:25] request and it's going going to use the
[58:27] next folder to give the right HTML pages
[58:30] so somehow those two uh build and start
[58:33] script are a little bit similar to what
[58:35] the dev script is doing the dev one is
[58:37] used on our local machine because it has
[58:39] some extra features like if you save a
[58:42] file for instance is going to refresh
[58:44] the entire page so that you can see your
[58:46] changes right away but for production
[58:48] it's good we create an app that's as
[58:51] small as possible that's why versal is
[58:53] going to run those two scripts you are
[58:55] now entering the most exciting part of
[58:56] the course we're going to buy a domain
[58:58] name and usually developers will buy a
[59:00] domain as soon as they have an ID and
[59:02] they usually never push code to it so
[59:05] congratulation you already have a tiny
[59:06] application and we're going to connect
[59:08] this with your future domain name also
[59:10] note that you don't have to buy a domain
[59:12] name right now although I really
[59:14] recommend you to do so because it's it's
[59:16] a very important part of the entire
[59:18] Journey you'll need a domain name um for
[59:20] the business side of things you'll need
[59:22] a domain name to rank your uh pages on
[59:25] Google you need a domain name to send
[59:27] links in the course I'll always do my
[59:30] best to make sure that there is an
[59:31] Alternatives where you don't need a
[59:33] domain but it's a very good thing if you
[59:35] do so right now to buy a domain name I
[59:37] usually use name chip uh for no specific
[59:40] reason I have no affiliation with them I
[59:41] just like them there is godadi that is
[59:43] also very popular since I named my app
[59:46] cfast sast I will search for cfast
[59:49] sas.com hopefully it's available I think
[59:51] it is it is available and it's pretty
[59:53] shipped which is nice um if you're
[59:56] is not available you can go with any
[59:58] other uh extension called TLD top level
[60:02] domain uh the here is one of the most
[60:05] popular but you have many others
[60:06] like.org net doio uh there are a bunch
[60:09] of them and it really doesn't matter
[60:11] which one you use I own a St domain like
[60:15] k.st and this doesn't make any
[60:17] difference if you already have a
[60:18] business name in mind go ahead and
[60:20] purchase a domain that is related to
[60:22] that if you have no clue what you're
[60:24] going to build in the future what you
[60:25] can do now is you can purchase something
[60:27] that is related to your name so that you
[60:29] can build a little portfolio website
[60:31] later for instance I own mar.com and
[60:34] this is my portfolio of little projects
[60:37] then proceed to check out uh create your
[60:40] account and I'll see you on the other
[60:41] side okay now I assume that you have
[60:43] voted your domain name so congratulation
[60:45] one of the thing you want to do first is
[60:47] to enable the auto renew feature because
[60:50] you actually do not own the domain name
[60:52] forever you are actually renting it for
[60:55] a year and this will ensure that your
[60:57] credit card will be charged every year
[60:59] so your domain name doesn't go away uh
[61:01] because in that case you can actually
[61:03] lose it if someone purchase it and if
[61:04] you are using another domain register
[61:07] than name chip for instance godadi the
[61:09] auto renew feature will be there for
[61:11] sure is just going to be at a different
[61:13] uh location on the user interface and
[61:15] then the part we're interested in is
[61:17] called Advance DNS if you're using
[61:20] another register it might be named a
[61:22] little bit different like manage gns or
[61:24] Zone file you are looking for user
[61:26] interface where you see these kind of
[61:29] things where you have type host value
[61:31] we're going to use these settings here
[61:33] to connect people who are visiting our
[61:35] domain name with our applications hosted
[61:37] on versal so now going to versal I'm
[61:40] going to go to the settings part in my
[61:42] project and on the left side there
[61:44] should be a domains um Tab and here you
[61:47] want to add your domain name and then
[61:49] press the button add and you can go with
[61:51] one or the the first or the second
[61:53] option I usually choose the second one
[61:56] it's just a matter of preference whether
[61:57] you want people uh to visit ww.you
[62:01] name.com or yourdomain name.com and then
[62:04] when you press add versal is going to
[62:06] give you the instructions to connect
[62:08] your domain name and the project so here
[62:10] they're telling me I should add a record
[62:12] in my DNS of type c name with uh the
[62:15] name ww and the value should be this so
[62:19] copy that value here and go back to your
[62:21] DNS settings and add a new record the
[62:24] new record was a C name record we're
[62:26] going to go over that in a minute the
[62:28] host or the name is www and the value is
[62:31] the one you just created then press save
[62:34] change and we're going to do the exact
[62:36] same thing for uh the second one the
[62:38] root domain the domain name.com where
[62:41] this time we need to add an A type
[62:43] record with the name of uh at and the
[62:46] value should be this IP address so going
[62:49] back to name chip and I'm going to add
[62:51] this new record of type A the host
[62:55] should be be at and the IP address
[62:57] should be this then save the changes and
[62:59] let's go back to versal and normally
[63:02] within a few minutes after a refreshing
[63:05] they will uh connect successfully the
[63:07] domain to your viral project it could
[63:09] take up to 24 hours for those things to
[63:12] connect so if it doesn't work within the
[63:14] first 5 minutes it's totally fine um if
[63:17] it still doesn't work after 24 hours you
[63:19] want to go back here and check that you
[63:20] put the exact same uh thing here to make
[63:23] sure that everything is correct um now
[63:26] that it is working I can see that if I
[63:28] go to Cod fast sas.com then I end up on
[63:31] my virtual project and then I can send
[63:33] this link to anyone my friends my family
[63:36] um and they will be able to see the
[63:37] exact same thing as me uh let's go here
[63:40] just to understand really quickly what's
[63:42] happening when someone visits your
[63:44] domain name.com it's going to go first
[63:46] to the DNS the DNS um is name cheap or
[63:50] is GoDaddy it's basically a big server
[63:53] um that you can compare with a phone
[63:54] book if you're an old person like me
[63:56] where they map domain names to IP
[63:59] addresses people in general will never
[64:01] remember IP addresses it will be way too
[64:03] complex so they remember something
[64:04] simple like a domain name and then the
[64:07] DNS will do the work of mapping the
[64:08] domain to an IP address and this IP
[64:12] address is an address of a computer on
[64:14] the internet and it's magically the
[64:16] versal computer where we host our
[64:19] project versal is going to receive the
[64:20] request and return the right page to the
[64:22] client I went a little fast when
[64:24] purchasing the domain names so let's
[64:26] break it down let's say for this example
[64:28] that I own domain.com when I own
[64:30] domain.com I also own any subdomain
[64:33] under underneath so I own ww. doom.com
[64:36] email. doom.com anything I want to
[64:38] create. doom.com subdomains are pretty
[64:42] useful when you want to separate some
[64:44] things let's say you want to have a
[64:45] subdomain that is responsible to send
[64:47] emails a subdomain like
[64:50] blog.com that serves a different
[64:52] application that is dedicated for your
[64:54] blog uh you'll see that it could be
[64:56] quite handy and when you purchase a
[64:58] domain you can edit the DNS records
[65:00] which are used to map domain name
[65:02] request to a specific type of data there
[65:04] are many types of domain name records
[65:06] we're going to study the most common
[65:08] ones a records which stands for address
[65:11] are used to map a domain uh request to
[65:14] an IP address the at sign here is used
[65:17] to describe the root of your domain so
[65:20] domain.com but you could also have like
[65:22] a subdomain here where you could write
[65:24] ww or email or blog and then map it to
[65:27] uh whatever IP address of your server
[65:30] where the code is running address
[65:32] records are the most common ones because
[65:34] it's uh super simple this someone goes
[65:36] to your domain name and you redirect
[65:38] them to your server cames record which
[65:40] stands for canonical names are used to
[65:43] create alas or subdomains here you would
[65:46] add the subdomain so ww blog email uh
[65:49] whatever you want and then you would map
[65:51] it to another domain name this is quite
[65:53] useful if you want to redirect someone
[65:55] from your subdomain to your root domain
[65:57] for instance MX records MX stands for
[66:00] Mail Exchange are records to tell what
[66:03] to do when we receive an email at let's
[66:05] say mark.com and the value here should
[66:08] be the domain name of a mail server it's
[66:11] usually a company that knows what to do
[66:13] with incoming emails and could either
[66:15] save them forward them reply to them
[66:17] it's usually a paid service and finally
[66:19] we have the txt records txt stands for
[66:23] text and those are used only for display
[66:26] purposes so all those records are public
[66:29] meaning anyone can see them and we
[66:31] typically use txt records to show that
[66:34] we own a domain to verify a domain for
[66:37] instance if you want to submit your
[66:38] website to Google so that they know your
[66:40] exist they will probably ask you to add
[66:42] a txt record with some kind of like a
[66:45] unique identifier just to show that you
[66:48] own the domain and you were able to
[66:50] update the value here all right at this
[66:52] point you already have a bunch of
[66:54] information and knowledge in order to
[66:55] deploy a website show it your friends
[66:57] you can present your ideas you can do
[66:59] already a bunch of things what I really
[67:01] recommend you to do is to build a little
[67:02] portfolio or build like a demo page for
[67:05] your ID and put it on the internet now
[67:07] we have built mostly static websites
[67:09] where um people can view stuff but they
[67:11] cannot do much apart from just seeing
[67:13] your website this is where we have to
[67:15] introduce another big notion in
[67:17] programming called The backend the
[67:19] backend in other word is like all the
[67:21] things that your users don't see they
[67:22] can be like saving information into a
[67:24] database that can be creating a user
[67:26] account they can be uh calling another
[67:28] API like open AI to summarize a piece of
[67:30] text it includes really a bunch of stuff
[67:32] that are invisible for users and of
[67:34] course we want our front end and our
[67:36] backend to communicate and for that we
[67:38] going to have to create API endpoints an
[67:41] API endpoint is basically like a little
[67:43] door on your server so that your front
[67:45] end can communicate with your back ends
[67:47] so there are two parts the first one is
[67:49] actually create an API endpoint on the
[67:51] server side so these are some of the
[67:53] core concept we're going to go over and
[67:55] there is the front end part the thing
[67:57] that will our users our visitors will be
[67:59] able to play with like touch buttons Etc
[68:01] and these are some of the core
[68:03] JavaScript Concepts that we need for our
[68:05] front end to communicate with our
[68:06] backend now to understand a little bit
[68:08] about API endpoints and create your
[68:10] first API endpoint I'm going to give you
[68:11] again access to a free preview of my
[68:13] course to guide you step by step and
[68:15] right after that we're going to go back
[68:17] to our counter project and uh we are
[68:19] going to see how we can call like apis
[68:21] like uh open AI chpg apis for instance
[68:24] API here API there all developers are
[68:26] talking about API so what is it and why
[68:29] do we need API anyway the most common
[68:31] way to Transit data on the Internet is
[68:33] when someone is visiting a website the
[68:35] server is returning an HTML page the
[68:38] visitor is happy but an HTML page is not
[68:41] the only way that data travels on the
[68:43] internet in fact if you go to uh the cat
[68:46] ai.com
[68:48] jd. jpeg you will get back an image of a
[68:52] cat this is not an HTML page and if you
[68:55] go to this YouTube video of a guy
[68:57] wearing the same shirt as me and by
[68:59] pressing the like button we are making a
[69:02] request on the internet that is sent to
[69:04] the YouTube API now that you are a
[69:06] developer you'll see that uh internet is
[69:08] not just getting web pages you can also
[69:11] update data set data get images there
[69:14] are many other things we can do on the
[69:15] internet and this is where the terms API
[69:17] come from an API is basically a generic
[69:20] word to describe that a server has
[69:22] opened some doors for developers to per
[69:25] performs some kind of actions when you
[69:27] build software and web application a
[69:29] common use case is to have an API on the
[69:31] server so that our front end the HTML
[69:34] Pages can communicate with the back end
[69:37] we're going to create an API so that
[69:39] people can sign up for the service log
[69:41] to their account or even create a
[69:43] feedback board for instance and each of
[69:46] these individual functionalities that
[69:48] we're going to create are called API
[69:50] endpoints you can imagine an API
[69:52] endpoint as a door to the brain of your
[69:55] application but apis are not limited to
[69:58] only connection between web pages and
[70:00] servers they can be also server and
[70:02] servers without realizing it you've
[70:05] already called an API earlier when we
[70:07] created the database and you use the
[70:09] mongodb package in our application we
[70:12] are we were talking with the mongodb
[70:14] atlas API on their servers they have
[70:17] created an API endpoint that says give
[70:20] me your connection string give me a
[70:22] request and I'll perform the this action
[70:24] for you so that two servers can
[70:26] communicate to each other with apis
[70:29] theory is good but practice is much
[70:31] funnier so let's code our first API
[70:33] endpoint in the old days developers
[70:35] would have to create a dedicate seat
[70:37] server for their API but luckily with
[70:39] modern Technologies we can create an API
[70:42] right here inside of our nextjs project
[70:45] the first thing we want to do is we want
[70:46] to add a folder called API into the app
[70:49] folder that way we make sure we separate
[70:52] all the rest of the code the pages and
[70:55] and the images and the components from
[70:57] the API and inside of this API folder
[71:00] we're going to create another folder
[71:01] called oath oath is a short word for
[71:04] authentification and it would kind of
[71:06] make sense for us as we're doing user
[71:08] logging logout for now and to create
[71:10] your first API route nextjs made a
[71:12] convention whatever file that is named
[71:15] route. JS will become an API endpoint
[71:18] and we're going to write export function
[71:20] gate the export keyword it just mean
[71:23] that we can use this function outside of
[71:25] our project the function keyword is here
[71:28] because it's a simple JavaScript
[71:29] function and the get should be
[71:31] capitalized and it means that when
[71:33] anyone makes an HTTP get request to our
[71:37] API endpoint we're going to execute the
[71:39] code that's inside if you remember from
[71:41] the previous lessons there are four
[71:44] major types of HTTP request there is the
[71:47] get one where usually you request
[71:49] information there is the post one where
[71:52] you are uh adding some information to a
[71:54] database for instance
[71:55] there is a patch one when you want to
[71:57] edit and there is the delete one to yes
[72:00] you get it and then we are going to
[72:02] return this thing here so let's break it
[72:05] down first the response is a global
[72:08] object that's available our project is
[72:10] using JavaScript and there are some
[72:12] objects that are um available to us
[72:14] developers the response one is one of
[72:16] them and it's basically the response
[72:19] that you send when you get an HTTP
[72:21] request because remember uh to Transit
[72:23] data on the internet we make HTTP
[72:25] request with a method the get method for
[72:28] instance so we receive a request and we
[72:31] we answer with a response and the
[72:33] response is is here to help us format
[72:35] the data so that it can Transit on the
[72:37] internet if you hover it you will see
[72:39] that there are a few methods on it um if
[72:41] you don't like the what the person sent
[72:43] you you can reply with an error like
[72:45] your email is incorrect you can send
[72:47] some data in Json format you can also
[72:49] redirect the person to a different URL
[72:51] there are a bunch of methods and in this
[72:54] case I'm just using the Jon method so
[72:56] I'm going to send back some data and the
[72:58] data is this JavaScript object that is
[73:00] going to be formatted in Json format
[73:03] maybe we can give it a try so let's go
[73:05] to our internet browser maybe we open
[73:07] the developer console so we understand
[73:09] what is going on here go to the network
[73:11] tab to see that the how the data will be
[73:13] transiting and type localle 3000 and
[73:16] then uh since we're putting everything
[73:18] inside of the API folder you have to
[73:20] write slash API slash the other folder
[73:22] we created for user authentification so
[73:24] SLO and when you press enter you'll see
[73:27] that there are a few things happening
[73:28] first I'm not getting an HTML page back
[73:31] I'm getting some data and now if you
[73:33] look at what is going on here we see
[73:34] that we have made a request and when we
[73:36] click on it you'll see some interesting
[73:38] information so we've made a request the
[73:41] URL is the one we just type in the
[73:43] internet browser the method is get
[73:45] because as a person whenever you type
[73:47] something in your internet browser it
[73:49] will make a get request all the other
[73:51] method post patch delete are for
[73:53] developers since you're going to spend
[73:55] most of your time creating API endpoints
[73:57] and making communication between front
[73:58] end and back end let's study those
[74:00] concept a little deeper and let's also
[74:02] see how we can call another API like
[74:04] chpg and let's take for that an example
[74:07] let's say that every time as a person I
[74:09] press one of those buttons I want to
[74:11] send this information and save it into a
[74:13] database for that I will need to have an
[74:15] API endpoint that is uh receiving some
[74:18] information whether or not the user
[74:19] press the button Plus or the button
[74:21] minus and save this information in the
[74:23] database of course we would need first
[74:25] an API endpoint this is what it looks
[74:28] like I have created another uh route. JS
[74:31] file inside of/ API SLC counter uh here
[74:34] we're using a puff function because
[74:36] we're going to send some information
[74:38] along with the API request we're going
[74:40] to say the user press the plus button or
[74:42] the minus button and we need to know
[74:44] this information specifically and then
[74:46] we're going to use a try catch block
[74:48] this is very important this is very
[74:49] common in JavaScript because sometimes
[74:52] things will go wrong we programmer make
[74:54] mistakes and we want to have some way to
[74:56] gracefully handle those errors we don't
[74:59] want our function to crash for instance
[75:01] if I write some code that is not
[75:02] JavaScript when I try to execute this
[75:04] function is going to crash and in the
[75:07] front end part uh when people click
[75:08] buttons we don't want to uh show them
[75:11] the logs and these weird errors we want
[75:13] to tell them like oops something went
[75:14] wrong so what the try catch block does
[75:17] is going to try to run all your code
[75:19] inside and if there is an error then
[75:22] it's going to catch this error into the
[75:24] catch block and then you can safely
[75:27] return some information to the user and
[75:28] say something like oops sorry try again
[75:30] okay now in this catch block first we're
[75:32] going to create a new variable called
[75:34] Budd and for that we're going to uh use
[75:36] the Json method on the request object
[75:39] since we're making HTTP request and
[75:42] response now we are receiving the
[75:43] request from the front end the do Json
[75:46] is the method that is going to turn the
[75:48] Json format which is a typical format
[75:50] for how data Transit on the internet
[75:52] we're going to use that to parse the
[75:54] data and make it into a JavaScript
[75:56] object so we can use it inside our API
[75:58] endpoint and this method is asynchronous
[76:01] so we're going we're going to have to
[76:02] use the await keyword which is why we
[76:04] also declare the function as an asan
[76:06] function those asan await keyword are
[76:09] very important especially when you deal
[76:11] with API endpoint because um now between
[76:14] the front end and the back end uh you
[76:16] know we can have like a front end where
[76:17] the user is in New Zealand and my back
[76:19] end could be in the United States and so
[76:21] the data has to Transit from New Zealand
[76:23] to the United States and come back
[76:25] that's why we need this Asun 08 features
[76:28] to execute code where we don't know how
[76:30] long it's going to take okay the next
[76:32] line is called JavaScript object
[76:34] destructuring so this body object has
[76:36] information that we send from the front
[76:38] end we're going to destructure this
[76:40] object and extract those two properties
[76:43] so this refers to http parameters we're
[76:46] sending parameters along with our HTTP
[76:49] request for instance we're going to say
[76:50] like uh this is the counter number uh
[76:52] two or this is counter number three and
[76:55] this is the action increment or
[76:56] decrement those are parameters we pass
[76:59] from the front end to our back end here
[77:01] in this case I am just going to console
[77:03] log something so whenever I press on
[77:05] this button here you'll see that in my
[77:07] console log I see a counter counter one
[77:10] incremented and if I uh downgrade the
[77:13] counter 3 I will have another log that
[77:15] says counter counter 3 decrement of
[77:18] course here this is not the most
[77:19] interesting uh thing you can do with a
[77:21] back end um but you could do a bunch of
[77:23] other things here for instance we could
[77:25] have saved this information in a
[77:26] database we're going to cover database a
[77:28] little bit later you can compute some
[77:30] data like do some math or advanced stuff
[77:32] and you can even call another API like
[77:35] open AI so for instance now if I go to
[77:37] openai API platform um this is made for
[77:40] developers uh you would typically log in
[77:42] or sign up to create an account they'll
[77:44] give you a little uh API key we're going
[77:46] to cover that later as well and then
[77:48] very simply you can just call open AI
[77:50] for instance to summarize a text that
[77:52] was given by a user or to uh fixed typo
[77:55] you can generate photos out of text uh
[77:58] you can do it using their Library so
[78:00] there are two parts first you need to
[78:02] install this open AI package and then
[78:04] you just have to run this code right
[78:07] here uh this is not going to work but
[78:08] just to show you you would just
[78:09] typically run the code like copy past
[78:11] the code they give you right here I
[78:13] would need to import um the the package
[78:15] Etc but you can just run the code just
[78:17] like this right here and then your API
[78:19] endpoint is going to call another API
[78:21] endpoint that was created by open AI
[78:23] that is going to return You Back some
[78:25] data that you can send back then to your
[78:27] front end and you can make bunch of
[78:29] multiple API endpoints calls if you want
[78:31] uh you can go as crazy as you want and
[78:33] this is just as simple as this okay and
[78:35] now finally we need to return
[78:37] information because remember HTTP is
[78:39] made of like a request and a response
[78:41] and since this is the back end we need
[78:42] to return a response so we use the next
[78:45] response object that is given from a
[78:47] next server so it's a little helper for
[78:49] us to send back information to the front
[78:51] end and we said that we want to format
[78:54] the the data we're sending back into a
[78:56] Json format and here we are passing an
[78:59] object with some data in this case I'm
[79:01] passing success true and something
[79:02] interesting too here in the catch block
[79:05] you see we also have the same object of
[79:07] the data we want to pass back to the
[79:09] front end and we also specify something
[79:11] else where we say we give an object and
[79:13] we say status 500 because remember when
[79:15] you make HTTP requests across the
[79:17] internet there is a there are codes like
[79:19] status code uh to say whether or not the
[79:22] request was successful um by default it
[79:24] is too 200 200 means everything went
[79:26] well uh this is by default so this is
[79:28] what we're sending back here uh in this
[79:30] case something went wrong so we want to
[79:33] tell the front end that something ran
[79:34] really wrong that's why we're sending
[79:36] the status 500 okay so this is for the
[79:39] API part now for the front end we want
[79:42] to tie uh the click of this button to
[79:44] the call to the API so this is what I
[79:47] have done first I have created a new
[79:49] stateful variable called is loading this
[79:53] is going to be used in order to uh show
[79:55] a loading state to the user so what I
[79:57] want to do is when the person clicks on
[79:59] the button I want to put everything on
[80:01] hold like wait we're loading information
[80:02] we're sending this information to the
[80:04] back end wait a minute and then when the
[80:05] information comes back to the front end
[80:07] then we want to say okay it went well
[80:09] you can Cod it again I am using it
[80:12] inside of the the two buttons we have
[80:14] created uh this disabled attribute if
[80:17] it's true then the unclick event
[80:20] listener will not be triggered so if is
[80:23] loading is true this button will do
[80:25] nothing we can use this to prevent
[80:27] people from double clicking on buttons
[80:28] for instance so I also have updated the
[80:31] unclick event listener I am not going to
[80:33] run code inside right away I'm going to
[80:35] call a function that I created called
[80:37] handle counter action and I am passing
[80:40] parameters like one parameter so that
[80:42] the function knows if it's a plus or a
[80:43] minus button here I pass decrement and
[80:46] here I pass increment so this function
[80:48] here is this one right here it is of
[80:51] course an asychronous function because
[80:53] we're going to call the back ends so we
[80:55] don't know how long that's going to take
[80:56] so we have to make it asynchronous in
[80:57] order to be able to use the await
[80:59] keyword it received the parameter action
[81:01] so we know if it's a decrement or an
[81:03] increment function and the first thing
[81:05] we want to do is to uh set the loading
[81:07] uh state to true so that the user cannot
[81:10] double click on the button then we have
[81:12] a nice TR catch block and there is
[81:14] another part in the TR catch block
[81:16] called finally which is going to execute
[81:19] after the try or the catch block is done
[81:21] but no matter what this will be executed
[81:24] after try and catch and because here no
[81:25] matter if you got an error or not we
[81:27] want to set the loading State back to
[81:29] false so that the people can press the
[81:31] button again in the catch block we just
[81:33] log the error we could have a little
[81:35] popup that says like oh something went
[81:37] wrong or something it's not big deal
[81:38] right here and then in a tri block this
[81:40] is where we make the call to our API
[81:42] endpoint on the front end side to make
[81:44] an HTTP request you're going to use the
[81:47] fetch method this function gets two
[81:49] parameters the first one is the uh API
[81:52] you want to Target so in our case we
[81:53] created SL API SL counter that's why it
[81:56] is here maybe you want to call an API
[81:58] that is not yours or an API that is a
[82:01] different location you can just also add
[82:03] the the actual domain here to call
[82:05] basically any API you want and the
[82:07] second parameter are all the options
[82:09] we're passing uh so this is a big object
[82:12] in the first part we have the method
[82:13] which is very important uh so here it's
[82:15] a post method so we're making a post
[82:17] HTTP request which is exactly the same
[82:20] post as we have here then we have
[82:22] headers um headers are like a kind of
[82:24] like metadata that are uh passed along
[82:27] with HTTP request here we're saying that
[82:29] the information will be of type
[82:31] application. Json this is the format of
[82:33] the data we're sending that's why here
[82:35] we have to uh parse those Json data and
[82:38] turn it into a JavaScript object and we
[82:40] have the most interesting part which is
[82:42] the body the body is uh usually where we
[82:45] pass some information uh to the back end
[82:47] since we're sending Json format we have
[82:50] to use json. stringify uh method in
[82:53] order to turn our object into a Jon a
[82:56] valid Json format and here I want to
[82:58] pass two thing I want to pass the action
[83:00] so increment or decrement the little uh
[83:02] parameter here for this function which
[83:04] going to be a value decrement or
[83:06] increment and I also want to pass the
[83:08] counter ID which is the unique
[83:10] identifier for this counter so counter
[83:12] one counter two counter three so that on
[83:13] my back end I know which counter send me
[83:15] this information and then when we call
[83:17] this function is going to return a
[83:19] response so since we're going to wait
[83:21] for uh the response from the back end uh
[83:24] right after we will have access to the
[83:25] response if it is not okay this is going
[83:29] to invert so if response is not okay
[83:31] then we're going to throw an error so
[83:33] this is automatically going to tell
[83:35] JavaScript to enter the catch block and
[83:37] here we're just going to log the error
[83:39] and then of course if response is okay
[83:41] so the API answered well so everything
[83:44] went well then we're going to update the
[83:47] state the counter State and we're going
[83:48] to increment or decrement the state of
[83:51] the counter and now just like this each
[83:53] of those C Hunter is going to make an
[83:55] API endpoint so is going to call this
[83:57] API endpoint for now we're just logging
[84:00] uh the data inside of the console but
[84:01] you have basically done what developer
[84:03] do most of the time you create a nice
[84:05] front end for you people to interact
[84:06] with you create an API endpoint where
[84:08] you handle those interaction and you
[84:10] make them communicate with each other
[84:11] okay now we are entering the world of
[84:14] databases no matter what you are
[84:15] building on the internet chances are you
[84:18] will need a database at some point we
[84:20] can do very simple thing using database
[84:22] for instance like saving user after they
[84:24] login so that we can retrieve whether or
[84:26] not they're actually like pay users of
[84:28] our service or you can do more advaned
[84:30] stuff like saving logs and information
[84:33] so later you can see what happens in
[84:35] your app a database is like a big bucket
[84:37] where you can put lots of information
[84:38] and retrieve this information really
[84:40] fast usually when you build like complex
[84:42] and advanced software you want to think
[84:45] about how the data works first this is
[84:48] something called the MVC the model view
[84:50] controller the model is the data uh the
[84:52] view is what people see and the
[84:54] controller is how the view updates the
[84:56] data so whenever you have a software ID
[84:58] in mind you always want to think data
[85:00] first so for instance um you wants to
[85:02] build a social network like Facebook you
[85:04] have to think like okay we need users in
[85:06] a database each users has a name an
[85:08] email Etc then we have a list of posts
[85:11] like things that people can write each
[85:13] post has a user associated with it has a
[85:16] published date has a text a description
[85:19] an image Etc and then on top of these
[85:21] data you want to build your API
[85:22] endpoints to update the data and then
[85:24] you want to create the front endend part
[85:26] to call those API end points to update
[85:28] the data this is the typical workflow of
[85:31] a proper engineer to be honest what I
[85:33] love to do is to just create buttons and
[85:35] stuff and then update the data later but
[85:37] I might get cancel for saying this so
[85:39] anyway uh let's study this database I
[85:41] want you to get started ASAP so I am
[85:43] going to give you again access to a free
[85:45] preview of my course we're going to
[85:46] cover how databases work and how do we
[85:48] connect it with our API for instance uh
[85:51] we're going to talk about Atlas which is
[85:53] a service that lets you deploy a
[85:55] database because uh we need to actually
[85:57] have a server on the internet that we
[85:59] can store a bunch of data and Atlas is
[86:01] the one we're going to be using and of
[86:03] course I forgot to mention but we are
[86:04] going to use the mongodb type of
[86:06] database I'm going to explain why and
[86:08] what is the difference between this
[86:10] database and other types of databases uh
[86:12] we're going to install a little software
[86:14] called mongodb Compass to help us
[86:16] visualize our data right here on our
[86:18] machine and finally we're going to
[86:20] create a little helper function uh so
[86:22] that whenever we are inside of one of
[86:24] our API endpoint we can easily connect
[86:26] to our database to easily write or
[86:28] retrieve information before we start
[86:30] writing any lines of code let's
[86:32] understand the overall architecture of a
[86:34] database how do we call a database so
[86:37] your clients a user a visitor will
[86:39] always make request to your web server
[86:42] the web server right now is uh the
[86:44] little program running on your computer
[86:46] later it will be running somewhere in
[86:48] the cloud so that anyone can access your
[86:50] app at the moment we don't do anything
[86:52] complicated the web server is basically
[86:54] compiling your react components creating
[86:57] an HTML page and sending back to the
[86:59] clients but at some point we want to do
[87:01] some more Advance operations like the
[87:03] user maybe is asking for the dashboard
[87:05] page where they have access to some of
[87:08] their private information which in this
[87:10] case we have to access the database the
[87:13] database is a place where it's another
[87:15] server and it's a place where you only
[87:17] store data you don't pretty much don't
[87:18] do anything else it has an API key
[87:21] called a connection string that lets
[87:23] anyone with a key do anything on the
[87:26] database so we never want to make a
[87:28] direct connection from the client to the
[87:30] database we want to do that connection
[87:31] from our web server to the the actual
[87:34] database so for instance if the user is
[87:37] asking for the dashboard page with uh
[87:39] his private information our app will
[87:42] process this information create all the
[87:45] react component with some empty data and
[87:48] then it's going to ask the database um
[87:50] we need this information about that user
[87:52] get those information put that
[87:54] information in the HTML page and send it
[87:57] back to the client this is pretty much
[87:59] how any database on the internet work
[88:02] there are two types of databases SQL for
[88:04] structured query language and nosql for
[88:07] non structured query language SQL
[88:10] databases um are databases that are more
[88:13] um as the name suggests structured where
[88:16] it's a little bit like a spreadsheet
[88:18] where you have columns um and headers
[88:21] where each data is labeled so every user
[88:24] has a name every user has an age and
[88:26] things like that we're going to go with
[88:28] a nosql where it's more flexible where
[88:31] the data is stored as um a little bit
[88:34] like JavaScript object but the big
[88:36] difference is that we don't necessarily
[88:38] need to have an a name an age and a
[88:40] hobby for each users we can have a user
[88:43] uh with Hobbies we can have a users with
[88:45] no hobbies and another value as a job
[88:48] for instance uh it's much more flexible
[88:51] and for this lesson we're going to
[88:52] choose mongodb as our database which is
[88:55] a nosql database it's one of the most
[88:58] popular nosql database in the world and
[89:00] you will see it's very simple now just a
[89:03] little bit of wording with mongodb uh
[89:06] what we call a document is a little
[89:08] piece of data for instance when we save
[89:10] a user in our database we would create a
[89:13] new document um it's written in Json
[89:16] format that we've studied before so you
[89:18] would have opening curly braces and
[89:20] closing curly braces and then you would
[89:22] have a set of key value the you can have
[89:24] different types um as we've studied
[89:26] before you can have a string you can
[89:27] have a number you can have a Boolean you
[89:29] can even have an array or an object when
[89:31] we have multiple documents with similar
[89:33] values it's called a collection for
[89:36] instance in our database we'll have a
[89:38] collection of users and you can create a
[89:40] collection for pretty much anything you
[89:42] want you can create a collection for um
[89:45] let's say you have a marketplace with uh
[89:47] jobs available you can create a
[89:48] collection for jobs um you have uh
[89:51] access to the Twitter database there
[89:53] might be a collection for a list of
[89:54] tweets um it goes on and on and then all
[89:58] the collections combined together form
[90:00] our database normally for any business
[90:02] you create you would have one database
[90:04] if you create a new business you would
[90:06] have a new database and from time to
[90:09] time if you want to test something on
[90:11] one of your app you can create two
[90:14] databases for one of your app so if you
[90:16] break the test database the production
[90:18] database is still okay for our database
[90:20] we are going to go with the mongodb
[90:22] atlas to host the database and they have
[90:25] a free plan so we're going to get uh
[90:28] advantage of that you're going to go on
[90:29] the website link and click try for free
[90:32] then create an account and I'll see you
[90:35] on the other side then you will end up
[90:37] on this page just fill the information
[90:39] with whatever feels right it doesn't
[90:41] really matter and then we're going to
[90:43] start creating our first database you
[90:45] want to go with the m0 type of database
[90:47] it is free you want to disable the
[90:49] preload sample data set we want an empty
[90:52] database and pick region of um somewhere
[90:55] in North America it is where the actual
[90:59] database will be and it's important to
[91:01] choose something in the North America
[91:03] because it's likely that it is where our
[91:05] web server the brain of our app will be
[91:08] also hosted so we want to minimize the
[91:11] distance between the two and then you
[91:12] can just create a deployment and you
[91:14] might have to uh face a little capture
[91:17] okay you will arrive on this page and to
[91:19] connect to your database also called a
[91:22] cluster you will need to set set up a
[91:24] username and a password then you can
[91:26] just create a database user so these
[91:29] users that I just created will have
[91:30] access to the database and you can say
[91:32] choose a connection method you can
[91:34] choose uh compath for now and we're just
[91:37] going to do this you're just going to
[91:39] copy that uh little complicated URL that
[91:42] we have here put it somewhere in a
[91:45] notepad or something we're going to need
[91:46] it later and then you can click done and
[91:49] you should be good to go we need to set
[91:51] up a little thing so on the left side go
[91:53] to the network access uh setting and
[91:56] then add an IP address and you will say
[91:58] allo access from anywhere and then
[92:01] confirm the fact that we allow any IP
[92:04] from the internet to access our database
[92:06] does not mean that they can do anything
[92:08] they still need to have credentials to
[92:10] access the database the IP verification
[92:13] thing is just an extra layer of security
[92:15] that we need to remove because if you go
[92:17] to a coffee shop for instance your IP
[92:19] will change and you will need to every
[92:21] time update your IP in the database and
[92:24] also later when we're going to deploy
[92:26] our application to production we will
[92:28] not be the one accessing the database it
[92:30] will be our web server that will access
[92:32] the database and we don't necessarily
[92:34] know the IP of the web server so it's
[92:36] much easier to allo any IP to access the
[92:39] database and just verify using the
[92:42] credentials okay then you can go back to
[92:44] the database and we're going to explore
[92:45] a little bit this part uh this thing
[92:48] called cluster zero is your actual uh
[92:51] cluster it's a little it's a physical
[92:53] physical space somewhere in uh Oregon in
[92:56] the US uh where you own a little part of
[92:59] a server and your database is hosted so
[93:02] let's uh browse The Collection see what
[93:04] we have in there and normally your
[93:06] database should be completely empty so
[93:08] what I'm going to do is I'm going to add
[93:10] my own data I'm I'm just doing it to
[93:12] show you you don't have to follow along
[93:13] with that uh the database name uh we're
[93:15] going to call it let's say production
[93:17] and I can create a collection in this
[93:19] database and let's say we're going to
[93:21] create a collection called jobs and here
[93:23] we go we are in the database called
[93:26] production we are in the collection of
[93:29] jobs we can create multiple Collections
[93:32] and we can also insert document in each
[93:33] of those collections I'm going to insert
[93:36] a job of the title entrepreneur in the
[93:39] database and here we go we just created
[93:42] our first document in our database
[93:45] you'll notice that we have this Dash ID
[93:48] equal um a long string of characters uh
[93:51] this is something that is proper to
[93:53] mongod that's how they identify unique
[93:55] documents that's what makes them super
[93:58] fast to search across millions of
[94:00] documents you don't really want to touch
[94:02] any of this it's added by default and
[94:04] we're going to use it later to retrieve
[94:06] uh and edit documents okay now we want
[94:08] to install something called compass
[94:10] mongodb compass so go to the link below
[94:13] and click download now here you will
[94:16] have to choose uh your type of platforms
[94:19] by default I think it knows which one
[94:20] you're using then click download uh
[94:22] follow the instruction to to install the
[94:24] application and once you're done open it
[94:26] and you will end up in a page that looks
[94:28] like this one we want to connect to our
[94:31] database for that you're going to pass
[94:33] the string we copied previously uh this
[94:37] thing here is basically the key the API
[94:39] key to your database anyone with this
[94:42] can do anything on your database that's
[94:43] why it has to remain private in mongodb
[94:46] it's called a connection string it
[94:48] always have this structure this little
[94:51] piece of text here then the username uh
[94:53] column and then the password ATS and
[94:57] then the URL to your database if you
[95:00] ever forget this link just go back to
[95:02]  Cloud uh click connect and then uh
[95:06] when you click Compass it will tell you
[95:08] the actual connection uh string and if
[95:11] you ever forget your password then in
[95:13] this case you would have to recreate a
[95:14] new user so for that you will go to
[95:17] database access and then you would edit
[95:20] the actual user so my user name is Mark
[95:23] Lon
[95:24] uh you would edit the password you
[95:25] cannot change it so you have to create a
[95:27] new one you can autogenerate one and
[95:29] then you would have a new password for
[95:30] the same username and you would copy
[95:32] past those details right here okay now
[95:34] we can connect so now we are connected
[95:36] on the database you'll see on the left
[95:38] we have different types of databases uh
[95:40] admin confing and local are stuff that
[95:42] are added by default you don't want to
[95:44] touch any of those and we're going to go
[95:46] to the production one since I already
[95:48] created The Collection jobs uh it's
[95:51] displayed here if you want to have fun
[95:52] you can create a one just to play around
[95:55] and I'm going to do this with you I'm
[95:56] going to say it's maybe users and then
[95:59] create collections I'm going to add a
[96:01] user I'm going to add those information
[96:04] to the user uh since it's using Json
[96:07] format you always want to write the key
[96:09] with quotes uh at the beginning and at
[96:12] the end and then you can write either uh
[96:14] text or uh numbers or booleans I'm going
[96:17] to click insert and now I have a new
[96:20] collection of users with one document
[96:23] and then I can do a bunch of things if I
[96:25] want to retrieve a user I will have to
[96:27] pass a query so I would have to write um
[96:30] curly braces and then the name of the
[96:33] value I want to filter so is
[96:34] entrepreneur column and then true and
[96:37] then when I press enter is only going to
[96:39] return documents where the uh key is
[96:42] entrepreneur is true and you can do a
[96:44] bunch of other really cool stuff like
[96:46] for instance I want to find users where
[96:49] the age is greater or equal to 30 so I
[96:52] can use this little syntax here and uh
[96:55] press enter and it's going return those
[96:57] users If instead a wrate 40 it's going
[96:59] to return uh no other users because I am
[97:02] not 408 and by double clicking on any
[97:05] value you can edit their
[97:08] value and you can also check the type of
[97:11] data that are stored in a database so
[97:14] the email is a string the age is int 32
[97:18] is an integer so kind like a number aoan
[97:22] etc etc and recently with the new boom
[97:25] of AI you have this generate query
[97:28] feature um you might have to log in to
[97:30] your account again so that it works um
[97:33] it's a quick overview here but basically
[97:35] you can speak in natural language and
[97:38] it's supposed to give you back the type
[97:40] of query you're supposed to run so let's
[97:42] try with this find users where age is
[97:45] lower than 40 and it generated this uh
[97:49] little query here and if I press f is
[97:52] going to query those user
[97:54] as we build our application we're going
[97:55] to go a little bit deeper about how to
[97:57] retrieve and how to edit data in the
[97:59] database for now you have a rough
[98:01] overview and you can visualize all the
[98:02] data with mongodb compass okay so now
[98:06] that we know how to edit our database
[98:08] with our hands and our eyes let's do
[98:10] this with code for that we'll need to
[98:12] add our connection string somewhere in
[98:14] our application and because it's a very
[98:16] sensitive data we want to do it in
[98:18] something called environment variable so
[98:21] the first thing you want to do as the
[98:22] root of your project you want to create
[98:23] a m. local and I'm going to put it in
[98:27] the root there we go and here you want
[98:29] to first name the variable I'm going to
[98:31] call this URI you can call it the
[98:35] way you want just make sure it's capital
[98:36] letters and there's no space if you want
[98:38] to add a space you need to add a dash
[98:41] then equal and then the value uh that we
[98:44] get previously from mongodb we can save
[98:46] the file and try to understand a little
[98:47] bit what is going on here first you'll
[98:50] notice that inside of the git ignore
[98:52] file there is this thing that says do
[98:54] environments. loal are basically ignored
[98:57] by git which mean that anything you put
[99:00] in here will never be pushed to get so
[99:02] it's a safe place to put everything that
[99:05] is secure in your app so the connection
[99:07] string uh your stripe API key to process
[99:09] payments your API key to send emails uh
[99:12] we'll study that later but this is the
[99:13] place where you're going to put every
[99:15] sensitive information you'll also notice
[99:17] that we're not writing JavaScript we're
[99:19] not importing anything not exporting
[99:22] anything um it's it's a very different
[99:24] structure than we've studied before it's
[99:26] something very specific to nodejs okay
[99:29] to understand how to get this value in
[99:31] the code so we can uh query our database
[99:33] uh I'm going to log the value of it
[99:37] process. do the name of your variable
[99:40] and if you do this and look at the
[99:42] console you will see that I actually get
[99:44] the value right here is because we have
[99:46] this script running on the computer npn
[99:49] run Dev and it's basically looking at
[99:51] any environment uh file so a file that
[99:54] starts with do NV EnV and then every uh
[99:58] variable that he finds there is going to
[100:00] add it inside of the process.
[100:03] environment object and so if you want to
[100:05] call it in the code you would have to do
[100:06] process. do the name of the variable
[100:10] okay and just as a security uh thing
[100:12] here we are doing this command inside of
[100:15] a react server component so this is
[100:17] going to be logged in the S side of the
[100:19] server and not available on the client
[100:21] but if you reference the variable
[100:23] somewhere in the code and you put it in
[100:25] here you'll see that we can actually see
[100:27] the variable the fact that this variable
[100:29] is inside of this do environment file uh
[100:33] doesn't mean it's invisible to users it
[100:35] just mean that it's not going to be sent
[100:37] on GitHub and so it's staying on your
[100:39] local machine okay so I'm going to
[100:41] delete that part because this is pretty
[100:43] dangerous to do and um let's recap
[100:46] really quick so this uh do environment
[100:48] file is the place where you put every
[100:49] sensitive information you have in your
[100:51] app there are two main advant ages the
[100:53] first one is that it's the file is
[100:55] staying on your local machine it's not
[100:57] going to be sent to GitHub and the
[100:59] second is that we can have different
[101:00] values based on the environment our
[101:02] application is running let me show you
[101:04] what I mean by this here we are working
[101:07] on our computer we are building new
[101:09] features we're testing things so we want
[101:11] to make sure we work on a separate
[101:13] database as the one that will be used by
[101:15] our customers so these connection string
[101:17] here is going to connect to the cluster
[101:19] and if we had slash and then a name
[101:21] whatever name you want after I usually
[101:23] called M Dev and by doing this we're
[101:25] going to connect specifically on the dev
[101:27] database on the cluster and in
[101:30] production where our app is running on
[101:31] versal instead of having Dev we can just
[101:33] say prod and so that we connect to two
[101:36] different databases with the exact same
[101:38] variable name so for now I'm going to
[101:41] name this one de you can call it
[101:42] development you can call it the way you
[101:44] want and I'm going to use that thing
[101:46] here I'm going to go to my project
[101:48] unversal in the settings part there is
[101:50] something called environment variable
[101:52] and this this is the equivalent of your
[101:55] uh environment file on your local
[101:57] machine but this one is hosted on versal
[101:59] and here is where you would add your
[102:01] environment variable the key is what's
[102:03] before the equal sign and the value is
[102:06] what is after so you can copy past the
[102:08] value and instead of having the SL Dev
[102:10] we're going to say
[102:11] SLR and then when you save the project
[102:14] now this variable will be available
[102:16] inside of your project hosting on versal
[102:19] and so now when we are working on our
[102:21] computer this uh function that will
[102:23] connect to the database is going to use
[102:26] the mongodb URI we have in the
[102:28] environment. local because we are on our
[102:30] computer and when it's going to be
[102:32] deployed in production on versal it's
[102:34] going to use the value that we just set
[102:36] up in versal so that we can keep the
[102:38] exact same code and have two different
[102:40] values for the same variable and you
[102:42] will see that it's common for developers
[102:43] to work on one database when you are
[102:45] coding and to work on another database
[102:47] for the production values a quick note
[102:49] on environment variables you might have
[102:52] heard in the past API Keys API Keys API
[102:55] Keys what are API Keys usually an API
[102:58] key is like a unique identifier so that
[103:01] you as a developer can identify yourself
[103:03] for the service you're using for
[103:05] instance let's say you want to use the
[103:06] chpt uh like open AI API when you sign
[103:09] up they will give you an API key and you
[103:11] will use that as a developer when you
[103:13] make request to the open AI API those
[103:16] are extremely private you always want to
[103:17] keep it for you and the envirment
[103:20] variable file is usually a good place to
[103:22] put all of your API Keys okay now we
[103:25] need to connect to our database in the
[103:27] code for that we'll need a little
[103:28] package called mongodb so just pop up
[103:31] your terminal and stop the current
[103:33] process you can press uh contrl C or
[103:36] command C and run npm e short for
[103:39] installed mongod DB press enter and when
[103:43] the packaging is installed uh let's
[103:45] restart the development server so npn
[103:47] run Dev and we're good to go now we need
[103:50] to customize the bridge to pass for
[103:52] instance our connection string um so we
[103:55] will will customize a function so we can
[103:58] reuse that function everywhere in the
[104:00] code uh so we can update our database
[104:02] anytime it's a good thing to separate
[104:05] different type of functions in your code
[104:08] um so what we're going to do we're going
[104:09] to create a new folder inside of the
[104:11] root directory called Libs short for
[104:14] Library some people call it utilities uh
[104:17] you can call it the way you want I just
[104:19] like the word lips and then we're going
[104:20] to create a DJs file this will be
[104:24] the file responsible uh to connect with
[104:27] our database and instead of writing some
[104:29] very boring code uh let's use the code
[104:31] base I created for you just uh use the
[104:33] link below uh you will end up on this
[104:36] page you can just copy and pass the code
[104:40] in JS okay so the reason we're
[104:42] copy pasting this code instead of
[104:44] writing it ourselves is because it's
[104:46] very Advanced uh because it's very
[104:48] boring and also because you will never
[104:50] touch this code it's only specific to
[104:52] this project
[104:53] once we've created this we'll never
[104:54] touch it again instead I'm going to
[104:56] break down a few pieces for you so first
[104:58] at the top we import the mongod DB
[105:01] client so the bridge to mongodb from the
[105:04] package we just installed then we have
[105:06] this if condition so the process.
[105:09] environment dot is that things that let
[105:12] us access environment variable on our
[105:14] computer the URI is the one that
[105:17] we have in the environment. local right
[105:20] here and then when we when we try to
[105:23] evaluate if and then a variable is going
[105:25] to return true if the variable exists
[105:28] it's going to return false if it doesn't
[105:30] exist and the exclamation mark is going
[105:32] to reverse that value so if this does
[105:35] not exist if we did not add the value
[105:37] somewhere in our project then this is
[105:40] going to return false and we're going to
[105:42] reverse it with the exclamation mark
[105:45] which means this becomes true and then
[105:47] we enter this line and then we're going
[105:49] to throw an error we're going to go over
[105:51] that uh in the next part of the but
[105:53] basically this is going to make the code
[105:55] crash so that if you forget to add this
[105:58] uh to your project uh the code the app
[106:00] here will uh show you a big error
[106:02] message then we do const URI equal uh
[106:06] the name of the variable so we're just
[106:08] reassigning the value of this uh mongodb
[106:11] URI inside of a shorter uh variable
[106:14] something the name is just a little bit
[106:16] more friendly then we have another
[106:18] variable which is a JavaScript object
[106:21] with some options um this is just how do
[106:24] we connect to the database this is some
[106:26] like really advanced stuff and then we
[106:28] create those two variables uh with the
[106:31] let keyword the let keyword just mean
[106:34] that uh later uh in this file we'll
[106:36] probably update the variable give it
[106:38] different values it's not a constant and
[106:41] then we have a big if else statement the
[106:44] if else statement is going to check if
[106:46] that is true um the process. environment
[106:49] is what we've talked about earlier the
[106:52] node - EnV is a very popular environment
[106:56] variable it's been given uh by default
[106:59] when we run the project with nextjs is
[107:02] going to set these to the actual uh
[107:04] environment and the environment remember
[107:06] it could be either development on your
[107:08] computer or production on the web
[107:11] machine the web server somewhere on the
[107:13] internet so what this line does is
[107:16] basically is checking if we are running
[107:18] the code on your computer or on the
[107:20] online server and the reason we do that
[107:23] is because on our computer it's a little
[107:25] bit different how things are handled uh
[107:27] as you're editing code and you save and
[107:30] it's refresh the entire code um it's a
[107:32] bit different from the server where
[107:34] instead we're just going to deploy the
[107:35] code once and it's going to be running
[107:37] forever this is very advance but what it
[107:40] says is basically create a connection
[107:42] with a database and if we save the file
[107:45] and then we refresh everything keep the
[107:47] connection open instead of killing the
[107:50] connection and reopening one it's just a
[107:51] matter of performance again this is very
[107:53] Advanced uh you really don't want to get
[107:55] into this this is not important the only
[107:58] important line here is this one where we
[108:01] have the clients the variable we
[108:02] declared previously and equal to new
[108:05] mongodb clients the mongodb client is
[108:08] what we import from mongodb at the top
[108:10] this is the driver that let us connect
[108:12] and we give it two things we give it the
[108:14] URI which is this thing so basically we
[108:17] give it the connection string the keys
[108:19] to our database and we give it uh an
[108:21] object of options with a few uh
[108:24] parameters which in this in our case it
[108:26] doesn't really matter so this thing is
[108:28] basically a bridge to let us connect to
[108:31] our database using JavaScript and that's
[108:34] why we have the line here client.
[108:36] connect and then we have this line
[108:38] export default client promise and so
[108:40] this uh variable here is equal to
[108:43] client. connect so we exporting a little
[108:46] JavaScript object that is connecting to
[108:48] the database so now the thing that
[108:50] matters is how do we use it to connect
[108:52] to the datab base uh in our code you can
[108:55] save the file and close it because we'll
[108:56] never touch it again and then in our
[108:59] page.js it this is just to show you this
[109:02] is not going to work right now but this
[109:03] is just to show you a glimpse it's as
[109:05] simple as this first we need to import
[109:08] the client promise that object we just
[109:11] created that has the keys to our
[109:12] database we import it from the lebs uh
[109:15] folder inside of the JS file and
[109:18] then um we we say something like um do
[109:22] DB to say we want to connect to a
[109:24] database and then do connection for the
[109:26] connection we want to check and then we
[109:28] can have something like do find with
[109:30] some parameters to do exactly the same
[109:32] things we were doing before all right so
[109:35] having a database is nice but if we
[109:37] could actually use the database it's
[109:39] even better and for that we're going to
[109:40] authenticate user so whenever we talk
[109:42] about login sign in sign up sign out log
[109:45] out whatever uh this is what roughly
[109:47] authenticating users mean so after this
[109:50] section users will be able to create an
[109:52] account we're going to save this user
[109:54] information like name emails inside of
[109:56] our database and then we will be able to
[109:59] check if the person is actually a user
[110:01] of our application to let some people do
[110:04] some actions like access their private
[110:06] dashboard or some people not access the
[110:08] dashboard because they have not yet
[110:10] created an account user authentication
[110:12] is something that is extremely popular
[110:14] on the internet so there are already
[110:15] bunch of developers who build open
[110:17] source project that are working really
[110:19] well and for that we're going to use one
[110:20] called oath. JS if you search o DS on
[110:23] the internet you will find this website
[110:25] you can click get started and follow the
[110:27] tutorial for whatever framework you're
[110:29] using in our case we're using nextjs so
[110:32] first you need to install uh next oath
[110:34] at beta and then you need to run this
[110:36] little common it's basically going to
[110:37] give you a little token like a unique
[110:39] identifier that we're going to use later
[110:41] to Hash some information to encrypt our
[110:44] information it's not a big deal you'll
[110:46] see and then it'll tell you a few things
[110:48] you need to do if you want to follow
[110:49] along with me and make sure you have all
[110:50] the steps completed um in your SL API
[110:53] folder you should have created an O
[110:55] folder and then you should have created
[110:57] this like a little bit complex do do do
[110:59] dot next o folder and inside you have a
[111:02] route. JS and you should have this code
[111:05] inside this means OJs is going to create
[111:08] a set of API endpoints for you so that
[111:11] you can use that to authenticate users
[111:13] you should also have add your uh unique
[111:16] um secret key that you generated earlier
[111:18] in the environment. loo and you should
[111:20] have at the root of your project an
[111:22] oath. JS file this is basically like the
[111:25] control center of OJs here you have a
[111:28] list of all your uh providers for now it
[111:30] should be empty the providers we're
[111:32] going to cover that later is basically
[111:33] how our users are going to uh log to our
[111:36] app so that could be using email like
[111:38] magic links or email and password or
[111:40] they can be using social providers like
[111:42] Google Facebook GitHub and then we
[111:44] should have an adapter an adapter is
[111:46] where we are going to save the user
[111:48] information in this case we're using the
[111:49] mongodb adapter because we are going to
[111:51] save the user information
[111:53] inside of our database all right now
[111:54] your project is set up it's important to
[111:56] understand roughly how user
[111:57] authentification work on the Internet
[111:59] it's it's pretty much the same thing
[112:01] whatever app you're using so for that
[112:03] let me show you a quick video of how
[112:05] everything works so when our client
[112:07] visitors of our website are going to the
[112:09] loging page of our site our server is
[112:11] going to give them back a signin HTML
[112:14] page this page will will have several
[112:17] options to login um email Facebook uh
[112:20] Google uh anything will set up for now
[112:22] it's it's empty because we haven't
[112:23] configured anything in OJs the type of
[112:27] login we choose is called a provider so
[112:29] we can have a provider for Google we can
[112:31] have a provider for Facebook for
[112:33] instance on this page the user can click
[112:36] on a type of logging they want or enter
[112:38] their emails and password for instance
[112:41] this is going to make a post request to
[112:43] our /
[112:44] apios signin and point and it's going to
[112:47] pass some parameters so if they sign up
[112:49] with an email it's going to send that
[112:51] email if they trying to sign up with
[112:53] Google is going to say type Google and
[112:55] our server is going to receive that
[112:58] request and going to process it if the
[112:59] user picked a social login for instance
[113:01] login with Facebook then our server is
[113:04] going to communicate with Facebook to
[113:05] make sure that the user actually exists
[113:08] and then our server is going to
[113:09] communicate our with our database so
[113:11] mongodb first is going to check if the
[113:13] person actually exists and for that
[113:15] we're going to use emails so wherever a
[113:17] user sign up with we need an email so if
[113:20] it's a email and password we have the
[113:22] email if it's a magic link uh where
[113:25] people receive an email and then they
[113:27] click a login link to be logged on the
[113:29] app then we also have the email and if
[113:31] the person use a social provider like
[113:33] Google or Facebook both of those
[113:35] services will give us the person email
[113:37] so that in our database OJs can check if
[113:39] the person exists if the person doesn't
[113:41] exist then uh OJs is going to create a
[113:44] new documents inside of our database so
[113:46] we store this
[113:47] information and then OJs is going to
[113:50] create a little session for the user the
[113:52] session is just another document that we
[113:54] will store in our database it's a very
[113:57] simple document that has a unique token
[113:59] so unique identifier so that we can
[114:01] easily retrieve the user it also has an
[114:04] expiry date which is usually 30 days
[114:07] that's why sometimes when you log in to
[114:08] a service after 30 days they ask you to
[114:10] log in again and we'll use this session
[114:13] in order to verify that the user
[114:14] actually has access so our server is
[114:17] going to send back this session to our
[114:19] client the visitor and he going to put
[114:21] the session inside of a cookie we're
[114:24] going to study cookies in the next
[114:26] lesson the purpose of putting the
[114:27] session token inside of the cookies is
[114:29] that first it's persistent so if the
[114:31] user close the tab and uh open a new tab
[114:35] to log to our app the cookies is still
[114:37] there and the cookie will be sent to
[114:39] every request the person makes to our
[114:41] server so that we can easily identify
[114:43] them and the user will be redirected
[114:46] usually to a dashboard page or an app
[114:48] page and after this process every time
[114:50] the user will make a request to our
[114:52] server whether to get a new page or to
[114:55] um call an API endpoint the cookie will
[114:58] automatically be sent so that's our
[115:00] server will receive the cookie and it
[115:02] can easily check if the cookie that
[115:04] contains the session token is actually
[115:06] in the database and it's not expired we
[115:08] talked about cookies what are cookies
[115:10] they are small piece of data that are
[115:12] sent by web servers like your API for
[115:15] instance to an internet browser and then
[115:18] your internet browser is going to store
[115:19] this data somewhere on your computer or
[115:21] on your phone C cookies are used
[115:23] everywhere in the internet they're used
[115:25] for things like tracking analytics
[115:27] they're used for user preference
[115:29] sometimes you see like a model on the
[115:30] page and you say I don't want to see
[115:32] this anymore and then it's going to set
[115:34] a cookie that says the user doesn't want
[115:35] to see this anymore so never show it
[115:37] again in our case we're using cookies in
[115:39] order to store the session token data so
[115:42] that we know whether the user has access
[115:43] to our application or not let me show
[115:45] you this example this is a website that
[115:47] I built that is also using OJs if you
[115:49] want to see your cookie you can just
[115:51] open the developer console and go to the
[115:53] application Tab and under the cookie you
[115:56] will normally see the domain name of
[115:58] your site and if you click it you will
[115:59] see all the cookies that are being
[116:01] stored by this website and if I click on
[116:03] the secure OJs session token you'll see
[116:06] that the value is long sequence of
[116:08] characters so that now every time I make
[116:10] a request on the site whether I navigate
[116:12] to a new page or ask an API endpoint I'm
[116:16] also sending this little uh piece of
[116:18] data to uh the inso website and on the
[116:21] back end when the to receive the request
[116:23] from the person they also receive the
[116:25] cookie value and they can decide uh
[116:27] anything they want they can check if the
[116:29] cookie exist if they can check if the
[116:30] cookie is not expired and they can
[116:33] perform some actions like if the cookie
[116:35] is expired ask the user to log in again
[116:37] if the Cookie doesn't exist then we have
[116:39] the user to sign up uh there are a bunch
[116:41] of actions that we'll cover later okay
[116:43] now let's be practical and talk about
[116:45] some use cases of authentification
[116:47] inside of our app things like signing
[116:49] out signing up protected Pages private
[116:51] API Etc okay so this is one of my nextjs
[116:54] projects uh not the one I showed you
[116:56] earlier but it works exactly the same
[116:58] way I have the same system for all of my
[117:00] apps so here um when I navigate to my
[117:03] domain name or local /
[117:06] apios SL signin users will end up on
[117:09] this page where they will have multiple
[117:11] options to sign in to my applications
[117:14] this is done automatically for me by OJs
[117:17] I have nothing to do besides sending up
[117:19] the providers information so here I have
[117:21] created a provider for Google I have
[117:23] created a provider for email we're going
[117:24] to do that later this is what you set up
[117:26] here in this providers array in .js file
[117:29] they have tutorials to help you set up
[117:31] any kinds of providers you want so you
[117:33] want to check out their documentation
[117:35] once they sign up or sign in here this
[117:37] information the information they give me
[117:39] here will be saved in the database I
[117:40] will get at least their emails and if
[117:42] they sign up with Google I'll also get
[117:44] their names and the profile picture they
[117:46] use for their Google accounts so for
[117:48] instance here if I add my email and I
[117:50] stand up with uh email then because I am
[117:53] using the mongodb adapter from OJs with
[117:56] just this line of code in my database I
[117:59] am going to see the user Mark gmail.com
[118:02] created it's going to add a unique
[118:04] identifier field is also going toh check
[118:06] if I verify my email if I click the link
[118:09] inside of my email we're going to cover
[118:10] that later so I have this information
[118:12] saved in my database then what I do I
[118:14] redirect people after they successfully
[118:15] sign up to a SL dashboard page this is a
[118:19] private and protected page only for
[118:21] people who sign up and the code is
[118:23] actually very simple what you see here
[118:25] on the screen on the right side is
[118:26] basically just this like little uh jsx
[118:29] code right here and no matter which user
[118:32] is going to my app it is the exact same
[118:33] code it's basically like a template that
[118:35] I fill with the data that was generated
[118:37] by the user so this is the page.js file
[118:40] you see here so this is the typical
[118:42] nextjs file I export this react
[118:44] components I return some GSX and here uh
[118:47] there is a function that I created so
[118:49] get user this function right here that
[118:51] is executed so whenever someone go to
[118:53] my/ dashboard page this function is
[118:56] executed and this function first call
[118:58] the oath function that is created by OJs
[119:01] with this single line of code what OJs
[119:03] is going to do in the background is
[119:05] going to check if the person has the
[119:07] right cookies so if the person
[119:08] successfully signed up to my app and if
[119:10] that's the case it's going to create a
[119:12] little session object with some
[119:13] information but if the session does not
[119:16] exist and the person has never actually
[119:18] created an account for my application
[119:20] then they are going to be redirected to
[119:22] the homepage of my website so for
[119:25] instance now if I go uh if I open an
[119:27] incognito tab where I have no cookies
[119:29] it's like I am a new user and if I go to
[119:31] the SL dashboard press enter and boom I
[119:33] am redirected to the homepage of my site
[119:36] and with just those uh three lines of
[119:38] code I am able to uh either show
[119:40] information to the right people who sign
[119:41] up to my service or don't show anything
[119:43] at all and because this is a react
[119:45] server component uh this is a safe place
[119:48] to do all the checkup verify that the
[119:50] user is authenticated so that's uh
[119:52] people who are not will never actually
[119:53] see the content inside okay now let's
[119:55] assume the person has created as um an
[119:58] account so they are authenticated they
[119:59] have an actual session object uh OJs is
[120:02] going to populate the session object
[120:04] with some information so if I go to
[120:06] session. user. ID this is the exact same
[120:10] thing as this ID here inside of my
[120:13] database and that way I can simply
[120:15] retrieve the user from my database using
[120:18] the session of the user the actual
[120:21] authentification St of the user and I
[120:23] can find the right information about the
[120:25] user in this case I find the user boards
[120:28] those little uh cards here um so that
[120:31] anyone who goes to my app who has
[120:33] already signed up will see different
[120:34] information because everyone will have a
[120:36] different uh session user ID and so I
[120:38] will retrieve only the information about
[120:40] the actual user who is now browsing my
[120:42] site and I'm going to populate the
[120:44] content the visual part of my app with
[120:47] what I retrieve from the database that I
[120:49] got from the unique user session ID this
[120:51] is how you make a page private in your
[120:54] application now let's say that I want to
[120:55] protect an API endpoint like let's say
[120:58] this post function inside of/ API board
[121:01] then I would do the exact same thing I
[121:03] would retrieve the session and if the
[121:05] session does not exist then I will just
[121:08] return uh an an error like a an HTTP
[121:11] response with a status code of 401 and
[121:14] that's pretty much how the entire
[121:15] authentification system work how you
[121:17] make uh protect pages and private apis
[121:20] endpoint for your users how you you
[121:22] create one page that can display
[121:23] different kinds of information based on
[121:25] the actual users who signed up and how
[121:27] you reject people from your app if you
[121:29] don't want them uh to visualize or see
[121:32] some information all right now it is
[121:34] very likely that after authenticating
[121:36] users you will need to send emails so
[121:38] there are two types of emails in the
[121:40] world transactional and marketing emails
[121:42] the marketing emails is the one usually
[121:44] you don't like to receive as a person uh
[121:46] they are U companies who broadcast one
[121:48] message to thousands of users like a
[121:51] discount for a product or a Black Friday
[121:53] deal and the ones we are interested in
[121:54] as developers are the transactional
[121:56] emails so we can send magic links when
[121:58] people want to log in to our service for
[122:01] that I'm going to leave you with a
[122:02] little preview of my Cod fast course
[122:04] where we're going to select a provider a
[122:06] service to send those emails and how to
[122:08] set up your DNS record in order for uh
[122:11] your domain to be able to send those
[122:13] emails there are many providers out
[122:15] there there is mail gun which is very
[122:17] famous and there is a recent which is a
[122:20] fairly new but it's very fr and they
[122:22] have a free plan so we're going to go
[122:24] with this one click the button get
[122:25] started and create an account once you
[122:27] signed up you will go to The Domain part
[122:30] and click add a domain here you will
[122:33] enter your domain name and we're going
[122:35] to send email from a sub doain so I'm
[122:37] going to write something like recent.
[122:39] cfast sas.com it's important to use a
[122:42] subdomain because if someone managed to
[122:45] hike your system and send uh thousands
[122:47] of emails to uh people who don't even
[122:49] exist with your root domain it might
[122:52] damage your domain reputation so instead
[122:54] we're going to to use a subdomain so
[122:57] that uh if something goes wrong it's
[122:59] just the subdomain reputation that is
[123:00] being impacted you can say whatever uh I
[123:03] usually use the name of the service I'm
[123:05] using you can say email you can say mail
[123:07] you can just say e this is totally up to
[123:09] you and then keep North Virginia for the
[123:11] location and then add the domain resent
[123:14] is going to send emails on our behalf so
[123:16] we need to verify that we own this
[123:18] actual domain So Below there is a list
[123:20] of all the D records we need to add so
[123:23] first there is an MX record with uh
[123:26] send. your subdomain with this value you
[123:29] can copy those and go back to your name
[123:31] chip account or whatever you use like
[123:33] GoDaddy uh for uh your domain name and
[123:36] then uh in the DNS panel that we've seen
[123:39] earlier the advanced DNS tab you will be
[123:42] able to add those records in name chip
[123:45] there is no option for MX record here is
[123:47] just a little bit below in that category
[123:50] in the mail settings instead of email
[123:52] forwarding you can go and choose custom
[123:54] MX and then you can add your own custom
[123:57] MX records so then I add exactly what
[124:00] they ask me the host the value and the
[124:02] priority of 10 and I can save the
[124:04] changes then I can go back to resent and
[124:06] do the exact same thing for all the
[124:08] records so send. resend as a text record
[124:10] with this value so I can go back here
[124:13] and find the txt records and I can save
[124:16] this one and I'll do again for this
[124:19] other one right here add a new record
[124:22] txt and press save and the final one the
[124:26] DeMark record which is another txt
[124:29] records and so I'm going to go here
[124:31] txt and press
[124:34] save and the reason we're using those
[124:37] text records which are commonly known in
[124:39] the email word as dkim SPF and DeMark
[124:43] records is to tell um email providers
[124:46] like Gmail that we are legit so that our
[124:49] emails don't end up in spam okay so now
[124:52] that we've added all the records we can
[124:54] verify the DNS records it could take a
[124:56] while uh it could take sometimes up to a
[124:58] few hours uh DNS records are pretty slow
[125:01] to update um just make sure after an
[125:03] hour or two if it's still not verified
[125:05] to make sure that you've entered the
[125:07] exact same values as they show here
[125:09] since my domain is verified now I'm
[125:11] going to go to the API Keys section and
[125:13] I'm going to create an API key you would
[125:15] normally call it the name of your
[125:17] project so for mine it will be code fast
[125:19] SAS and then for the access uh select
[125:21] sending access and then the domain we
[125:23] just added and then click add and copy
[125:27] that key then go back to the code editor
[125:29] and the file. m. local add a little key
[125:33] called recent Das key or whatever you
[125:36] want but just make sure you use the word
[125:37] recent so you remember what it is and
[125:40] then equal and then add the key right
[125:42] here this little sequence of character
[125:44] is called an API key is basically the
[125:46] key to your resend account so that you
[125:48] can send emails from your code and make
[125:50] sure you never share this key with
[125:52] anyone otherwise uh they can send email
[125:54] on your behalf and you can save the file
[125:56] and close it and now you're ready to
[125:58] send any emails to anyone now just to
[126:00] show you an example of how you would do
[126:02] so in the recent documentation there is
[126:04] something called API reference and you
[126:06] can check they have something called
[126:08] send email right here and they show you
[126:11] for a node js project how to send an
[126:13] email and it's as simple as this you
[126:15] will have to download their Library so
[126:17] npm installed recent and then you import
[126:20] their object then you give the API key
[126:23] we just created to that object so we
[126:25] have a client or a bridge to send email
[126:28] and then with just this lines of code
[126:30] you can send an email to pretty much
[126:32] anyone every developers SL business
[126:34] owners have different needs on emails
[126:36] but I wanted to show you a quick example
[126:37] of how I use emails for some of my apps
[126:40] so uh here on the left this is a file
[126:42] where whenever someone purchase one of
[126:45] my product this code is being executed
[126:48] there is a part where I send the
[126:49] customer an email like a welcome email
[126:52] to send them a unique link so that they
[126:54] can sign up to the app and also how to
[126:56] get started and this uh this here is a
[126:58] function that I created myself called
[127:00] send email uh this is what you see on
[127:02] the right side and so in this send email
[127:05] function I am calling the typical recent
[127:08] API we just watched earlier where I pass
[127:10] from to subject text HTML and a bunch of
[127:13] other things and I export this function
[127:15] send email from this file so that
[127:17] anywhere in my app I can just do await
[127:19] send email the name of the the EMA email
[127:21] of the person uh the subject line and
[127:23] the content inside of the email and I
[127:25] can send literally an email to anyone
[127:27] and the part you're probably going to
[127:28] need emails the most is when people try
[127:31] to sign in using emails they're supposed
[127:33] to receive a magic link when they click
[127:35] on this button and for that I am using
[127:37] the provider the recent Provider from uh
[127:40] OJs our o user authentification uh
[127:43] Library we talked about earlier and with
[127:45] just this single line of code here where
[127:47] I give OJs the access to my uh recent
[127:50] account through the API key they are
[127:53] able to send an email to anyone who
[127:56] input their emails here that looks like
[127:58] this uh where if people click they will
[128:01] then be uh logged in authenticated into
[128:03] our applications in this case you don't
[128:05] even have to customize the emails you
[128:07] just have to have this line of code
[128:09] inside of your OJs file and uh OJs is
[128:12] going to do all the work of crafting the
[128:14] emails preparing the unique link for
[128:16] your customers to click on and all you
[128:18] have to do is to give OJs your recent
[128:20] API ke all right now we are entering the
[128:23] most exciting part of the course the
[128:25] part where we're going to set up a
[128:27] little pricing system for our
[128:29] application to charge money on the
[128:30] internet you will need a payment
[128:32] provider uh the two ones that are pretty
[128:35] famous at the moment are stripe and
[128:37] lemon squeezy I personally use stripe
[128:40] but it's not available for every
[128:41] countries out there for instance if
[128:42] you're watching from India uh you might
[128:44] have to settle for lemon squeezy because
[128:47] they will let you open a lemon squeezy
[128:49] account before we talk about the
[128:50] Practical things I want to give you a
[128:52] few unsolicited piece of advice the
[128:55] first one is that in order to open a
[128:57] stripe account you will need to have a
[128:59] business that could be a freelancer
[129:01] business that could be a legit uh
[129:02] company like an LLC or something but you
[129:04] will need a business now your business
[129:06] does not have to be in the country
[129:08] you're living in you can have an
[129:09] offshore company be careful with that
[129:12] because um it is very tempting to open a
[129:14] 0% tax offshore company in Delaware USA
[129:18] I've seen lots of people doing that but
[129:20] you have to be extremely PR cautious
[129:21] with what your countries allows you to
[129:23] do or not because in some countries you
[129:25] would have a double taxation so you're
[129:27] going to be taxed 0% of your us company
[129:30] but you will be taxed by your country on
[129:31] your US income so be careful with these
[129:33] kind of things you want to make sure you
[129:35] always ask chpt uh where you leave what
[129:38] kind of business you're running what
[129:39] kind of company you intend to open and
[129:41] ask jgpt what are the rules what is the
[129:42] double taxation saying about that uh
[129:44] make sure you do things really properly
[129:47] from the day Zero because you really
[129:49] don't want to go into legal issu
[129:51] the number one reason we're doing this
[129:53] internet thing is to have as most
[129:56] Freedom as we can and there's nothing
[129:58] worse than being engage in some legal
[130:00] stuff so do things properly from Day
[130:03] Zero okay and another question I get
[130:05] asked all the time is uh how do I handle
[130:07] my strap accounts with the company so I
[130:09] have one company that hold all the strap
[130:12] accounts for all of my businesses so in
[130:14] my case I have multiple businesses and
[130:16] for each business I have one stripe
[130:18] account per business that is under the
[130:20] company name and one final piece of
[130:22] advice about pricing for your software
[130:25] your digital product uh you always want
[130:27] to price a little higher than what you
[130:29] think is right because it's a tendency I
[130:31] see in developers to underprice
[130:33] themselves uh you're amazing you're
[130:35] doing uh something that most people
[130:37] don't you're shipping something on the
[130:38] Internet your time deserves to be paid
[130:40] well so make sure you price your product
[130:42] well uh pricing is marketing those are
[130:45] two are really correlated I made a video
[130:47] an entire video uh dedicated to pricing
[130:49] I add a link into the description if you
[130:51] want to watch it that's going to help
[130:52] you uh choose your pricing system okay
[130:55] now before we start coding our checkout
[130:57] and subscription system we need to
[130:59] understand how stripe or demon cuzi is
[131:01] going to integrate with our software
[131:04] both of the payment processing platforms
[131:05] are going to give us some kind of like
[131:07] user interface elements such as like a
[131:10] checkout page where users can input
[131:12] emails and credit card Etc that we're
[131:15] going to show to our clients this page
[131:17] is going to communicate directly with a
[131:19] payment processor which is going to
[131:21] process the request for instance charge
[131:23] the credit card and create a
[131:25] subscription and the payment processor
[131:27] is going to send us back some events to
[131:29] confirm what just happened something
[131:31] like uh that user just pay the invoice
[131:34] we're going to tell the payment
[131:35] processor to send those events on our
[131:37] API so we can update our database and do
[131:40] things like granting or removing access
[131:42] to the product for a specific user we
[131:44] can also update the user information Etc
[131:47] and in the background our payment
[131:49] processor is also going to execute some
[131:51] other tasks so for instance if we set up
[131:53] a subscription at the end of each month
[131:55] the payment processor is going to try to
[131:57] charge that credit card of user again
[131:59] without us having to do anything now
[132:02] let's dig a little bit deeper inside of
[132:03] the payment processor Solutions those
[132:06] again it's either stripe or Leoni both
[132:08] are working in similar fashion there are
[132:10] two main categories of things we will
[132:12] touch the first one is the product so if
[132:14] we compare your software with a library
[132:17] of books a product could be a book it's
[132:20] the item or the service you sell and the
[132:22] price SLV variance the price is the word
[132:25] in stripe and the variance is the word
[132:27] in lemon squeezy is like a version of
[132:29] your product for instance a PDF book uh
[132:32] a Kindle version of your book a physical
[132:34] version of your book you get it and the
[132:36] other part is the web hook events those
[132:39] are notification or messages whatever we
[132:41] want to call them that are sent from the
[132:43] payment processor back to our server our
[132:45] API to let us know about some
[132:48] information that happens for instance a
[132:50] customer just pay the invoice or the
[132:52] last payment of that customer failed etc
[132:55] etc okay so no matter if you are running
[132:57] a subscription business a onetime
[133:00] payment digital product or a advance SAS
[133:02] with meted usage the payment flow is
[133:04] always very similar there's a part where
[133:06] users can interact with uh your front
[133:09] end so like let's say they wants toh
[133:11] create a checkout or they wants to
[133:13] access their customer protal to uh
[133:15] update their building information cancel
[133:16] a subscription download an invoice Etc
[133:19] and there's another part called the web
[133:21] book where it's more like invisible
[133:22] things happening in the background we're
[133:24] we're going to cover that later so first
[133:25] the part where people can interact with
[133:27] your system for instance like creating a
[133:29] checkout uh for one of your products
[133:31] they will be able to click a button this
[133:32] click will return a URL for uh in my
[133:35] case stripe and then here uh people will
[133:37] be able to input their credit cards and
[133:39] subscribe to a plan that you have on for
[133:41] your software or just buy a digital
[133:43] product for instance this is usually
[133:44] done in two part there's the front end
[133:46] and the back end the first thing you
[133:47] will need to do is to create a product
[133:49] in stripe in the of the software I just
[133:52] showed you I have a bunch of plans so I
[133:53] have a bunch of products but you could
[133:55] have technically just one and then uh
[133:56] this is the code of what I just showed
[133:58] you one more time um this is a simple
[134:00] button so you can see it's a it's a
[134:02] react component that when people click
[134:04] it's going to trigger this function and
[134:06] this function is basically going to make
[134:07] an a call to my API and the API endpoint
[134:11] is right here on the right side uh here
[134:13] first I need to check if the user is
[134:14] authenticated because I don't let people
[134:16] who are not authenticated to my app make
[134:18] a payment and then I'm going to use the
[134:20] stri API to create a checkout uh in the
[134:23] stripe API call I give stripe the price
[134:25] ID of the product customers want to
[134:27] subscribe to I also give a client
[134:30] reference ID which is a unique
[134:31] identifier that I will use later in the
[134:34] webbook part the invisible part to
[134:36] retrieve information about that user so
[134:38] that when stripe tell me oh this
[134:40] customer just made a purchase I know
[134:41] exactly which customer in my database
[134:43] that is and then I get back a URL from
[134:46] stripe which I sent back to my front end
[134:48] and in my front end when I get the
[134:50] response here here I open a new window
[134:52] to that URL I got from stripe and this
[134:55] is why after clicking the button
[134:56] customer end up on this checkout.
[134:58] stripe.com so that they can start a
[134:59] subscription for my app in the case you
[135:01] want to have a customer portal which I
[135:03] recommend where customers can update
[135:05] their uh credit card information they
[135:07] can download invoice Etc uh you can use
[135:10] customer stripe customer portal it works
[135:12] exactly like the stripe checkout you
[135:14] make a call to the stripe API they're
[135:16] going to give you back a link and
[135:17] they're going to create um a page for
[135:20] your customers with all their
[135:21] information so your customer will be
[135:22] able to see the credit card they use to
[135:24] make a checkout they will be able to uh
[135:27] see their billing history they will be
[135:28] able to cancel their plan even change
[135:30] the plan so that they can perform any
[135:32] form of like a billing settings this is
[135:34] great we can create checkout for our
[135:36] users but now you want to give access to
[135:39] the product to your users for that we're
[135:41] going to use the stripe webbook events
[135:43] so in the developer tab inside of the
[135:45] webbook uh part you will be able to add
[135:48] webbook endpoints a webbook endpoint is
[135:50] basically like a little API we're going
[135:52] to create to listen for events from
[135:54] stripe so for instance when a person
[135:56] completes a checkout we want stripe to
[135:58] let us know inside of our webbook
[135:59] endpoint that a customer XYZ completed a
[136:02] payment so that we can give them access
[136:04] to the product when you add an endpoint
[136:06] you add you have to add the URL of your
[136:09] API so that could be domain.com AI
[136:12] stripe and you have to choose the events
[136:15] you want to receive they have really a
[136:16] bunch of events I think over 100 so you
[136:19] want to select only the one that you
[136:20] need let's check the code for that so
[136:22] for instance this is one of the webbook
[136:24] endpoint for one of my software I put it
[136:27] in the/ API SL webbook route and here I
[136:31] have a simple function this is just a
[136:33] regular API endpoints like we used to do
[136:35] previously and in the first part we want
[136:37] to make sure that this uh only stripe
[136:40] can send us events so we want to verify
[136:43] that the person making a call to this
[136:45] endpoint is actually stripe that's why
[136:47] there's a little part of the code here
[136:48] that stripe will give you when you set
[136:50] up your account uh we use that to verify
[136:53] the source of the event and then we get
[136:55] the event data from stripe and we are
[136:57] going to iterate over which type of
[137:00] event no matter what you are running
[137:02] whether it's a software it's a digital
[137:03] product no matter what usually the
[137:05] checkout session completed is the number
[137:07] one event you want to listen for this is
[137:09] the part where you would typically give
[137:11] access to your product a checkout.
[137:13] session. completed means someone went to
[137:15] like a a proper stripe checkout they
[137:17] input the credit card details and
[137:18] successfully completed the checkout and
[137:20] if you remember from the previous part
[137:22] when I created the checkout I would give
[137:24] a client reference ID to stripe and now
[137:26] stripe is going to attach this client
[137:28] reference ID to the data that I get from
[137:30] the events so that I can just use that
[137:33] to retrieve the user from my database
[137:35] and in my case what I do usually is I
[137:37] have an as access Boolean on my database
[137:40] that is either true or false and it
[137:42] becomes true only if the person has
[137:44] completed a checkout to use the customer
[137:46] portal the that part that page where
[137:48] people can update their credit card
[137:50] details Etc I also save the customer ID
[137:53] I get from stripe inside of the user and
[137:56] here you can do pretty much anything you
[137:57] want you could send an events to the
[137:59] customer that say thank you for your
[138:01] purchase here is the unique link to uh
[138:03] download the book uh you just purchased
[138:05] you can literally it's an API endpoint
[138:06] so you can literally do anything you
[138:08] want and if you're running a digital
[138:09] product this checkout doation and
[138:11] completed type of event will get you as
[138:13] far as you want now if you're running a
[138:15] more advanced like maybe like a software
[138:17] with a SCP subscription system uh this
[138:19] check out the session that completed uh
[138:21] same could be used in order to give
[138:23] access to the product but now if the
[138:25] person has canceled their subscriptions
[138:27] they stop paying or their credit card
[138:28] stopped working you want to revoke
[138:30] access to your product and for that you
[138:32] can listen for the customer.
[138:34] subscription. deleted event here stripe
[138:36] again will send you some information
[138:38] about the customer so they could be the
[138:39] client reference ID or they can be the
[138:41] actual customer ID so you can retrieve
[138:43] the customer for your database and what
[138:44] I do in my case is if the person has a
[138:47] deleted subscription then I'm just going
[138:49] to remove the as access I'm going to
[138:50] turn it to false and in the front end
[138:53] part the visual part of my app whenever
[138:55] they try to do something I check if has
[138:57] access is true if that's the case I let
[138:59] them use my software if not then I just
[139:01] revoke access I redirect them to the
[139:03] homepage or I send them back an error
[139:05] that says that you need to subscribe to
[139:06] my service in order to use it stripe
[139:08] really has a bunch of uh events that you
[139:10] can listen to um don't go too crazy with
[139:13] it because it can become really
[139:14] complicated those two events will get
[139:16] you really far uh there's another one
[139:17] that's really good for marketing which
[139:19] is the checkout session EXP HED which
[139:21] basically if someone create a checkout
[139:23] session but did not complete the session
[139:25] so they uh they abandon the cart that
[139:27] what they call it in eCommerce uh stripe
[139:29] would let you know that and sometimes
[139:31] they would have include their emails and
[139:33] you can send them back an email that
[139:34] says hey I noticed you didn't finish the
[139:36] payment uh you can ask them question why
[139:38] they didn't complete the payment or you
[139:39] can then send them a coupon so they come
[139:42] back to your site or whatever by now you
[139:44] have a pretty solid understanding of
[139:46] what you need to know in order to build
[139:47] a software there is nonetheless a part
[139:50] that is pretty important about security
[139:53] how to make your app secure to make sure
[139:55] that there is no data leaks or to make
[139:57] sure that the users has access to the
[139:58] right information Etc are you're lucky
[140:00] after 2024 there are a bunch of AIS that
[140:04] are in your code that are going to help
[140:06] you understand uh if something is wrong
[140:08] or not so what I really really really
[140:10] recommend you to do is to open a chat
[140:12] with an AI inside of your code base give
[140:14] it access to the entire workspace and
[140:16] then ask question so in this case I ask
[140:18] a very basic question which might not
[140:20] cover everything but you can ask AI to
[140:23] review your entire code and ask if there
[140:25] is a security issue somewhere and you
[140:27] can go deep and ask specific questions
[140:29] this is very important to do this
[140:31] because AI will be able to review the
[140:32] entire code base really quickly and able
[140:34] to flag some very important things which
[140:37] is going to save you a bunch of
[140:38] headaches there are a few part that are
[140:39] important about Security in this case of
[140:42] our project we have the one about react
[140:44] server versus client components as we
[140:46] mentioned earlier everything in this
[140:48] project is a react component and and by
[140:50] default those components are server
[140:52] components so they're rendered on the
[140:54] server where it's safe to do some kind
[140:56] of operations and if we turn them into a
[140:58] client component by adding use client at
[141:00] the top then they are rendered on the
[141:02] clients and so simply put client
[141:04] components are not a safe space to do
[141:07] some sensitive operations you want to
[141:09] use client components for stuff where
[141:11] people can click on buttons but you want
[141:13] to make sure that in those clients
[141:14] component you never perform some kind of
[141:16] operation like a database query for
[141:18] instance so make sure you always do
[141:20] datab B connections and all forms of
[141:22] like sensitive operation things that
[141:24] people should not be aware of on server
[141:27] side components in this case this is the
[141:28] page that renders the dashboard you see
[141:30] on the right side here I have this
[141:32] little function that is going to
[141:34] retrieve the user data based on the
[141:36] session of the user so I need to make a
[141:38] database connection and retrieve the
[141:40] user and I have to make sure I do this
[141:42] operation on the server so either on my
[141:44] computer or on the place my server is
[141:47] hosted on the internet but never on the
[141:49] client's side
[141:51] okay we covered this a little bit
[141:52] earlier about envirment variables you
[141:54] want to make sure that your API Keys Etc
[141:57] are stored inside of off. local inside
[142:00] of your computer and add your un
[142:02] variable on your hosting provider when
[142:04] you deploy your code on the internet you
[142:06] want to make sure you use onment
[142:08] variables in order for your code to
[142:09] never be pushed accidentally on the
[142:12] internet here for instance if I do
[142:14] process. of. stripe API key inside of
[142:16] these client components this is a really
[142:18] terrible thing to do because every every
[142:20] person who is going to see a page where
[142:22] there is a button delete dashboard
[142:24] component will be able to see the stripe
[142:26] API key so really really don't do this
[142:29] and then you want to have some form of
[142:30] controls on your API endpoint so
[142:32] whenever a client someone on internet
[142:34] makes a request to one of your API
[142:36] endpoint you want to have like a
[142:38] policeman or whatever this is that
[142:40] checks a few information about the
[142:42] person for instance have you logged into
[142:44] to my app have you paid for the service
[142:46] if you have paid which plans are you on
[142:48] you want to have like a set of control
[142:50] at the top of your API endpoint to make
[142:52] sure that you only allow a specific
[142:54] subset of users to perform some actions
[142:57] for instance this is the API endpoint
[142:59] here to create a record in my database
[143:01] to create a new board like you see on
[143:02] the right side uh here I'm checking a
[143:04] few things if the body does not include
[143:06] a name so the name of the board I am
[143:08] rejecting this API endpoint I also check
[143:11] if the user has a session and if it does
[143:13] not I'm going to kick the user out and
[143:14] then I'm going to retrieve the user from
[143:16] the database and I'm going to check if
[143:18] that person has access or not to my
[143:20] product meaning has the person paid or
[143:21] not and one more time if it does not
[143:23] have access then I'm going to reject
[143:25] this from the API endpoint to make sure
[143:27] that the code below is never executed
[143:29] and finally there what developers calls
[143:31] middleware firewall proxy uh they have
[143:33] different names B on what you need uh
[143:35] but basically they will be like a
[143:36] middleman between your client people
[143:38] making request and your server because
[143:41] uh the client can be a malicious actor
[143:44] and it does not necessarily has to be
[143:46] someone like a a person on the internet
[143:48] like a physical human but that could
[143:50] also be a developer U making request to
[143:53] your API using aot script and in that
[143:56] case they could send like a thousand
[143:58] request to your API endpoint in 1 second
[144:00] this is where you want to have like
[144:01] those firewall proxy middleware that
[144:04] stands in between you and the server to
[144:07] make sure that uh the requests are only
[144:08] sent to your server if they match a
[144:11] certain um conditions for instance you
[144:13] can block access to a certain country or
[144:15] you can use a rate limiter that checks
[144:18] uh how many times this IP address has
[144:20] has requested access to your API
[144:22] endpoint and you can say like if you
[144:23] have done this more than 10 times per
[144:25] minute then I'm going to block access
[144:27] there really are a bunch of things you
[144:28] can do here uh it can get really complex
[144:31] but here you have a global understanding
[144:33] of one of the Core Concepts of security
[144:36] that you want to dig deeper when you
[144:37] deploy your application to make sure
[144:39] everything goes out safe before we talk
[144:41] about how to use AI to code super fast
[144:43] we're going to go over a few advaned
[144:45] concept that are not necessary for you
[144:47] to learn uh but they're pretty handy and
[144:50] useful and I will show you in some of my
[144:51] applications how I use each of them so
[144:53] for nextjs we have the dynamic routes
[144:56] for instance if I go over these tweets
[144:58] you can see that it's under x.com Markus
[145:01] status unique identifier and if I go to
[145:04] this other tweet of mine uh it is the
[145:06] exact same URL except that it has a
[145:09] different identifier in the route this
[145:11] is basically a dynamic route Twitter has
[145:13] built this like a structured page like
[145:16] it's ENT page where uh if I go left or
[145:18] right no matter what which tweet I look
[145:20] look it's going to always look the same
[145:22] on the left but the content inside the
[145:24] actual tweet will be different this is
[145:25] called Dynamic route this is basically
[145:27] like how you create those templates that
[145:29] are empty like structures and then
[145:31] you're going to fit them uh the data so
[145:33] it has a similar uh layout but it has
[145:36] different content this is very helpful
[145:38] if you do some things like SEO for
[145:40] instance uh and then talking about SEO
[145:42] we also have nextjs metadata so for
[145:44] instance this is one of my websites uh
[145:47] metadata are things that are invisible
[145:48] to users like here the title of these
[145:51] website the descriptions and a few
[145:53] keywords etc those are visible for
[145:55] search engines like Google and so you
[145:57] want to make sure you have the minimum
[145:59] metadata for your app to be indexed and
[146:01] referenced by Google nextjs makes it
[146:03] very simple when you export a constant
[146:06] called metadata with title description
[146:09] um URL whatever they will automatically
[146:11] add those tags to your page so that
[146:14] Google can reference you and finally
[146:16] there are the loading screens uh for
[146:18] instance if I go to this page and
[146:20] refresh the page you're going to see
[146:21] that I'll see this like state right now
[146:23] where I have those white cards because
[146:25] the page is actually loading it's not
[146:27] necessary but it gives a little uh clue
[146:29] to user that something is happening when
[146:31] we're actually fetching the data from uh
[146:33] the database so they have something to
[146:35] look at all right now we have uh advaned
[146:37] St CSS classes transition group uh
[146:40] opacity Shadow border all of them are
[146:42] pretty handy uh they will help you make
[146:44] better designs uh the hover one is
[146:47] probably what you are seeing right now
[146:48] when I'm hovering my mouse cursor on
[146:50] this card or that card um this is likely
[146:54] a hover effect from CSS so you might
[146:56] want to learn some of them about react
[146:59] um I think you learned pretty much a
[147:01] good chunk already there is another hook
[147:03] you might have to use from time to time
[147:05] which is use ref and you have this
[147:07] suspense component for JavaScript uh
[147:10] there are a few ones that are important
[147:11] the local storage this is like a mini
[147:14] database inside of your internet browser
[147:16] so for instance uh you can see this is
[147:18] one of my websites it helps people make
[147:20] logos so they can uh change the size of
[147:22] the logo they change the icons they can
[147:24] change the colors Etc what I do as a
[147:26] developer I put stuff inside of their
[147:29] local storage um actually if you open
[147:31] your developer tab you will see inside
[147:33] of application local storage and here
[147:35] logo fast I can see all those things
[147:37] here written are things that I add
[147:39] automatically with JavaScript to the
[147:41] local storage of my users and for
[147:43] instance this is where I save the actual
[147:45] settings of the person so if I reload
[147:47] this page I am going to see the exact
[147:50] same logo that I used to see because
[147:52] it's loading the information from my
[147:54] local storage okay now it's pretty slow
[147:56] because my Wi-Fi is really bad but there
[147:58] we go uh it's loading this uh this apple
[148:01] again from my local storage so people
[148:03] don't have to create an account because
[148:04] all the information is stored inside of
[148:06] their local storage this is very handy
[148:08] when you do like free tools marketings
[148:10] and stuff like that uh we have not
[148:12] covered yet form validation uh so when
[148:15] you have forms like stuff where you
[148:17] people can input stuff uh you can let
[148:19] them input text you can have like a
[148:21] controls where here I'm saying that you
[148:24] can only have maximum 280 characters so
[148:27] here I can press my keyboard but nothing
[148:29] is happening and then you have um
[148:31] methods on uh arrays and objects like
[148:33] sort and find uh which are pretty handy
[148:36] methods uh sorting will help you sort an
[148:39] array based on the certain conditions
[148:41] fine to retrieve one item from an array
[148:43] uh there are a bunch of helpers inside
[148:46] of JavaScript that's going to make your
[148:48] life easier okay I guess we are entering
[148:50] now the most exciting part of this video
[148:52] where we're going to use AI in order to
[148:54] 10x your code output as a developer now
[148:57] if you haven't followed the previous
[148:59] part of this video and you don't know
[149:01] yet how to build a little software by
[149:03] yourself I really really really
[149:04] recommend you to do so before we start
[149:06] using AI uh to code for us because AI is
[149:10] really good at explaining things to help
[149:12] you learn but if you build stuff if you
[149:14] use AI to write stuff that you do not
[149:17] understand you will likely end up in
[149:19] like what people call the AI hell Loop
[149:22] where you're going to be prompting an AI
[149:24] that will make first a good output that
[149:25] looks like you can make a bunch of stuff
[149:27] but as soon as you get stuck a little
[149:29] bit or as soon as you find bugs Etc
[149:31] you'll spend hours prompting the AI to
[149:33] fix stuff which is absolutely not fun so
[149:36] learn the Fundamentals by yourself and
[149:38] start using AI to 10x your output after
[149:40] that okay the first step is to actually
[149:42] set up your AI coding agent inside of
[149:45] your code editor at the moment recording
[149:47] this video there are two uh great code
[149:48] editors the first one is vs code which
[149:51] has an AI option with GitHub copilot
[149:53] this little guy here since it's free I
[149:55] think this is where I recommend you to
[149:56] get started and I am personally using
[149:58] cursor AI uh both are very similar so
[150:01] you can swap back and forth you won't be
[150:03] lost then once you set it up inside of
[150:04] your code editor you will have to choose
[150:06] a llm a large language model uh in my
[150:09] case I use clo 3.5 sonnets uh to be
[150:11] honest don't overthink that pick the
[150:14] popular language models so at this
[150:15] moment GPT 40 is also very famous so
[150:18] just pick one and let's move on to the
[150:19] next part and now it is time to build a
[150:21] deep relationship with your AI let me
[150:24] show you what is my uh workflow with AI
[150:26] to code fast okay now uh you are in your
[150:28] code editor you have an AI so basically
[150:30] you have like a software senior engineer
[150:32] that has the knowledge of your entire
[150:34] app so you can ask the AI to do pretty
[150:36] much anything for you I use this little
[150:38] like inline AI feature uh when I need to
[150:40] change one line of code usually this is
[150:43] what I do for CSS properties and styles
[150:45] so for instance uh this makes no sense
[150:46] but I would say something like uh you
[150:48] know add this CSS property to the div
[150:50] and then I would just review the change
[150:51] and accept it or not uh this also works
[150:53] super well if you go to the web and you
[150:55] like an SVG like this little icon here I
[150:58] like it so I copy past it into my code
[151:00] but it is an HTML uh SVG and I want to
[151:03] turn this into a valid jsx so for react
[151:06] and it's going to do all the brain work
[151:08] of updating uh the right attribute so
[151:10] it's a valid GX okay now for anything
[151:12] that is more than just one or few lines
[151:14] of code I use the chat you can press I
[151:16] think commment plus L to pop it up and I
[151:18] use the chat for almost everything as we
[151:20] have covered in a previous section you
[151:22] can use it if you don't understand a
[151:24] part of the code if you want to learn
[151:26] about a specific function Etc it is very
[151:28] useful for Education it's also useful
[151:30] for brainstorming sometimes I have a
[151:32] feature idea in mind and I asked the AI
[151:35] how would you implement this feature uh
[151:37] here I just this is just an example but
[151:39] normally you want to give more
[151:40] instructions and then you will see what
[151:42] the AI suggest here I will just check
[151:44] what the AI had come up with that give
[151:46] me a little idea of how to implement it
[151:49] then I just keep chatting with the AI in
[151:51] order to get something that I think is
[151:52] worth it and then of course when I'm
[151:53] ready I apply those changes to my code
[151:56] base and I review them step by step
[151:58] something that is very important for
[151:59] this part is the the context the context
[152:02] is basically how much knowledge do you
[152:03] give to the AI about your codebase in
[152:05] this case I gave the contest of page.js
[152:08] so this actual page right here which um
[152:11] for a big feature like this one where
[152:13] I'm like adding a complete new feature
[152:15] to my app is probably not enough that's
[152:17] why sometimes you can just uh do this
[152:19] like you press comment enter and you
[152:21] will give the entire app all the files
[152:24] will be used as context for uh the chat
[152:26] with the AI it's a little bit slower but
[152:28] you will get better results and you can
[152:29] also give like specific lines of code AS
[152:32] context so for instance I can select
[152:33] this SVG and I can say add to chats and
[152:36] now the AI knows exactly which lines of
[152:38] code I'm referring to and it gets better
[152:40] results all right and another thing I
[152:42] love which is called the composer in
[152:44] cursor if you press command I it's going
[152:46] to pop up this window that looks like
[152:48] the chat but it's actually a composer so
[152:50] you have access to like an AI agent so
[152:53] it can run your terminal it can create
[152:55] edit files without you um accepting or
[152:57] not uh this is very powerful you can do
[153:00] really a bunch of stuff but it can also
[153:01] be dangerous because it goes really fast
[153:03] and it change a lot of stuff uh what I
[153:05] do usually I use the this composer thing
[153:07] when I know exactly what I want for
[153:09] instance I already have created some of
[153:11] the components I want to use and I have
[153:13] exact like clear instruction to give to
[153:15] the AI I would use the composer as you
[153:17] keep learning you'll learn how to better
[153:19] prompt the AI to get the best result as
[153:21] possible and you will see that one thing
[153:23] that really helps is having a code base
[153:25] like a template like a Cod template that
[153:27] you reuse across your apps so that uh
[153:30] the AI has a already like a foundation
[153:32] so it can add more code on top of it
[153:34] that is similar to your foundation for
[153:36] instance this is a little code base I
[153:38] built for myself about a year and a half
[153:40] ago for because I was U making the same
[153:42] project over and over as the starting
[153:44] point and now I always have like this
[153:46] code base and whenever I start a new
[153:48] project the AI already has some data
[153:50] some file some codee to look at so you
[153:52] can just write the code that is right
[153:54] for me so there are a few things you
[153:56] want to consider to get the best results
[153:57] first you want to have the right naming
[154:00] so you want to have like explicit names
[154:01] for your variables files and functions
[154:04] so for instance my API endpoints have a
[154:06] clear naming for instance the Chrome
[154:08] folder this check status or this fetch
[154:11] email for uh payments uh this is
[154:14] explicit so me as a developer I
[154:16] understand what it means and the AI can
[154:17] Al also understand what it means in in
[154:19] the same way uh if I search for button
[154:21] in my files all the react component I
[154:23] create that have a button will include
[154:25] the word button inside of the file so if
[154:28] I search for button I will find all the
[154:29] buttons I use in my app and the words
[154:31] after explain a little bit about what
[154:32] this button does so button checkout will
[154:34] uh create a checkout the button name is
[154:37] also button checkout so this gives more
[154:39] uh context to the AI it's easier for the
[154:41] AI if I want to create a new feature
[154:43] that creates a checkout the AI knows
[154:45] right away there is another very
[154:47] powerful feature you can use at the
[154:49] beginning when you're getting started is
[154:51] AI rules uh those are a set of rules
[154:53] that we give to the AI developers in
[154:55] order for the AI to behave the way we
[154:57] want so in cursor you can go to cursor
[154:59] settings and then cursor settings and
[155:01] here you have this like a big text file
[155:03] where you can input uh anything you want
[155:05] those are basically rules that will be
[155:07] used by the AI to generate code that
[155:09] fits your needs so in my case uh I
[155:12] explain my text tack I'm using
[155:14] JavaScript react node etc etc so uh
[155:17] whenever I try new features for instance
[155:18] I want the AI to keep um suggesting
[155:21] tools and text tacks that I use myself
[155:23] also if you have some preference about
[155:24] how you use the libraries sometimes
[155:26] there are Frameworks like nextjs that um
[155:29] builds features so fast that you want
[155:31] your AI to use the latest ones or the
[155:33] ones you use for all of your project uh
[155:35] this is where you can mention all of
[155:36] that right here as of 2025 uh there is
[155:39] the 8020 rule uh that I use where 80% of
[155:43] the code is return by an AI and 20% of
[155:46] the code is return by me so usually what
[155:48] I do is one of I have something to build
[155:51] the AI builds it first it does the hard
[155:53] work of creating the components writing
[155:55] the functions Etc I keep promting the AI
[155:57] until I refine and get a result that are
[156:00] pretty decent then I apply all my
[156:02] changes and then me as a developer I
[156:04] finish the last 20% by reviewing the
[156:06] code and polishing a few details on it
[156:08] until it works as I expect okay and
[156:10] finally this is pretty new uh but this
[156:12] is absolutely awesome especially for us
[156:14] developers who are not the best at
[156:16] designing uh is how to use AI inside of
[156:18] your code Editor to design for you so
[156:20] sometimes I don't know exactly how the
[156:22] design should look like so what I do is
[156:24] I find a design that I like I just
[156:26] search for like the components I'm
[156:28] trying to design inside of Google I'll
[156:30] pick an image that I like pretty much so
[156:32] for a Time picker let's say I would go
[156:34] for this one for instance I would just
[156:36] take a screenshot of it and I would give
[156:39] the screenshot to the composer so right
[156:42] here you have an option that says image
[156:44] and you can upload a photo of the
[156:45] component you want and I would add a
[156:47] little uh explainer of what I want you
[156:49] can say uh you know change the colors
[156:51] and make it as a primary orange or
[156:53] something U build this component name it
[156:55] whatever you want and what should happen
[156:57] when the person click on buttons Etc and
[156:59] then you submit and the a will give you
[157:01] something that usually is working pretty
[157:03] well so learn how to become lazy and uh
[157:06] take parts that you like and just use
[157:08] the AI to code for you okay I just added
[157:11] this little section here because I think
[157:13] it's important uh these days I see lots
[157:15] of developers mentioning tools like vzer
[157:17] and lovable as the perfect place to
[157:19] start your product project and I don't
[157:20] think so so in case you know you don't
[157:22] know what those are uh those are
[157:23] basically like web apps where you can
[157:25] input whatever you want create a
[157:27] dashboard create a signup page a landing
[157:29] page for my app or whatever and it's
[157:30] going to uh generate the entire code in
[157:32] front of you and it builds some really
[157:34] absolutely beautiful components like
[157:35] those crypto dashboards nice customer
[157:38] facing dashboards landing pages Etc the
[157:40] output you get from just a little input
[157:42] of text is absolutely amazing but it is
[157:45] also dangerous because it is not trained
[157:48] on your code it is trained on the
[157:49] overall internet it is going to Output
[157:52] some code that you are not familiar with
[157:55] it might use different libraries that
[157:56] the one you're using it will have
[157:57] different design constraints than the
[157:59] word the one you're using it will name
[158:01] your files Etc differently than the one
[158:03] you typically do and in the end you're
[158:05] going to have to do a lot of rework in
[158:07] order to um format this code to fit into
[158:10] your own project so what I recommend you
[158:12] is to not use those tools even though I
[158:14] love them is to uh build something by
[158:16] yourself in your code editor and then
[158:18] whenever you create a new project reuse
[158:20] your code as a foundation as a code base
[158:22] for your next project and then you can
[158:24] use the AI inside of your code editor in
[158:28] order to uh write code for you design
[158:29] components for you uh you can upload
[158:31] those components for instance and you
[158:33] can tell the AI to uh fit the design
[158:35] constraints you set up and so it's going
[158:37] to create the same uh time Pier which
[158:39] will have the same uh border radius as
[158:41] your other components will have the same
[158:43] color at your other components it will
[158:45] name the file exactly like the way you
[158:47] name your other files and you will have
[158:48] really few work to do on the AI outputs
[158:51] and it's going to make your life much
[158:52] easier and this is likely the end of the
[158:55] road map now let me give you two quick
[158:57] piece of advice before I let you build
[158:59] your apps the first one is that I have
[159:01] seen hundreds of people making money on
[159:03] the internet and they all have one thing
[159:05] in common they all have a bias for
[159:07] Action they show up every single day and
[159:10] build stuff watching a video to learn
[159:12] how to code is great but now taking your
[159:14] computer and starting to code your own
[159:16] project is even better and second advice
[159:19] do marketing at some points building app
[159:21] is really fun but you will need some
[159:23] users to impact people's life to make a
[159:25] little bit of money So eventually you
[159:26] can quit your job and for that you need
[159:28] to do marketing 50% coding 50% marketing
[159:31] is a good balance I know marketing is
[159:33] hard especially when you're a developer
[159:34] that's why I'm going to link below some
[159:36] articles that I wrote that uh I like
[159:38] marketing strategies that I've learned
[159:40] along the journey that help me uh get
[159:42] couple thousands of visitors on my site
[159:44] every single day it goes from SEO ads
[159:46] copyrighting audience building Etc check
[159:48] out the description below it is free and
[159:51] that's it that's I think it's about a 2
[159:53] or three hours long video so congrats
[159:55] for staying until the end and also
[159:56] congrats to myself for finishing this
[159:58] video because it took me a lot of time
[160:00] you probably have seen from my beard and
[160:01] my hair uh that went a little crazy that
[160:03] it took about a month or something also
[160:05] remember that there are no sponsors for
[160:07] this video none of the tools I
[160:08] recommended pay me to make this video
[160:10] the only sponsor of this video is myself
[160:12] because I have made a course called code
[160:14] fast to help people learn how to code
[160:16] from scratch like what we've done in the
[160:18] road map but more in the details into
[160:20] each steps over 2,000 students love the
[160:22] course so if you like this video you
[160:24] might like the course as well now I want
[160:26] you to close this video take your
[160:28] keyboard start typing some JavaScript
[160:29] buy a domain name push it on the
[160:31] internet and add a link below this video
[160:33] as proof of work see you next time