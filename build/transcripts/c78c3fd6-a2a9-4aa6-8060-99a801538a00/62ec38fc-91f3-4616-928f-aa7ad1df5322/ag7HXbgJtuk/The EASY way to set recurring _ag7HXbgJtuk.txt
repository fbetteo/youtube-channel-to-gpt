Video Title: The EASY way to set recurring payments (Stripe subscriptions)
Video ID: ag7HXbgJtuk
URL: https://www.youtube.com/watch?v=ag7HXbgJtuk

[00:00] even though the stripe API documentation
[00:02] is longer than Lord of the Rings there
[00:04] is a very easy and fast way to set up
[00:06] monthly recurring payments for your
[00:08] software in this video we're going to uh
[00:10] create a little pricing table for people
[00:12] to choose monthly or yearly uh
[00:14] subscriptions we're going to deal with
[00:15] stri web hooks to make sure that we
[00:17] Grant or revok access to users based on
[00:20] their current subscription status and
[00:21] we're going to let your users manage
[00:23] their subscription whether they want to
[00:24] update their credit cards upgrade or
[00:25] downgrade their plans or even cancel it
[00:27] and you'll see that we'll be able to do
[00:29] this with just a few dozen lines of code
[00:31] for the tech tack I'm going to be using
[00:32] just a little bit of react as well as an
[00:34] API endpoint uh through the nextjs API
[00:37] route but you can use anything else like
[00:39] for instance an Express server and
[00:41] that's pretty much it if you're new here
[00:43] my name is Mark I have built over 20
[00:44] products on the internet from AI tools
[00:46] habit tracker a few useless products and
[00:49] some software that I grew to a couple
[00:51] thousand in mostly recing revenue and
[00:53] this is the video I wish I found when I
[00:55] got started first let's start with a
[00:56] quick overview of what we're going to
[00:57] build on the client side so your
[01:00] customers they will be able to select a
[01:02] yearly or monthly plan and subscribe to
[01:04] one of them by entering the credit card
[01:05] details this is going to go straight to
[01:07] stripe create the subscriptions create
[01:08] the customers and STP is going to update
[01:10] our API through web books tell us
[01:13] whether or not we should give access to
[01:14] the user again for the API I'm using
[01:16] nextjs but you can use pretty much
[01:17] anything you want like Express and then
[01:19] once the customer has access they will
[01:21] be able to manage their subscription
[01:22] with the strap customer portal so if
[01:24] they want to upgrade the subscription
[01:26] download the invoice or uh even cancel
[01:28] it and it's going to update stripe and
[01:30] stripe is going to let us know again
[01:31] through a webbook whether we should
[01:33] update or not the user in the database
[01:35] before we start coding let's set up the
[01:37] strip account so make sure you are in
[01:39] test mode and then go to your product
[01:41] catalog and there you will be able to
[01:42] add a new product you can call it the
[01:44] way you want I'm going to call it hello
[01:46] YouTube and set up whatever recurring
[01:48] payment you want I'm going to start with
[01:50] a monthly recurring payment at $19 it's
[01:52] going to create the product you can
[01:54] click on it and you will see your
[01:56] pricing plan here start by creating uh a
[01:59] payment link so just click that button
[02:01] make sure you check this option right
[02:03] here if you work with uh European
[02:05] businesses that would let them input
[02:07] their tax ID so they have invoices with
[02:09] their vat for instance and on the after
[02:11] payment page you want to replace with a
[02:14] custom message that says go back to your
[02:16] dashboard and refresh it to
[02:20] unlock the services thanks for your
[02:23] trust you can create the link and you
[02:26] will create another link for this
[02:29] product so go back to your product
[02:31] catalog select the product you just
[02:32] created and we're going to create a
[02:34] yearly plan so we're going to add
[02:35] another price and we're going to say
[02:37] let's say
[02:37] $99 per year and create the price and
[02:42] we're going to do the exact same thing
[02:43] we're going to create a payment link
[02:45] we're going to allow businesses to input
[02:47] their V number and in the after payment
[02:49] page you can copy past the exact same
[02:51] message we said earlier make sure to say
[02:52] to your user to refresh your product
[02:55] page so that they get the latest data
[02:57] from your API and then create the link
[02:59] and and you're going to end up having
[03:01] another payment link for the yearly plan
[03:02] for each of the pricing we created we're
[03:04] going to did two things per pricing
[03:06] we're going to did the price ID right
[03:08] here as well as the payment link so the
[03:11] URL that you can copy right here now
[03:13] we're going to code a little pricing
[03:15] table where people can choose between
[03:17] paying monthly or paying the yearly and
[03:19] we're going to see what happens when we
[03:20] click on this link for that I have spin
[03:22] up a little next year project so I have
[03:24] this uh page this homepage whatever it
[03:27] is with a component called pricing the
[03:29] pricing component is important there are
[03:30] two things going on first there is this
[03:32] array of plans and you can see we have
[03:34] two objects this one is the monthly plan
[03:36] and this one is the yearly plan we have
[03:39] uh these data for visualization on the
[03:41] table component and we have the payment
[03:44] link uh URL that we copy past from
[03:46] stripe earlier as well as the price ID
[03:48] that we copy pasted earlier and because
[03:50] stripe has a test and a production mode
[03:52] I'm also using process.of not not
[03:54] environment equal developments when I'm
[03:56] testing on my computer and I would set
[03:57] this up to the actual production price
[04:00] when I go live it's important to export
[04:02] this constant here because we're going
[04:03] to be using it later for the web hook
[04:05] all right now we have the components the
[04:07] component is very simple it's mostly UI
[04:09] with the little use states to uh swap
[04:12] between different type of plans the
[04:13] yearly and the monthly ones there's
[04:15] nothing fancy here is just a purely
[04:17] visual what matters here is what happens
[04:19] when people click on the Subscribe
[04:20] button you can see we are going to open
[04:23] a new window and we are going to direct
[04:24] the user to the payment link URL and
[04:27] we're going to prefill the email with
[04:29] with prefield email using the user email
[04:33] for this part of the video I assume that
[04:35] you already have some kind of
[04:36] authentification system I'm using next
[04:39] oath for that as well as a mongodb
[04:41] database but you can use literally
[04:43] anything you want as long as the user is
[04:44] authentification you can pass the user
[04:46] email after the pre-filled email query
[04:49] and is going to prepopulate the user
[04:50] email and if you don't have some
[04:52] authentification in place already at the
[04:53] end of the video I'm going to ver a use
[04:55] case where you can start charging
[04:56] subscriptions to user that is not even
[04:58] authenticated so now now when the user
[05:00] click on the Subscribe link is going to
[05:01] open the payment link and it's going to
[05:04] prefill the user email so we can know
[05:06] who uh paid for this uh membership and
[05:09] then we're going to input some fake
[05:11] dummy data and see what's happening Mark
[05:13] and we're going to say okay and then
[05:15] we're going to back to stripe and if we
[05:18] refresh the page it is this one this
[05:20] customer was just created the
[05:21] subscription is active on stripe and the
[05:23] customer paid I already have a bunch of
[05:25] other payments because I'm testing it
[05:26] with my computer but normally you should
[05:28] have subscription that is active right
[05:30] here and on the confirmation payment
[05:31] page it says go back to your dashboard
[05:33] and refresh it to unlock the service
[05:34] okay now we need to update users in our
[05:36] database to know whether or not they
[05:38] have access and for that we're going to
[05:39] use stripe web hooks so go to your
[05:41] developer tabs and you're going to need
[05:43] two things first you're going to need
[05:45] your API key so you can reveal your test
[05:47] API key the private one and you're going
[05:49] to copy paste it in your project you can
[05:51] call your key whatever you want I call
[05:52] it stripe secret key and then just pass
[05:54] the key right after that because I'm
[05:55] using nextjs those are private and they
[05:58] will never be shared with the client but
[05:59] if if you're using react you want to
[06:01] make sure that you only share those API
[06:02] keys on your back end then go to the
[06:05] webbook part and you're going to say you
[06:06] want to add a local event listener
[06:08] you're going to type this in your
[06:10] terminal so stripe login is going to
[06:12] prompt you to log to stripe and once
[06:14] you're good with that do not run the
[06:15] common number two I'll show you the one
[06:17] we're going to be using so we are going
[06:18] to create a second terminal I usually
[06:20] put it uh on the right side of it and
[06:22] then you're going to use this common
[06:24] stripe listen-- forward to Local Host
[06:27] the port you're using usually 3,000 I
[06:29] call mine /i/ web hook slst stripe just
[06:33] copy paste this and press enter and it's
[06:35] going to set up a little listener on
[06:37] your computer and you're going to get a
[06:39] webbook secret signing key like this one
[06:42] and you can copy paste it in an
[06:43] environment variable called strip
[06:45] webbook Secrets the webbook secret is
[06:47] just a random number to make sure that
[06:49] the calls we receive from stripe are
[06:51] actually coming from them and not from
[06:53] someone else now that we have a stripe
[06:54] local event listeners everything that
[06:56] happens on your stripe test account will
[06:59] arrive on your computer and you will be
[07:01] notified in this console so if I try to
[07:03] pay again here you will see that you
[07:05] will get notified but it also works if I
[07:06] do actions directly on stripe for
[07:08] instance let's say I create a fake
[07:10] payment of $1 I create the payment and
[07:12] you will see that I will be notified
[07:14] here in my console I receive some events
[07:16] from stripe like charge succeeded
[07:18] payment intend succeeded and a bunch of
[07:20] other events and this is how we're going
[07:21] to update users in the database to know
[07:23] whether or not they have access to your
[07:25] product for that you're going to need a
[07:26] little API endpoint for me as I'm using
[07:28] njs I I created a/ API folder and in the
[07:32] webbook folder in the stripe folder I
[07:34] created a route where I have my API
[07:37] Handler if you're using Express for
[07:39] instance uh stripe has a nice
[07:40] documentation they will show you exactly
[07:42] how you do that if you go back to that
[07:44] developer uh page they will show you how
[07:46] to set up your Express server the
[07:48] beginning of the code here does not
[07:49] really matter you see we pull the stripe
[07:51] webbook secret and the stripe secret key
[07:53] here and then we're going to verify that
[07:55] the webbook is actually coming from
[07:57] stripe and then the important part that
[07:58] we're going to in this video is the
[08:00] events we receive and so we have a big
[08:02] switch and we're going to iterate over
[08:04] each events that we receive and decide
[08:06] which actions to take and for us for our
[08:08] simple use case we only have two events
[08:10] that we really care about we're using
[08:12] the stripe node.js package in order to
[08:14] uh query and interact with the stripe
[08:16] API so the first thing we do is we
[08:18] actually get the session object from
[08:20] that customer we're going to extract the
[08:22] customer ID we're going to get some more
[08:24] information about the customer we're
[08:26] also going to retrieve the price ID from
[08:28] the session so if you remember earlier
[08:30] the price ID is the little thing we copy
[08:32] pasted and then we're going to iterate
[08:33] over the plans our plans if you remember
[08:35] in our uh pricing component we set up an
[08:38] array with two objects each of them have
[08:40] the price ID and that's why it's
[08:42] important so that we can get the plan
[08:44] here if there is no plan it's probably
[08:46] some uh bugs or mistakes so we just want
[08:47] to break the loop and move on and then
[08:49] we're going to either create the
[08:51] customer or update the person if they
[08:53] already exist for instance if a customer
[08:55] paid and then cancel the subscriptions
[08:57] and then 3 months later came back and
[08:59] paid again we don't want to create a new
[09:00] customer we want to update them so it's
[09:02] going to check the customer email so the
[09:04] email that the customer inputed in this
[09:07] field here and we're going to search if
[09:09] that customer exist in our database I'm
[09:12] using mongodb this is how I query it it
[09:14] would be the same for uh anything else
[09:15] you're using if there is no user we want
[09:17] to create the the person so we want to
[09:19] uh we get their normally we get their
[09:21] name from the stripe checkout uh we also
[09:23] get the email and we get the customer ID
[09:25] it's a unique identifier in stripe that
[09:27] we're going to reuse later and then
[09:29] going to update the user um there are
[09:31] two things we want to update we want to
[09:32] say the price ID so they subscribe for
[09:34] that monthly or that yearly plan and we
[09:36] also want to update a some kind of
[09:38] Boolean for me I call it as access if
[09:41] it's true the user has paid if it's
[09:42] false the user hasn't paid we save the
[09:44] user and then we're done one thing I
[09:46] also recommend you here is to sending a
[09:47] little extra email like welcome to your
[09:50] product name here is your logging link
[09:51] or something like this to make sure that
[09:53] if the user move on after paying that
[09:55] they have some kind of backup on their
[09:56] email uh box and the second event that's
[09:59] is called customer subscription deleted
[10:01] so stripe will create a subscription
[10:03] life cycle for you when the customer
[10:05] start to pay for um that monthly or
[10:07] yearly membership and they will send you
[10:08] events frequently uh if the user has
[10:10] paid the invoice if the subscription has
[10:12] renewed cancelled uh upgraded whatever
[10:14] you only want to listen to the
[10:15] subscription deleted this is fired when
[10:18] the customer cancel the subscription and
[10:20] they reach the end of their billing
[10:21] cycle this is usually the time where you
[10:23] want to stop providing access to your
[10:26] customers so for that we're going to get
[10:28] back the subscription from stripe we're
[10:29] going to first retrieve it with the ID
[10:31] and thanks to that object we know uh the
[10:34] customer ID unique identifier for the
[10:36] customer we're going to retrieve it from
[10:38] our database this time and we're going
[10:39] to turn off their Boolean and save the
[10:41] user and this is pretty much all you
[10:43] need to have a subscription that either
[10:44] grants or revoke access to your
[10:46] customers there are also some nice tripe
[10:48] even that I'm going to share with you
[10:49] just in case you have some more uh
[10:51] complex or you want to do some marketing
[10:53] things for instance the stripe checkout
[10:55] expired event is when the customer don't
[10:57] pay and they leave the checkout page you
[10:59] can sometimes access their emails and
[11:01] this is when you want to tell them like
[11:02] hey you did not make a purchase here is
[11:04] a 20% discount for next checkout or
[11:06] something like that the customer
[11:07] subscription updated is fired every time
[11:10] there is some events like the
[11:11] subscription is renewed every month
[11:13] you'll receive an event normally you
[11:15] don't need to do anything here because
[11:17] we just revoke the access when the
[11:19] subscription is actually deleted the
[11:21] invoice payment failed event is fired
[11:23] after a customer was charged but it was
[11:26] not successful let's say your customers
[11:27] will have money on the bank account then
[11:29] you will receive this event in some
[11:31] cases you might want to block
[11:33] subscription right away but usually it's
[11:35] quite friendly to wait until the end of
[11:37] the billing cycle to stop granting them
[11:39] access so you would normally don't do
[11:41] anything here unless you want to stop
[11:43] the subscription right away after a fail
[11:44] payment and finally the invoice paid
[11:47] event is fired after the opposite
[11:49] happens so when a customer credit card
[11:51] is charged if you're using the previous
[11:53] even to stop giving access as soon as
[11:56] the payment is failed then in the
[11:57] invoice paid you might want to have the
[11:59] opposite effect which means that you get
[12:01] the customer and you give them access
[12:03] back every time they make a successful
[12:05] payment but again in 99% of the cases
[12:07] you only need those two events all right
[12:09] let's see what we have now so we can
[12:11] create any subscription I'm going to go
[12:12] for the yearly plan and I'm going to
[12:14] input some Demi data the test credit
[12:16] card is 424242 we're going to be in 2025
[12:20] and I'm going to say uh I'm going to be
[12:22] John this time and then I can subscribe
[12:24] to the yearly plan in my backand I
[12:26] should receive the stripe events right
[12:29] here here uh one of those events is
[12:30] supposed to be called checkout session
[12:32] completed and this is where we're going
[12:33] to create our user in the database we're
[12:36] going to double check my mongodb making
[12:37] sure that it was actually created there
[12:39] we go when I refresh I see the user so I
[12:41] have those information so the name and
[12:43] the email provided during the checkout
[12:45] as well as some stripe uh information
[12:47] like the customer ID and the price ID
[12:49] and we can see that the user has access
[12:51] to the product so we can give him or her
[12:54] uh probably him in this case this is
[12:55] John access if we double check in stripe
[12:57] and refresh the customer tab we will see
[13:00] we should have a new customer created
[13:02] called John here we go and he has an
[13:05] active subscription now I want to test
[13:07] if the revok access is also working so
[13:09] I'm going to cancel the subscription
[13:11] immediately and on my backand I should
[13:13] also receive some new events somewhere
[13:15] here actually I received it already it
[13:17] was really fast customer subscription
[13:18] deleted which is the second event we're
[13:20] listening to this one which normally
[13:23] should update our database and remove
[13:25] access from the user we're going to
[13:26] double check that in mongodb again
[13:28] refresh and and we can see the user uh
[13:30] does not have access anymore so this is
[13:33] working okay now we want to let users
[13:35] manage their subscription so either
[13:36] upgrade plan cancel change download the
[13:38] invoice change your credit cards and all
[13:40] that things for that go back to your
[13:41] product catalog and pick the monthly
[13:43] plan and you're going to say in the
[13:45] upsell category say upsell to the yearly
[13:48] plan and then in the search tab type
[13:50] customer portal and in setting Billings
[13:53] customer portal you should have this
[13:54] page um I think I turned mine on already
[13:57] uh there might be a button to turn it on
[13:58] in the subscription part here you will
[14:00] want to uh select the products that
[14:03] customers can um subscribe or not so you
[14:05] will find your product here the yearly
[14:07] plan and the monthly plan save the
[14:09] changes and you're going to copy the
[14:12] link that is right here and then in your
[14:14] code so this is my uh homepage or
[14:15] whatever user dashboard page I created a
[14:18] simple react component button customer
[14:20] portal in this button I just get the
[14:22] user session so I know their emails and
[14:24] I also have the link I just copied from
[14:26] the customer portal and when the user is
[14:29] actually authenticated I just have a
[14:31] link that goes to that customer portal
[14:33] link plus I add the as before for the
[14:36] checkout the prefill email query with
[14:38] the user email in the end and then when
[14:40] I click on it on the user side it's
[14:42] going to open the striped customer
[14:44] portal with the email prefilled from
[14:46] here customer can receive an email to
[14:48] log to their customer portal and manage
[14:51] everything so this is my Gmail if I
[14:53] click here is going to open my stripe
[14:55] customer portal and then the customer
[14:56] will receive an email it looks like this
[14:58] and when they click on it they will
[15:00] access to their uh billing portal where
[15:02] they can update their plan or cancel it
[15:04] as well as changing their payment method
[15:06] adding new credit cards building
[15:07] information invoice history and a bunch
[15:09] of other cool stuff a few things once
[15:11] you're ready to go to production uh go
[15:12] to your developer tab turn off the test
[15:15] mode part and copy your actual
[15:16] production API key and in the webbook
[15:19] tabs you will have to add your own uh
[15:21] website so add an endpoints your domain
[15:24] name/ API webook stripe and add the
[15:27] events you want to listen to Because by
[15:29] default they're known so you want to
[15:30] listen checkout completed this one as
[15:32] well as the subscription deleted here we
[15:35] go you can add events and at the end
[15:37] point and you should be good to go in
[15:39] the case you want to start charging a
[15:41] subscription before logging users in
[15:43] which I think is a really good way to
[15:44] increase your coners rate you want to
[15:45] make sure that first on your payment
[15:48] link confirmation page you tell people
[15:50] to actually follow the instruction
[15:52] received by email and in your webbook
[15:53] Handler you want to make sure that at
[15:55] the end after creating the user it
[15:57] actually sends an email to the user with
[15:59] a link for them to log in if you already
[16:02] have a business that's processing couple
[16:04] thousands of dollars on monthly recuring
[16:05] revenue and you need some very specific
[16:07] granular control you can try to create
[16:09] customer portals and checkout session
[16:11] using the API but if you're getting
[16:12] started this setup will work for 99% of
[16:15] the cases and actually if you're also
[16:16] getting started I recommend you to play
[16:18] around with onetime payments of their
[16:20] subscriptions the strip setup is exactly
[16:22] the same as I just showed you but you'll
[16:24] see it's much easier to sell a software
[16:26] for $99 lifetime payment than it is to
[16:28] to sell a $19 monthly recording payments
[16:32] and when you're getting started you'll
[16:33] see it's very important you start making
[16:34] a little bit of money at the beginning
[16:36] because you will keep you motivated and
[16:38] one time payments are much easier to
[16:39] sell if you want to understand the logic
[16:41] behind this I'll share a video around
[16:42] here to explain that that's it for this
[16:44] video if you liked it you can like it if
[16:46] you enjoy it you can subscribe to the
[16:47] channel that will really means a lot and
[16:48] until the next one I hope you just ship
[16:50] it