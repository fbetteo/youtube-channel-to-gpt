Video Title: I launched a SaaS in 3 days with 3 shortcuts
Video ID: PkbW-ce7cfE
URL: https://www.youtube.com/watch?v=PkbW-ce7cfE

[00:00] in 2017 I spent one year building an app
[00:02] that got zero users two weeks ago I had
[00:05] a random startup ID in mind and it took
[00:07] me only 3 days to build the product
[00:09] using Ai and 24 hours later the launch I
[00:11] made $1,000 Us in profit in this video
[00:14] I'm going to show you the software how I
[00:15] got the startup ID and especially how I
[00:17] use artificial intelligence in order to
[00:19] build really fast let's go all right let
[00:22] me show you real quick what the product
[00:23] is it's called poop up it's the Ling
[00:25] page that you can see here and it
[00:27] basically it's a little script for
[00:29] website that will display popup
[00:31] notifications like those ones customers
[00:33] would typically use it to show that they
[00:34] know the pain of their own customers in
[00:36] order to improve their website
[00:38] conversion rate so this is the landing
[00:39] page that I built right here as you can
[00:41] see we got a couple things going on in
[00:43] here and when customers are ready they
[00:45] can click here they will be prompt to
[00:47] pay and once they've paid they go to
[00:50] their customer dashboard I'm going to
[00:52] show you that right now right there they
[00:53] can add websites let's say we're going
[00:55] to go to that website right here and
[00:56] here is where they customize the pop-ups
[00:58] they want to send they can add messages
[01:00] where each message could have text you
[01:02] could have some icons and everything
[01:04] people can reorganize it and once
[01:05] they're ready they will get a little
[01:06] script at the bottom right here and once
[01:08] it's installed on their own website they
[01:10] can test it and you can see on the right
[01:12] side we going to see those notifications
[01:14] coming up I have built over 20 side
[01:16] projects and one of the most common
[01:18] question that I get is how do you find
[01:20] startup IDs and the answer is simple I
[01:22] do not search for IDs they come to me
[01:24] these product poop up came after I
[01:26] launched Zenvo a little tool for stripe
[01:29] users to to generate invoices without
[01:31] paying the fee I added popup
[01:32] notification on the site to nudge
[01:34] customers into buying and people say we
[01:35] love the notification and poop up came
[01:37] up and prior to Zenvo I was playing
[01:40] around with ship fast a boiler plate for
[01:42] nexs developers and I found out that I
[01:43] paid a lot of money for stripe invoices
[01:46] and I decided to turn those off and I
[01:47] realized I needed to have some kind of
[01:49] product that would let me generate
[01:50] invoices for free and that's how I came
[01:52] up with Zenvo and we can go back in time
[01:54] and the loop keeps going on I build
[01:55] Chast because of another product because
[01:57] of another product and another product
[01:59] so the answer to finding startup IDs is
[02:00] to start somewhere anywhere you can
[02:02] build a note note taking app just make a
[02:04] better version or a version that you
[02:06] would use and you're going to stumble
[02:07] upon real problems in your workflow
[02:09] you're going to learn stuff you can
[02:11] build a tiny audience there will be
[02:12] things happening and those are promising
[02:15] idas for the future I built the product
[02:17] poop up in 3 days and I'm going to share
[02:19] the three ways I actually use in order
[02:21] to build fast and first is that I use a
[02:24] code boiler plate it's called cheap fast
[02:26] it's a boiler plate I made for myself it
[02:28] includes a bunch of learing page comp
[02:29] components so I just have to fill the
[02:31] copy and the landing page is ready it
[02:33] includes also some cool features like
[02:34] user login private dashboard with just a
[02:36] click of a button it handles all the
[02:38] stripe web hook events so I have users
[02:41] updated in my database as soon as they
[02:43] pay and so the actual final part that
[02:45] was missing was to create the script
[02:48] that would sit on my customer's website
[02:50] in order to display those popup
[02:51] notification and this is where AI comes
[02:53] in very handy and I will share
[02:55] everything that I do with GitHub
[02:56] co-pilot in order to build sometimes
[02:59] code that I don't even understand I use
[03:00] GI up cop highight in order to write
[03:02] code two to three times faster it's
[03:04] basically chpt inside of your code
[03:06] editor I can write code fix your code
[03:08] explain your code but you can also do a
[03:10] bunch of other stuff like generate a
[03:12] nice color palette or sometimes even
[03:13] write your copy for the landing page
[03:15] it's absolutely awesome and let me show
[03:17] you how it looks I use copilot
[03:19] absolutely everywhere to write most of
[03:21] my code and I can use it for very simple
[03:23] tasks to very Advanced and integrated
[03:26] tasks let me show you how that works so
[03:28] basically you would write plain English
[03:30] let's say I want to have an array of all
[03:32] the days of the week with all the days
[03:35] of the week you press enter and bingo I
[03:38] press Tab and then is going to create
[03:40] the JavaScript array with all the days
[03:41] of the week which is very handy if I
[03:43] want to do something a bit more advanced
[03:45] I can keep typing English and it knows
[03:47] the entire code of this file and so he
[03:49] going to be able to interact with it
[03:51] let's say now I am on the product when
[03:54] we press test we're going to fire some
[03:56] popup notifications at the top right
[03:58] what we want to do is if the person
[03:59] change to a different page we want to
[04:01] remove those popups and so we need to
[04:03] have some kind of cleanup function and I
[04:05] am familiar with reactjs but JavaScript
[04:07] a little less so I can just tell copilot
[04:09] like if a route change user navigates
[04:11] away call cleanup I press enter and boom
[04:14] I press Tab and GitHub copilot generated
[04:16] this little event listener and we call
[04:18] the cleanup function which is right
[04:20] there that was actually created by
[04:22] copilot and it's going to remove all the
[04:25] pop-ups that we've had it's also really
[04:27] good at generating copy for your
[04:29] websites so not only code but like
[04:31] actually plain English like copyrighting
[04:34] so here on this page I removed this is
[04:36] the headline of the page I remove the
[04:38] text that was right underneath on
[04:40] purpose and if we go to the hero file we
[04:43] are going to see so we have the H1 here
[04:45] and this P tag here is the text that's
[04:48] underneath and bingo you see copilot
[04:50] already has a knowledge of what the
[04:52] product is about thanks to everything
[04:54] that I've uh written previously and it
[04:56] knows that this P tag is underneath the
[04:59] H1 so it should be some kind of like
[05:00] helper sub headline thing and it says oh
[05:03] poop up is a NOCO tool that helps your
[05:05] increase Visitors convers by chowing a
[05:07] poop up to your visitors it's not
[05:08] perfect you can fine tune it there a
[05:10] bunch of way to make the results better
[05:12] but it's really a good start for the
[05:14] copy and you can even use copilot in
[05:16] order to do some very cool stuff like
[05:18] play around with multiple files in your
[05:21] project so in this poop up example I
[05:23] have an API endpoint where I would
[05:25] basically get the script and get the
[05:27] data for the script to show which
[05:29] messages we have to display and I can
[05:30] say something like a functions that
[05:33] fetches the data from the endpoint and
[05:37] return it and here we go you see that we
[05:40] have an entire function um I'm going to
[05:42] come in that we have an entire function
[05:43] right here that is going to hit my API
[05:47] endpoint it's going to pass some
[05:48] parameters and I'm going to get the data
[05:51] back and it's going to sanitize the data
[05:52] and return it and it knows exactly how
[05:55] to write the function for my own code
[05:57] because if I go to that API endpoint so
[05:59] the script in the API part here it knows
[06:03] which parameters are needed the body
[06:05] which part of the body we need the
[06:07] domain and then is going to pass on the
[06:09] right parameters based on what this API
[06:12] endpoint needs and it knows which data
[06:14] will be returned from the response by
[06:16] default GitHub copilot is very awesome
[06:18] but to make it even better you want to
[06:20] use those little tips first you want to
[06:23] provide context to copilot so by default
[06:25] when you type English copilot is going
[06:27] to create some code for you but you want
[06:29] the code to be usable right away so it
[06:31] means it has to hit the right API
[06:33] endpoint it has to have the right
[06:35] variable names in order to upload your
[06:38] new documents to the database right away
[06:40] and the only thing you have to do for
[06:41] that is to keep tabs open as you can see
[06:44] here at the top I have a bunch of tabs
[06:45] open and especially here I'm going to
[06:47] create a react component that lets users
[06:49] proceed to a stripe checkout and on the
[06:51] right side I open this file here which
[06:54] is an API endpoint that basically take
[06:56] on a few parameters create a strap trick
[06:58] out session and return the URL if I did
[07:01] not open this file copilot doesn't have
[07:03] access to it and so when I'm going to
[07:04] create my react component right here it
[07:06] will Generate random API endpoints and
[07:09] you will not name the variables as you
[07:12] do in your code so you want to keep all
[07:14] your files open and when you do this
[07:16] when you start creating your own react
[07:18] component in this case it's going to use
[07:20] all the files it knows from the project
[07:22] in order to create the right components
[07:24] so here we're going to say constant
[07:27] button bu you see as you can see here
[07:29] the price ID here is likely to be what
[07:32] we're going to have somewhere here in
[07:34] the API so it knows it's going to be
[07:36] calling this function so it knows it
[07:38] needs to be pass this variable and if I
[07:40] keep pressing tab enter it's going to
[07:42] Bingo it creates the entire components
[07:45] right here with a loading state with the
[07:48] call to the API it handles it knows when
[07:51] it's loading when it's not it's going to
[07:52] disable if it's not loading handle the
[07:54] click handle event and it's going to
[07:56] call the right API end point with the
[07:59] right parameters right here and this is
[08:01] achieved because it knows this file and
[08:04] this file knows how this file is working
[08:07] this is my database model it knows how
[08:09] users are restores in the database which
[08:11] Fields do they have by default copilot
[08:13] already knows the packages you've
[08:15] installed as you can see here it called
[08:17] those two packages at the top so you
[08:18] don't need to do anything for that
[08:20] another part that very helpful in order
[08:22] to get the most out of copilot is to
[08:23] have your own boiler plates which means
[08:25] a code base that you reuse across
[08:27] different projects where you name
[08:28] variables the same way you have the same
[08:31] way of naming your database schemas and
[08:33] all that so that you already provide the
[08:35] foundation to co-pilot so it knows
[08:37] already how are you going to name this
[08:39] API endpoint how you're going to name a
[08:41] new users uh fields in the database and
[08:43] all that and the final part to leverage
[08:45] GitHub copilot is to use very tiny
[08:48] functions that you can reuse everywhere
[08:50] in your code so in this API route we can
[08:52] see here we have a function that creates
[08:54] the checkout and if you go here we open
[08:57] the stripe.js file which has a few
[08:58] helper function function for stripe such
[09:00] as a function to create a checkout or
[09:02] create a customer portal those are very
[09:04] tiny function that have a specific use
[09:06] case and this is useful because anytime
[09:08] I create a new API routes for instance
[09:10] copilot will be able to reuse those
[09:12] functions in order to do a specific
[09:14] actions and finally in order to ship
[09:16] this app in 3 days I use a bunch of
[09:18] unconventional methods such as not using
[09:20] typescript not using G branches not
[09:22] testing my code I will share somewhere
[09:24] around here a link to that video if you
[09:25] want to dive into it more and so after
[09:27] spending three days on the product it
[09:28] was actually done and I launched it
[09:30] everywhere from producton Twitter hicker
[09:33] news and reddits in total I think there
[09:34] was about 7,000 visitors on the site it
[09:37] made $1,000 within the first 24 hours
[09:39] and I think it's been 4 days now and it
[09:41] should cross $2,000 pretty soon which is
[09:44] pretty good for a tiny product like this
[09:46] one that's it I hope you enjoy the video
[09:48] and you realize the power of AI how a
[09:51] little guy like me can have a junior
[09:53] engineer and a copywriter and maybe even
[09:55] a secretary assistant thanks to AI if
[09:58] you want to dive deeper into how I get
[10:00] couple thousand visitors and the first
[10:02] customers on all my products I'll link
[10:04] to another video somewhere where I go
[10:06] more into details into that if you like
[10:08] the video you can like the video and if
[10:09] you loved it you can subscribe to the
[10:11] channel until then I'll see you for the
[10:12] next video and I hope you just ship it
[10:14] cheers