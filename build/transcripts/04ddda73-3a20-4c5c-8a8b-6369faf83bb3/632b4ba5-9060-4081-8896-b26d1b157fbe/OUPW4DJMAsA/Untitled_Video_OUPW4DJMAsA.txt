Video Title: Untitled_Video
Video ID: OUPW4DJMAsA
URL: https://www.youtube.com/watch?v=OUPW4DJMAsA
View Count: 0

[00:00] today we're going to be going through
[00:01] the full setup of connecting mCP servers
[00:03] to NN I'm going to walk through how you
[00:05] self-host your NN I'm going to walk
[00:06] through how you can install the
[00:07] community node and then how to actually
[00:09] set up the community node the best part
[00:11] is you don't have to open up a terminal
[00:12] or a shell and type in any install
[00:14] commands all we have to do is connect to
[00:16] the servers through nend so if that
[00:18] sounds like something that interests you
[00:19] let's dive into it make sure you guys
[00:21] stick around for the end of this one
[00:22] because we're going to talk about the
[00:23] current limitations of these mCP nodes
[00:25] we're going to talk about some problems
[00:26] you may face that no one else is talking
[00:27] about and really what does it mean to
[00:29] actually be able to scale these agents
[00:31] with mCP servers now there are a ton of
[00:33] different platforms that you can use to
[00:34] host nadn the reason I'm using aleso is
[00:36] because it's going to be really simple
[00:37] for deploying and managing open source
[00:39] software especially with something like
[00:41] NN you can pretty much deploy it in just
[00:43] a few clicks and it's going to take care
[00:44] of installation configuration security
[00:47] backups updates all this kind of stuff
[00:49] so there's no need for you to have that
[00:50] devops knowledge because I certainly
[00:52] don't so that's why we're going with
[00:55] aeso it's also sock 2 and gdpr compliant
[00:58] so that's important anyways like I said
[01:00] we're going to be going through the full
[01:01] process so I'm going to click on free
[01:02] trial I'm going to sign up with a new
[01:04] account so I'm going to log out and sign
[01:05] up as a new user okay now that I entered
[01:07] that we're already good to go the first
[01:08] thing I'm going to do is set up a
[01:10] payment method so that we can actually
[01:11] spin up a service so I went down to my
[01:13] account in the left hand side and then I
[01:14] clicked on payment options and I'm going
[01:16] to add a card real quick now that that's
[01:17] been added it's going to take a few
[01:18] minutes for our account to actually be
[01:20] approved so I'm just going to wait for
[01:21] that you can see we have a support
[01:23] ticket that got opened up which is just
[01:24] waiting for account activation also
[01:27] here's the approval email I got just
[01:28] keep in mind it says it'll be be
[01:30] activated in a few minutes during
[01:31] business hours but if you're doing this
[01:32] at night or on the weekends it may take
[01:33] a little longer okay there we go we are
[01:35] now activated so I'm going to come up
[01:36] here to services and I'm going to add a
[01:38] new service what we're going to do is
[01:40] just type in nadn and it's going to be a
[01:41] really quick oneclick install basically
[01:44] I'm going to just be deploying on hetner
[01:46] as a cloud provider I'm going to switch
[01:48] to my region and then you have different
[01:50] options for service plans so these
[01:52] options obviously have different numbers
[01:53] of CPUs different amount of RAM and
[01:55] storage I'm going to start right now on
[01:57] just the medium I would keep in mind
[01:58] that mCP servers can be kind of resource
[02:00] intensive so if you are running multiple
[02:02] of them and your environment is crashing
[02:05] then you're probably just going to want
[02:06] to come in here and upgrade your service
[02:07] plan so we can see down here here is the
[02:09] estimated hourly price here's the plan
[02:11] we're going with and I'm going to go
[02:12] ahead and move forward now we're going
[02:13] to set up the name so this will pop up
[02:15] as your domain for your nadn environment
[02:17] then I went ahead and called this nn-
[02:19] demo what you can do here is you can add
[02:21] more volume so if you wanted to you
[02:22] could increase the amount of storage and
[02:24] as you can see down here it's going to
[02:25] increase your hourly price I'm not going
[02:26] to do that but you do have that option
[02:28] then of course you have some ADV
[02:30] configuration for software updates and
[02:31] system updates once again I'm just going
[02:33] to leave that as is and then you can
[02:35] also choose the level of support that
[02:36] you need you can scan through your
[02:38] different options here obviously you'll
[02:39] have a different price associated with
[02:40] it but on the default plan I'm just
[02:42] going to continue with level one support
[02:45] and now I'm going to click on create
[02:46] service okay so I don't have enough
[02:48] credits to actually deploy this service
[02:49] so I'm going to have to go add some
[02:51] credits in my account so back in the
[02:52] account I went to add credits and now
[02:54] that I have a card I can actually add
[02:55] some credits so I'm going to agree to
[02:57] the terms and add funds payment
[02:59] successful nice we have some money to
[03:00] play with down here we can see 10
[03:01] credits this is also where we'll see how
[03:03] much we're spending per hour once we
[03:05] have this service up and running
[03:06] unfortunately we have to do that all
[03:08] again so let me get back to the screen
[03:09] we were just on okay now we're back here
[03:11] I'm going to click create service we're
[03:12] deploying your service please wait and
[03:14] this is basically just going to take a
[03:15] few minutes to spin up okay so now what
[03:17] we see is the service is currently
[03:18] running we can click into the service
[03:20] and we should be able to get a link
[03:21] that's going to take us to our n andn
[03:23] instance so here's what it looks like we
[03:24] can see it's running we have all these
[03:25] different tabs and all these different
[03:26] things to look through we're going to
[03:27] keep it simple today and not really dive
[03:29] into it but what we're going to do is
[03:30] come down here to our Network and this
[03:31] is our actual domain to go to so if I
[03:34] select all of this and I just click go
[03:36] to this app it's going to spin up our NN
[03:38] environment and because this is the
[03:39] first time we're visiting it we just
[03:41] have to do the setup okay so once we
[03:42] have that configured going to hit next
[03:44] we have to do some fun little onboarding
[03:45] where it's going to ask us some
[03:46] questions right here so then when you're
[03:48] done with that you just got to click get
[03:49] started and you now have this option to
[03:51] get some paid features for free I'm
[03:52] going to hit skip and we're good to go
[03:54] we are in NN so what's next is we need
[03:57] to install a community node so if you
[03:59] come down here to your settings and you
[04:00] click on settings um you can see you're
[04:02] on the community plan we can go all the
[04:04] way down here to community nodes and now
[04:06] we have to install a community node so
[04:08] in the description we have the GitHub
[04:09] repository for this n8n nodes mCP that
[04:12] was made by nerding and you can see
[04:13] there's some information on how to
[04:14] actually install this but all we have to
[04:16] do is basically just copy this line
[04:18] right here I'm just going to copy nn-
[04:19] noodes dmcp click on install a community
[04:22] node put that in there hit understand
[04:24] and so the reason you can only do this
[04:25] on self-hosted is because these nodes
[04:27] are not a native verified node from n
[04:30] end so it's just like you know we're
[04:32] downloading it from a public Source at
[04:33] least the code and then we hit install
[04:36] package installed we can now see we have
[04:37] one Community node which is the mCP cool
[04:40] so I'm going to leave my settings and
[04:41] I'm going to open up a new workflow and
[04:43] we're just going to hit tab to see if we
[04:45] have the actual node so if I type in mCP
[04:47] we can see that we have mCP client and
[04:49] we have this little block which just
[04:50] means that it is part of the community
[04:52] node so I'm going to click into here and
[04:54] we can see we have some different
[04:55] options we can execute a tool we can get
[04:57] a prompt template we can list available
[04:58] prompts list available resources list
[05:01] available tools and read a resource
[05:03] right now let's go with list available
[05:04] tools um the main one we'll be looking
[05:06] at is listing tools and then executing
[05:08] tools so quick plug for the school
[05:10] Community if you're looking for more
[05:11] Hands-On learning experience as well as
[05:13] wanting to connect with over 700 members
[05:15] who are also dedicated to this rapidly
[05:16] evolving space then definitely give this
[05:18] community a look we have great
[05:20] discussions great guest speakers as you
[05:21] can see we also have a classroom section
[05:23] with stuff like building agents Vector
[05:25] databases apis and HTTP requests
[05:27] step-by-step builds all the live calls
[05:29] are recorded all this kind of stuff so
[05:30] if this sounds interesting to you then
[05:32] I'd love to see you in a live call
[05:33] anyways let's get back to the video so
[05:35] obviously we have the operation but we
[05:36] haven't set up a credential yet so now
[05:39] what you're going to do is go to a
[05:40] different Link in the description which
[05:41] is the GitHub repository for different
[05:43] mCP servers and we can pretty much
[05:46] connect to any of these like I said
[05:47] without having to run any code in our
[05:49] terminal and install some stuff at least
[05:51] because we're hosting in the cloud if
[05:53] we're hosting locally it may be a little
[05:54] different okay so I've seen a ton of
[05:56] tutorials go over like Brave search or
[05:58] fir crawl um so let's TR try to do
[05:59] something a little more fun I think
[06:01] first we'll start off with Airbnb
[06:02] because this one is going to be free you
[06:04] don't even have to go get an API key so
[06:05] that's really cool so I'm going to click
[06:06] into this Airbnb mCP server there's a
[06:09] bunch of stuff going on here and if you
[06:11] understand GitHub and repositories and
[06:12] some code you can look through like the
[06:14] docker file and everything which is
[06:15] pretty cool but for us non- techies all
[06:18] we have to do is come down here it's
[06:20] going to tell us what tools are
[06:21] available but we just need to look at
[06:22] how to actually install this and so all
[06:24] we're looking for is the MPX type
[06:27] installer and so after my testing I
[06:29] tried this one first but it wouldn't let
[06:31] us execute the tool because we need to
[06:32] use this thing that is ignore robots
[06:34] text which just basically lets us
[06:35] actually access the platform so you can
[06:38] see here we have a command which is npx
[06:40] and then we have an array of arguments
[06:41] which is dy this open BNB thing and then
[06:44] also the ignore robots text so first of
[06:46] all I'm just going to grab the command
[06:47] which is npx copy that go back and endit
[06:50] end and we're going to create a new
[06:51] credential this one's going to be for
[06:53] Airbnb so I'm just going to name this so
[06:54] we have it kept and then we're just
[06:56] going to paste the command right into
[06:57] there MPX now we can see we have
[07:00] arguments to fill out so I'm going to go
[07:01] back into that documentation we can see
[07:03] the arguments are Dy and then the next
[07:06] one is the open BNB and then the next
[07:08] one is ignore robots text so we're going
[07:10] to put them in one by one so first is
[07:12] the Dy now I'm going to go back and grab
[07:14] the at open BNB put a space and then
[07:18] paste it in there and then I'm going to
[07:19] put another space and then we're going
[07:20] to grab this last part which is the
[07:22] ignore robots txt so once we paste that
[07:25] in there we can basically just hit save
[07:27] as you can see we've connected
[07:28] successfully um the credential is now in
[07:29] our space and we didn't have to type in
[07:31] anything in a terminal and now if we hit
[07:33] test step we should be able to pull in
[07:35] the tools that this mCP server gives us
[07:37] access to so it's as easy as that as you
[07:39] can see there are two tools the first
[07:40] one is Airbnb search here's when you use
[07:42] it and then here's the schema to send
[07:44] over to that tool and then the second
[07:46] one is Airbnb listing details here's
[07:48] when you want to use that and then
[07:49] here's the schema that you would send
[07:51] over and now from here which is really
[07:52] cool we can click on another node which
[07:54] is going to be an mCP client once again
[07:56] and this time we want to execute a tool
[07:58] we already have our credentials set up
[08:00] we just did that together and now all we
[08:01] have to do is configure the tool name
[08:03] and the tool parameters so just as a
[08:05] quick demo that this actually works the
[08:06] tool name we're going to drag in Airbnb
[08:08] search as you can see and then for the
[08:10] parameter we can see these are the
[08:11] different things that we need to fill
[08:12] out and so all I'm going to do is just
[08:14] send over a location so I obviously
[08:17] hardcoded in location equals Los Angeles
[08:19] that's all we're going to try and now
[08:21] we're going to hit test step and we
[08:22] should see that we're getting airbnbs
[08:23] back that are in Los Angeles there we go
[08:26] we have um ton of different items here
[08:29] so let's actually take a look at this
[08:31] listing so if I just copy this into the
[08:33] browser we should see an Airbnb Arts
[08:35] District guest house this is in Culver
[08:37] City California and obviously we could
[08:39] make our search more refined if we were
[08:40] able to also put in like a check-in and
[08:42] checkout date how many adults how many
[08:44] children how many pets we could specify
[08:46] the price all this kind of stuff okay
[08:48] cool so that was an example of how we
[08:50] search through an mCP server to get the
[08:51] tools and then how we can actually
[08:52] execute upon that tool but now if we
[08:55] want to give our agent access to an mCP
[08:57] server what we would do is obviously
[08:58] we're going to add an AI agent we are
[09:01] first of all going to come down here
[09:03] give it a chat input so we can actually
[09:04] talk to the agent so we'll add that
[09:06] right here and now we obviously need to
[09:07] connect a chat model so that the agent
[09:09] has a brain and then give it the mCP
[09:11] tools so first of all just to connect a
[09:12] chat model I'm just going to grab an
[09:14] open AI I'm sorry for being boring but
[09:16] all we have to do is create a credential
[09:17] so if you go to your open account and
[09:19] grab an API key so here's my account as
[09:21] you can see I have a ton of different
[09:22] keys but I'm just going to create a new
[09:24] one this is going to be mCP test and
[09:26] then all we have to do is copy that key
[09:28] come back and end it in and we're going
[09:29] to paste that right in here so there's
[09:31] our key hit save we'll go green we're
[09:33] good to go we're connected to open Ai
[09:35] and now we can choose our model so for
[09:37] Min is going to work just fine here now
[09:39] to add a tool once again we're going to
[09:40] add the mCP client tool right here and
[09:43] let's just do Airbnb one more time so
[09:45] we're connected to Airbnb list tools and
[09:47] I'm just going to say what tools do I
[09:50] have and what's going to happen is it
[09:53] errored because the nadn nodes mCP tool
[09:56] is not recognized yet even though the
[09:58] mCP nodes are so we have to go back into
[10:00] aleso real quick and change one thing so
[10:03] coming back into the GitHub repository
[10:04] for the NN mCP node we can see it gives
[10:07] us some installation information right
[10:09] but if we go all the way down to how to
[10:11] use it as a tool um if I can scroll all
[10:13] the way down here so here is an example
[10:15] of using it as a tool you have to set up
[10:17] the environment variable within your
[10:18] hosting environment so whether it's a
[10:20] Leo or render or digital Ocean or
[10:22] whatever you're doing it it'll be a
[10:24] little different but you just have to
[10:25] navigate down to where you have
[10:26] environment variables we have to set
[10:28] nadn Community _ package underscore
[10:31] allow tool usage we have to set that to
[10:33] equal true so I'm going to come back
[10:35] into our letio service and right here we
[10:37] have the software which is NN version
[10:39] latest and what we can do is we can you
[10:41] know restart view app logs we can change
[10:43] the version here or we can update the
[10:45] config which if we open this up it may
[10:47] look a little intimidating but all we're
[10:48] looking for is right here we have
[10:50] environment and we can see we have like
[10:52] different stuff with our postgress with
[10:54] our web hook tunnel URLs all this kind
[10:56] of stuff and so at the bottom I'm just
[10:57] going to add a new line and I'm going to
[10:59] paste in that command we had which was
[11:00] NN Community packages allow and then
[11:03] instead of an equal I'm going to put a
[11:05] colon and now we have that n Community
[11:07] packages allow is set to true and I'm
[11:10] just adding a space after the colon so
[11:12] now it's pink and all we're just going
[11:13] to do is hit update and restart and so
[11:15] this is going to respin up our instance
[11:17] okay so looks like we are now finished
[11:18] up I'm going to go ahead and close out
[11:19] of this we can see that our instance is
[11:21] running so now I'm going to come back
[11:22] into here and I actually refreshed this
[11:24] so our agent's gone so let me get him
[11:26] back real quick all right so we have our
[11:28] agent back we're going to go and add
[11:29] that mCP tool once again right here we
[11:32] are going to have our credential already
[11:33] set up the operation is list tools and
[11:35] now let's try one more time asking it
[11:38] what tools do you
[11:40] have and it knows to use this node
[11:42] because it's the operation here is list
[11:43] tools so it's going to be pretty
[11:44] intelligent about it now it's able to
[11:46] actually call that tool because we set
[11:48] up that environment variable so let's
[11:50] see what Airbnb responds with as far as
[11:51] what tools it actually can use cool so I
[11:54] have access to the following tools
[11:55] Airbnb search and listing details now
[11:57] let's add the actual tool that's going
[11:59] going to execute on that tool so Airbnb
[12:03] um once again we have a credential
[12:04] already set up the operation we're going
[12:05] to choose execute tool instead and now
[12:07] we have to set up what is going on
[12:09] within this tool so the idea here is
[12:11] that when the client responds with okay
[12:13] I have Airbnb search and I have Airbnb
[12:15] listing details the agent will then
[12:17] figure out based on what we asked which
[12:19] one do I use and the agent has to pass
[12:21] that over to this next one which is
[12:23] actually going to execute so what we
[12:25] want to do here is the tool name cannot
[12:27] be fixed because we want to make this
[12:29] Dynamic so I'm going to change this to
[12:30] an expression and I'm going to use the
[12:32] handy from AI function here which is
[12:34] basically we're just going to tell the
[12:35] AI agent okay you know based on what's
[12:38] going on you choose which tool to use
[12:41] and you're going to put that in here so
[12:42] I'm going to put in quotes tool and then
[12:45] I'm going to just Define what that means
[12:47] and in quotes after a comma I'm going to
[12:49] say the tool selected so we'll just
[12:52] leave it as simple as that and then
[12:54] what's really cool is for the tool
[12:55] parameters this is going to change based
[12:57] on the actual tool selected because
[12:59] there's different schemas or parameters
[13:01] that you can send over to the different
[13:03] tools so we're going to start off by
[13:05] just hitting this button which lets the
[13:07] model Define this parameter it's going
[13:08] to get back what not only what tool am I
[13:10] using but what schema do I need to send
[13:12] over so it should be intelligent enough
[13:14] to figure it out for simple queries so
[13:16] let's change this name to
[13:18] Airbnb execute I'm going to change this
[13:21] other one to Airbnb tools and then we'll
[13:24] have the agent try to figure out what's
[13:25] going on and just a reminder there's no
[13:28] system prompt in here it literally just
[13:29] says you're a helpful assistant so we'll
[13:31] see how intelligent this stuff is okay
[13:33] so I'm asking it to search for airbnbs
[13:34] in Chicago for four adults let's try
[13:36] that off we should obviously be using
[13:38] the Airbnb Search tool and then we want
[13:41] to see if it can fill out the parameters
[13:42] with a location but also how many adults
[13:44] are going to be there because earlier
[13:46] all we did was location so we got a
[13:48] successful response already back once
[13:50] this finishes up we should see
[13:52] potentially a few links down here that
[13:53] actually link to places so here we go um
[13:56] luxury designer Penthouse Gold Coast its
[13:59] apartment it has three bedrooms eight
[14:01] beds so that definitely fits for guests
[14:03] and you can also see it's going to give
[14:04] us the price per night as well as you
[14:06] know the rating and just some other
[14:07] information so let's click into this one
[14:09] real quick and we'll take a look make
[14:10] sure it actually is in Chicago and it
[14:12] has all the stuff this one does have 10
[14:14] guests so awesome and we can see we got
[14:16] five total listings so without having to
[14:19] configure you know here's the API
[14:21] documentation and here's how we set up
[14:22] our HTTP request we're already able to
[14:25] do some pretty cool Airbnb searches so
[14:27] let's take a look in the Airbnb execute
[14:28] tool
[14:29] we can see that what it sent over was a
[14:31] location as well as a number of adults
[14:33] which is absolutely perfect the model
[14:35] was able to determine how to format that
[14:36] and send it over as Json and then we got
[14:39] back our actual search results and now
[14:41] we're going to do something where you
[14:42] actually do need an API key because most
[14:44] of these you are going to need an API
[14:46] key so we're going to go ahead and do
[14:47] Brave search because you can search the
[14:48] web um using Brave search API so we're
[14:50] going to click into this and all we have
[14:52] to do is once again we can see the tools
[14:54] here but we want to scroll down and see
[14:56] how you actually configure it so the
[14:58] first step is to go to bra search and
[14:59] get an API key you can click on this
[15:01] link right here and you'll be able to
[15:02] sign in and get 2,000 free queries and
[15:05] then you'll grab your API key so I'm
[15:06] going to log in real quick so it may
[15:07] send you a code to your email to verify
[15:09] it you'll just put in the code of course
[15:11] and then we're here as you can see I've
[15:12] only done one request so far I'm going
[15:15] to click on API keys on this left hand
[15:16] side and we're just going to copy this
[15:18] token and then we can put it into our
[15:20] configuration so let's walk through how
[15:21] we're going to do that so I'm going to
[15:23] come in here and add a new tool we're
[15:24] going to add another mCP client tool and
[15:26] we're going to create a new credential
[15:27] because we're no longer connecting to
[15:29] airbnb's server we're connecting to
[15:31] Brave search server so create new
[15:33] credential let me just name this one
[15:34] real quick so we don't get confused and
[15:36] then of course we have to set up our
[15:37] Command our arguments and our
[15:39] environments and this is where we're
[15:41] going to put our actual API key okay so
[15:43] first things first the command coming
[15:45] back into the brave search mCP server
[15:47] documentation we can see that we can
[15:48] either do Docker but what we're doing
[15:50] every time we're connecting to this in
[15:52] NN is going to be MPX so our Command
[15:54] once again is MPX copy that paste it
[15:57] into the command and now let's go back
[15:59] and get our arguments which is always
[16:00] going to start off with
[16:02] Dy then after that put a space we're
[16:05] going to connect to this mCP server
[16:07] which is the brave search and then you
[16:08] can see that's it in the Airbnb one we
[16:10] had to add the robots text in this one
[16:12] we didn't so everyone is going to
[16:13] configure a little bit differently but
[16:15] all you have to do is just read through
[16:16] the command the arguments and then the
[16:18] environment variables and in this case
[16:20] unlike the Airbnb one we actually do
[16:22] need an API key so what we're going to
[16:23] do is we're going to put in all caps
[16:25] Brave uncore API uncore key so in the
[16:28] environment VAR Ables I'm going to
[16:29] change this to an expression just so we
[16:30] can actually see Brave API _ key and
[16:34] then I'm going to put an equals and then
[16:35] it says to put your actual API key so
[16:37] that's where we're going to paste in the
[16:38] API key from Brave search okay so I put
[16:40] in my API key obviously I'm going to
[16:42] remove that after this video gets
[16:43] uploaded but now we'll hit save and
[16:45] we'll make sure that we're good to go
[16:46] cool and now we're going to actually
[16:48] test this out so I'm going to call this
[16:51] Brave search tools um and then before we
[16:55] add the actual execute tool I'm just
[16:56] going to ask and make sure it works so
[16:59] what Brave search tools do you
[17:03] have and it knows of course to hit the
[17:05] brave search because we gave it a good
[17:06] name and it should be pulling back with
[17:08] its different functions which I believe
[17:10] there are
[17:11] two okay so we have Brave web search and
[17:13] we have Brave local search we also have
[17:15] you know of course the description of
[17:17] when to use each one and the actual
[17:18] schemas to send over so let's add a tool
[17:21] and make sure that it's working we're
[17:22] going to click on the plus we're going
[17:24] to add an mCP client tool we already
[17:25] have our brave credential connected
[17:27] we're going to change the operation to
[17:28] to execute tool and once again we're
[17:30] going to fill in the tool name and the
[17:32] parameters so for the tool name same
[17:34] exact thing we're going to do from Ai
[17:37] and once again this is just telling the
[17:38] AI what to fill in here so we're going
[17:40] to call it tool we're going to give it a
[17:41] very brief description of the tool
[17:44] selected and then we are just going to
[17:46] enable the tool parameters to be filled
[17:48] out by the model automatically final
[17:50] thing is just to call this Brave search
[17:53] execute cool there we go so now we have
[17:56] um two functions for airbn B two for
[17:59] brave search and let's make sure that
[18:00] the agent can actually distinguish
[18:02] between which one to use so I'm going to
[18:04] say search the web for information about
[18:08] AI agents so we'll Su that off looks
[18:11] like it's going straight to the brave
[18:12] search execute so we may have to get
[18:14] into the system prompt and tweak it a
[18:15] little bit now it's going back to the
[18:17] brave search tools to understand okay
[18:19] what actions can I take and now it's
[18:21] going back to the brave search execute
[18:22] tool and hopefully this time it'll get
[18:24] it right so it looks like it's going to
[18:27] compile an answer right now based on it
[18:29] search result and then we'll see exactly
[18:30] what happened there we go so we have
[18:33] looks like oh wow it gave us nine
[18:34] different articles um what are AI agents
[18:37] by IBM we can click into here to read
[18:39] more so this takes us straight to IBM's
[18:41] article about AI agents we have one also
[18:44] from AWS we can click into there there's
[18:46] Amazon and let's go all the way to the
[18:48] bottom we also have one on Agents from
[18:50] cloudflare so let's click into here and
[18:52] we can see it took us exactly to the
[18:54] right place so super cool we didn't have
[18:56] to configure any sort of API
[18:57] documentation as you can see in Brave
[18:59] search if we wanted to connect to this a
[19:01] different way we would have had to copy
[19:02] this curl command statically set up the
[19:05] different headers and the parameters but
[19:07] now with this server we can just hit it
[19:09] right away so let's take a look in the
[19:11] agent logs though because we want to see
[19:12] what happened so the first time it tried
[19:14] to go straight to the execute tool and
[19:16] as you can see it filled in the
[19:17] parameters incorrectly as well as the
[19:19] actual tool name because it didn't have
[19:21] the information from the server then it
[19:23] realized okay I need to go here first so
[19:25] that I can find out what I can do I
[19:27] tried to use a tool called web search
[19:28] search as you can see earlier web search
[19:30] but what I needed to do was use a tool
[19:32] called Brave web search so now on the
[19:35] second try back to the tool it got it
[19:37] right and it said Brave web search it
[19:39] also filled out some other information
[19:40] like how many articles are we looking
[19:41] for and what's the offset so if we were
[19:44] to come back in here and say get me one
[19:47] article
[19:48] on dogs let's see what it would do so
[19:51] hopefully it's going to fill in the
[19:51] count as one once again it went straight
[19:53] to the tool and it may I was going to
[19:55] say if we had memory in the agent it
[19:57] probably would have worked because it
[19:59] would have seen that it used Brave web
[20:00] search previously but there's no memory
[20:02] here so it did the exact same pattern
[20:04] and we would basically just have to
[20:05] prompt in this agent hey search the mCP
[20:09] server to get the tools before you try
[20:11] to execute a tool but now we can see it
[20:13] found one article it's called it's just
[20:15] Wikipedia so we can click in here and
[20:16] see it's dog on Wikipedia But if we
[20:19] click into the actual Brave search
[20:20] execute tool we can see that what it
[20:22] filled out for the query was dogs and it
[20:23] also knew to make the count one rather
[20:26] than last time it was 10 okay so
[20:28] something I want you guys keep in mind
[20:29] is when you're connecting to different
[20:31] mCP servers the setup will always be the
[20:33] same where you'll look in the GitHub
[20:35] repository you'll look at the command
[20:37] which will be npx you'll look at the
[20:39] arguments which will be- y space the
[20:42] name of the server and then sometimes
[20:43] there'll be more and then after that
[20:45] you'll do your environment variable
[20:46] which is going to be a credential some
[20:47] sort of API key so here what we did was
[20:50] we asked air table to list its actions
[20:51] and in this case as you can see it has
[20:53] 13 different actions and within each
[20:55] action there's going to be different
[20:56] parameters to send over so when you
[20:58] start to to scale up to some of these
[20:59] mCP servers that have more actions and
[21:01] more parameters you're going to have to
[21:03] be a little more specific with your
[21:05] prompting as you can see in this agent
[21:07] there's no prompting going on it's just
[21:08] your helpful assistant and what I'm
[21:10] going to try is in my air table I have a
[21:12] base called contacts a table called
[21:14] leads and then we have this one record
[21:16] so let's try to ask it to get that
[21:18] record okay so I'm asking it to get the
[21:20] records in my air table base called
[21:21] contacts in my table called leads okay
[21:24] so we got the error receive tool input
[21:26] did not match expected schema and so
[21:28] this really is because what has to
[21:30] happen here is kind of complex it has to
[21:32] first of all go get the bases to grab
[21:34] the base ID and then it has to go grab
[21:36] the tables in that base to get the table
[21:38] ID and then it has to formulate that
[21:40] over in a response over here as you can
[21:42] see if the operation was to list records
[21:44] it has to fill out the base ID and the
[21:46] table ID in order to actually get those
[21:48] records back so that's why it's having
[21:49] trouble with that and so a great example
[21:51] of that is within my email agent for my
[21:53] ultimate assistant in order to do
[21:55] something like label emails we have to
[21:57] send over the message ID of the email
[21:59] that we want to label and we have to
[22:01] send over the ID of the label to
[22:03] actually add to that message and in
[22:04] order to do those two things we first
[22:06] have to get all emails to get the
[22:08] message ID and then we have to get
[22:10] labels to get the label ID so it's a
[22:11] multi-step process and that's why this
[22:13] agent with minimal prompting and not a
[22:15] super robust parameter in here it's
[22:17] literally just defining by the model
[22:19] it's a little bit tough but if I said
[22:20] something like get my airtable bases
[22:23] we'll see if it can handle that because
[22:25] that's more of a one-step function and
[22:27] it looks like it's having trouble
[22:28] because if we click into this actions we
[22:30] can see that the operation of listing
[22:31] bases sends over an empty array so it's
[22:35] having trouble being able to like send
[22:36] that data over okay so I'm curious
[22:38] though I went into my Air table and I
[22:40] grabbed a base ID now I'm going to ask
[22:42] what tables are in this air table base
[22:44] ID and I gave it the base ID directly so
[22:46] it won't have to do that list bases
[22:47] function and now we can see it actually
[22:49] is able to call the tool hopefully so
[22:51] it's green and it probably put in that
[22:53] base ID and we'll be able to see what
[22:55] it's doing here but this just shows you
[22:57] there are still obvious see some
[22:58] limitations and I'm hoping that NN will
[23:00] make a native you know mCP server node
[23:03] but look what it was able to do now is
[23:04] it has here are the tables within the
[23:06] air table base ID that we provided and
[23:08] these are the four tables and this is
[23:10] correct and so now I'm asking it what
[23:11] records are in the air table base ID of
[23:13] this one in the table ID of this one and
[23:16] it should be able to actually use its
[23:17] list records tool now in order to fill
[23:20] in those different parameters and
[23:21] hopefully we can see our record back
[23:23] which should be Robert California so we
[23:25] got a successful tool execute as you can
[23:27] see let's wait for this to pop back into
[23:30] the agent and then respond to us so now
[23:31] we have our actual correct record Robert
[23:33] California saber customi solution all
[23:36] this kind of stuff and as you can see
[23:37] that's exactly what we're looking at
[23:39] within our actual air table base and so
[23:41] I just thought that that would be
[23:41] important to show off here how this is
[23:44] like really cool but it's not fully
[23:45] there yet so I definitely think it will
[23:47] get there especially if we get some more
[23:48] native Integrations with NN but I
[23:50] thought that that would be a good demo
[23:51] to show the way that it needs to fill in
[23:53] these parameters in order to get records
[23:56] and you know this type of example
[23:57] applies to tons of different things that
[23:59] you'll do within mCP servers so there's
[24:02] one more thing I want to show you guys
[24:03] real quick just so you will not be
[24:04] banging your head against the wall the
[24:06] way I was a couple days ago when I was
[24:07] trying to set up perplexity so because
[24:09] you have all these different servers to
[24:10] choose from you may just trust that
[24:12] they're all going to be the exact same
[24:13] and they're going to work the same so
[24:14] when I went to set up the perplexity ask
[24:16] mCP server I was pretty excited command
[24:18] was MPX I put in my arguments I put in
[24:20] my environment variable which was my
[24:22] perplexity API key and you can see I set
[24:24] this up exactly as it should be my API
[24:26] key is in there I triple checked to make
[24:27] sure it was correct and then when I went
[24:29] to test step basically what happened was
[24:31] couldn't connect to the mCP Server
[24:33] Connection closed and so after digging
[24:35] into what this meant because I set up
[24:37] all these other ones as you can see in
[24:38] here I've did these and I have more that
[24:39] I've connected to the reason why this
[24:42] one isn't working I imagine is because
[24:44] on the server side of things on
[24:45] perplexity side of things it's either
[24:47] going undergoing maintenance or it's not
[24:49] fully published yet and it's not
[24:51] anything wrong with the way that you're
[24:52] deploying it so I just wanted to throw
[24:54] that out there because there may be some
[24:55] other ones in this big list that are not
[24:57] fully there yet so if you are
[24:59] experiencing that error and you know
[25:00] that you're filling out that you know
[25:01] MPX and the arguments and the
[25:03] environment variable correct then that's
[25:05] probably why don't spend all day on it
[25:07] just want to throw that out there
[25:09] because you know I had I had a moment
[25:11] the other day but that's going to be it
[25:13] for today's video I hope you guys
[25:14] enjoyed it hope you learned something
[25:16] new if this one helped out please give
[25:17] it a like it definitely helps me out a
[25:19] ton and as always appreciate you guys
[25:20] making it to the end of the video and I
[25:22] will see you all in the next one thanks
[25:24] everyone