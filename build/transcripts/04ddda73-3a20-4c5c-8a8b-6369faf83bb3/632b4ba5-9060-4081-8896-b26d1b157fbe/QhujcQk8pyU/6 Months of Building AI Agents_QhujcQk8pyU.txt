Video Title: 6 Months of Building AI Agents in 43 Minutes (without the hype)
Video ID: QhujcQk8pyU
URL: https://www.youtube.com/watch?v=QhujcQk8pyU
View Count: 56,959

[00:00] everyone is talking about AI agents
[00:01] right now and we are living in such a
[00:03] cool time because with zero coding
[00:05] background you can get in there and
[00:07] leverage these tools and build some
[00:08] really cool AI systems if you guys don't
[00:10] know me my name is Nate I have zero
[00:12] programming background and around 6
[00:13] months ago I started experimenting with
[00:15] implementing AI into automations and
[00:18] today I'm running an AI automation
[00:19] agency where we help clients scale their
[00:21] business without increasing headcount
[00:22] and we do this all using no code tools
[00:24] like nadn I also run a community that's
[00:26] focused on helping others learn how to
[00:28] build these AI agents again with zero
[00:30] coding background so if this kind of
[00:31] stuff sounds interesting to you make
[00:32] sure to watch this video all the way to
[00:34] the end and definitely check out my
[00:35] community the link for that will be down
[00:36] in the description but anyways let's get
[00:38] right into this one because everyone's
[00:40] talking about this kind of stuff there's
[00:41] a lot of hype and there's a lot of noise
[00:42] to cut through so the first thing I want
[00:44] to do is talk about the hard truths
[00:45] about AI agents and then I'll get into
[00:47] the seven lessons that I've learned over
[00:49] the past six months building these
[00:50] things so the first one is that most AI
[00:52] agent demos online are just that they're
[00:54] demos so the kind of stuff that you're
[00:56] going to see on LinkedIn blog posts
[00:58] YouTube admittedly my own videos as well
[01:01] these are not going to be production
[01:02] ready builds or production ready
[01:03] templates that you could immediately
[01:05] start to plug into your own business or
[01:06] try to sell to other businesses you'll
[01:08] see all sorts of cool use cases like web
[01:10] researchers salespeople travel agents
[01:13] just for some context these are
[01:14] screenshots of some of the videos I've
[01:16] made on YouTube this one is like a
[01:17] content creator this one is a human Loop
[01:19] calendar agent we've got a technical
[01:21] analyst we have a personal assistant
[01:22] with all its agents over here stuff like
[01:24] that but the reality is that all of
[01:26] these pretty much are just going to be
[01:27] you know proof of Concepts they're meant
[01:29] to open open everyone's eyes to what
[01:31] this kind of stuff looks like visually
[01:33] how you can spin this kind of stuff up
[01:34] the fundamentals that go into building
[01:36] these workflows and at least me
[01:37] personally my biggest motivation in
[01:39] making these videos is to show you guys
[01:41] how you can actually start to build some
[01:42] really cool stuff with zero programming
[01:44] background and so why do I give all
[01:46] those templates away for free it's
[01:48] because I want you guys to download them
[01:49] hit run see the data flow through and
[01:51] understand what's going on within each
[01:53] node rather than being able to sell that
[01:54] or use it directly in your business
[01:56] because everyone has different
[01:57] Integrations everyone's going to have
[01:58] different system prompted and different
[02:00] little tweaks that they need for an
[02:02] automation to be actually high value for
[02:04] them besides that a lot of this is meant
[02:06] to be within a testing environment but
[02:08] if you push it into production and you
[02:09] expose it to all the different edge
[02:11] cases and a tons of different users
[02:13] things are going to come through
[02:13] differently and the automation is going
[02:15] to break and what you need to think
[02:17] about is even these massive companies in
[02:18] the space like apple Google Amazon
[02:21] they're also having issues with AI
[02:23] reliability like what we saw with apple
[02:25] intelligence having to be delayed so if
[02:26] a company like this with a massive
[02:28] amount of resources is struggling with
[02:30] some of these production ready
[02:31] deployments then it's kind of
[02:33] unrealistic to think that a beginner or
[02:34] non-programmer in these tools can spin
[02:36] up something in a few days that would be
[02:38] fully production ready and by that I
[02:40] just mean like the stuff you see online
[02:42] you could easily get into NN build
[02:44] something test it and get it really
[02:46] robust in order to sell it that's not
[02:47] what I'm saying at all just kind of the
[02:49] stuff you see online isn't there yet now
[02:51] the second thing is being able to
[02:53] understand the difference between AI
[02:54] agents and Ai workflows and it's one of
[02:56] those buzzword that everyone's kind of
[02:58] calling everything an agent when in
[03:00] reality that's not the truth so a lot of
[03:02] times people are calling things AI
[03:03] agents even if they're just sort of like
[03:05] an AI powered workflow now what's an AI
[03:07] powered workflow well as you can see
[03:08] right down here this is one that I had
[03:10] built out and this is an AI powered
[03:12] workflow because it's very sequential as
[03:14] you can see the data moves from here to
[03:16] here to here to here to here to here and
[03:18] it goes down that process every time
[03:20] even though there are some elements in
[03:21] here using AI like this basic chain and
[03:23] this email writing agent now this has a
[03:25] fixed amount of steps and it flows in
[03:27] this path every single time whereas
[03:29] something over here like an AI agent it
[03:31] has different tools that it's able to
[03:32] call and based on the input we're not
[03:34] sure if it's going to call each one once
[03:36] or it's going to call this one four
[03:37] times or if it's going to call this one
[03:39] and then this one so that's more of a
[03:40] non-deterministic workflow and that's
[03:42] when you need to use something like an
[03:43] AI agent the difference here is that
[03:45] it's choosing its own steps the process
[03:48] is not predefined meaning every time we
[03:49] throw an input we're not sure what's
[03:51] going to happen and what we're going to
[03:52] get back and then the agent also Loops
[03:55] calls its tools it observes what happens
[03:58] and then it Rel loops and thinks about
[03:59] it again until it realizes okay based on
[04:02] the input I've done my job now I'm going
[04:03] to spit something out and so here's just
[04:05] a different visualization of you know an
[04:07] AI agent with an input the agent has
[04:09] decision and then there's an output or
[04:11] this AI workflow where we have an input
[04:13] tool one llm call tool two tool three
[04:16] output where it's going to happen in
[04:17] that process every single time and the
[04:19] truth is that most problems don't
[04:21] require true AI agents they can simply
[04:23] be solved with building a workflow that
[04:25] is enhanced with AI and a common mistake
[04:28] and I think it's just because of all the
[04:29] hype around AI agents is that people are
[04:31] opting straight away to set up an agent
[04:33] like in this example right here let's
[04:35] say the input is a form trigger where
[04:36] we're getting a form response we're
[04:38] using this tool to clean up the data
[04:40] we're using this llm call so it's an AI
[04:42] enhanced workflow to actually write a
[04:44] personalized email we're using this to
[04:46] update the CRM and then we're using this
[04:47] to send the email and then we get the
[04:49] output back as the human we can also set
[04:51] this up as a AI agent where we're
[04:53] getting the form response we're sending
[04:55] this agent the information and it can
[04:56] choose okay first I'm going to clean the
[04:58] data and then I'm going to come back
[04:59] here and think about it and then I'm
[05:00] going to update the CRM and then I'm
[05:02] going to create an email and then I'm
[05:04] going to send the email and then I'm
[05:05] going to output and respond to the human
[05:07] and tell it that you know we we did that
[05:09] job for you but because this process is
[05:11] pretty linear it's going to be a lot
[05:12] more consistent if we do a workflow it's
[05:14] going to be easier to debug whereas over
[05:16] here the agent May mess up some tool
[05:18] calls and do things in the wrong order
[05:20] so it's better to just structure it out
[05:21] like that and so if we start approaching
[05:23] using these no code tools to build AI
[05:25] workflows first then we can start to
[05:27] scale up to agents once we need more
[05:28] Dynamic decision making and Tool calling
[05:31] okay but that's enough of the harsh
[05:32] truths let's get into the seven most
[05:34] important lessons I've learned over the
[05:36] 6 months of building AI agents as a
[05:38] non-programmer so the first one is to
[05:40] build workflows first and notice I don't
[05:42] even say AI workflows here I say
[05:44] workflows so over the past six months of
[05:46] building out these systems and hopping
[05:48] on Discovery calls with clients where
[05:49] I'm trying to help them Implement AI
[05:51] into their business processes we always
[05:53] start by you know having them explain to
[05:55] me some of their pain points and we talk
[05:57] through processes that are repetitive
[05:59] and and processes that are a big time
[06:01] suck and a lot of times they'll come in
[06:03] you know thinking they need an AI agent
[06:04] or two and when we really start to break
[06:06] down this process I realized this
[06:08] doesn't need to be an agent this could
[06:09] be an AI workflow and then we break down
[06:11] the process even more and I'm like we
[06:12] don't even need AI here we just need
[06:14] rule-based Automation and we're going to
[06:16] send data from A to B and just do some
[06:19] manipulation in the middle so let's look
[06:21] at this flowchart for example here we
[06:22] have a form submission we're going to
[06:23] store data we're going to Route it based
[06:25] on if it's sales support or general
[06:28] we'll have that ticket or notification
[06:30] send an automated acknowledgement and
[06:31] then we'll end the process so this could
[06:33] be a case where we don't even need AI if
[06:35] we're having the forms come through and
[06:37] there's already predefined these three
[06:39] types which are either sales support or
[06:40] general that's a really easy rules-based
[06:43] automation meaning does inquiry type
[06:45] equal sales if yes we'll go this way and
[06:47] so on and so forth now maybe there's AI
[06:50] we need over here to actually send that
[06:51] auto acknowledgement or it could be a
[06:53] simple as an automated message that
[06:54] we're able to Define based on the
[06:56] inquiry type now if this the form
[06:59] submission is just a a block of text and
[07:02] we need an AI to read it understand it
[07:04] and decide if it's sales support or
[07:06] general then we would need AI right here
[07:09] and that's where we would have to assess
[07:11] what the data looks like coming in and
[07:12] then what we need to do with the data so
[07:14] it's always important to think about do
[07:15] we even need AI here because a lot of
[07:17] times when we're trying to cut off some
[07:19] of that low hanging fruit when we
[07:20] realize that we're doing some of this
[07:21] stuff too manually we don't even need AI
[07:23] yet we're just going to create a few
[07:25] workflow automations and then we can
[07:27] start getting more advanced with adding
[07:28] AI in certain steps so hopefully this
[07:30] graphic adds a little more color here on
[07:32] the left we're looking at a rule based
[07:34] sort of filter and on the right we're
[07:35] looking at an AI powered filter so let's
[07:39] take a look at the left one first we
[07:40] have incoming data so let's just say
[07:41] we're routing data off based on if
[07:44] someone's budget is greater than 10 or
[07:46] less than 10 hopefully it's greater than
[07:48] 10 um so the filter here is is X greater
[07:51] than 10 if yes we'll send it up towards
[07:54] tool one if no we're going to send it
[07:56] down towards tool two and those are the
[07:58] only two options because those are the
[08:00] only two buckets that a number can fit
[08:02] into unless I guess it's exactly equal
[08:03] to 10 I probably should have made this
[08:05] sign a greater than or equal to but
[08:07] anyways you guys get the point now over
[08:08] here if we're looking at an AI powered
[08:10] sort of filter right here we're using a
[08:12] large language model to evaluate the
[08:14] incoming data answer some sort of
[08:15] question and then route it off based on
[08:18] criteria so incoming data we have to
[08:21] look at or sorry not we the AI is
[08:23] looking at what type of email this is
[08:25] because this uses some element of
[08:27] reasoning or logic or decision making
[08:30] something that actually needs to be able
[08:31] to read the context and understand the
[08:33] meaning of what's coming through in
[08:34] order to make that decision this is
[08:36] where before AI we would have to have a
[08:38] human in the loop we would have to have
[08:39] a human look at this data and analyze
[08:41] which way it's going to go rather than
[08:43] being able to write some sort of code or
[08:45] filter to do so because it's more than
[08:48] just like what words exist it's actually
[08:50] like how when these words come together
[08:52] in sentences and paragraphs what does it
[08:54] mean so AI is able to read that and
[08:57] understand it and now it can decide if
[08:58] it's a complaint if it's billing or if
[09:00] it's promotion and then based on what
[09:02] type it is we'll send it off to a
[09:03] different tool to take the next action
[09:06] so the big takeaway here is to find the
[09:07] simplest approach first you may not even
[09:10] need an agent at all so why would you
[09:12] add more complexity if you don't have to
[09:14] and also if you start to learn the
[09:15] fundamentals of workflow automation data
[09:17] flow logic creative problem solving all
[09:20] that kind of stuff it's going to make it
[09:22] so much easier when you decide to scale
[09:23] up and start building out these multi-
[09:25] agentic systems as far as you know
[09:27] sending data between workflows and
[09:29] understanding Landing routing your
[09:31] life's going to be a lot easier so only
[09:33] use AI where it actually is going to
[09:34] provide value and also using Ai and
[09:37] hitting an llm isn't free typically I
[09:39] mean if you're self-hosting but anyways
[09:42] it's not free so why would you want to
[09:43] spend that extra money in your workflow
[09:45] if you don't have to you can scale up
[09:46] when you need the system to decide the
[09:48] steps on its own when you need it to
[09:50] handle more complex multi-step reasoning
[09:53] and when you needed to control usage
[09:55] dynamically and I highlighted those
[09:56] three words because that's very like
[09:58] human sounding right decide reason
[10:01] Dynamic okay moving on to lesson number
[10:03] two this is to wireframe before you
[10:05] actually get in there and start building
[10:07] one of the biggest mistakes that I made
[10:08] early on and that I see a ton of people
[10:09] making early on is jumping straight into
[10:12] their Builder whatever it is and trying
[10:14] to get the idea in their head onto a
[10:16] canvas without mapping it out at all and
[10:18] this causes a lot of problems so the
[10:20] three main ones here are you you start
[10:22] to create these messy over complicated
[10:24] workflows because you haven't thought
[10:25] out the whole process yet you're going
[10:27] to get confused over where you actually
[10:28] need AI where you don't and you may end
[10:31] up spending hours and hours debugging
[10:33] trying to revise um all this kind of
[10:36] stuff because you didn't consider either
[10:38] a certain integration upfront or a
[10:39] certain functionality up front or you
[10:41] didn't realize that this could be broken
[10:42] down into different workflows and it
[10:44] would make the whole thing more
[10:45] efficient I can't tell you how many
[10:46] times when I started off building these
[10:48] kind of things that I got almost near
[10:49] the end and I realized I could have done
[10:52] this with like 20 less nodes or I could
[10:54] have done this in two workflows and made
[10:55] it a lot simpler so I end up just
[10:57] deleting everything and restarting so
[10:59] what we're looking at right here are
[11:00] different Escala draw wireframes that I
[11:02] had done as you can see I kind of do
[11:03] them differently each time there's not
[11:05] really a you know defined way that you
[11:07] need to do this correctly or correct
[11:09] color coding or shapes the idea here is
[11:11] just to get your thoughts from your head
[11:13] onto a paper or onto a screen and map it
[11:16] out before you get into your workflow
[11:18] Builder because then in the process of
[11:20] mapping things out you're going to
[11:22] understand okay there may be some
[11:23] complexities here or I need all of this
[11:25] functionality here that I didn't think
[11:26] of before and this isn't really to say
[11:28] that there's one correct way too
[11:29] wireframe as you can see sometimes I do
[11:31] it differently um there's not like a
[11:32] designated schema or color type or shape
[11:35] type that you should be using whatever
[11:37] makes sense to you really but the idea
[11:39] here is even if you don't want to
[11:40] wireframe and Visually map stuff out
[11:42] it's just about planning before you
[11:44] actually start building
[11:46] so how can you break this whole project
[11:48] you know a lot of people ask me I have
[11:50] an input and I know what that looks like
[11:51] and I know what I want to get over here
[11:53] but in between I have no idea what that
[11:55] looks like so how can we break this
[11:57] whole project into workflows
[11:59] and each workflow is going to have like
[12:01] individual tasks within that workflow so
[12:03] breaking it down to as many small tasks
[12:05] as possible makes it a lot more easy to
[12:07] handle makes it a lot less overwhelming
[12:09] than looking at the entire thing at once
[12:10] and thinking how do I get from A to Z
[12:13] and so what that looks like to either
[12:14] wireframe or to just write down the
[12:17] steps is you want to think about what
[12:19] triggers this workflow how does this
[12:20] process start and what does the data
[12:22] look like coming in that triggers it
[12:24] from there how does the data move where
[12:27] does it go am I able to send it down One
[12:28] path do I have to send it off different
[12:30] ways based on some conditional logic do
[12:33] I need some aspect of AI to take
[12:35] decisions based on the different types
[12:36] of data coming through you know what
[12:38] actions have to be taken where do we
[12:40] need rag or API calls involved where do
[12:43] we need to go out somewhere to get more
[12:45] external data to enrich the context
[12:47] going through to the next llm what
[12:49] Integrations are involved so if you ask
[12:51] yourself these kind of questions while
[12:53] you're writing down the steps or while
[12:54] you're wireframing out the skeleton of
[12:56] the build you are going to answer so
[12:58] many more question questions especially
[12:59] if it comes to you know you're trying to
[13:01] work with a client and you're trying to
[13:03] understand the scope of work and
[13:04] understand what the solution is going to
[13:05] look like if you wireframe it out you're
[13:08] going to have questions for them that
[13:09] they might have not have thought of
[13:10] either rather than you guys agree on a
[13:12] scope of work and you start building
[13:13] this thing out and then all of a sudden
[13:15] there's all these complexities maybe you
[13:16] priced way too low maybe you don't know
[13:18] the functionality and the idea here is
[13:21] just to completely align on what you're
[13:23] trying to build and what the client
[13:25] wants or what you're trying to build and
[13:27] what you're actually going to do in your
[13:28] canvas so there's multiple use cases but
[13:30] the idea here is that it's just going to
[13:32] be so so helpful and because you're able
[13:34] to break down every single step and
[13:36] every task involved you'll have a super
[13:38] clear idea on if it's going to be an
[13:39] agent or if it's going to be a workflow
[13:41] because you'll see if the stuff happens
[13:42] in the same order or if there's an
[13:44] aspect of decision- making involved so
[13:47] when I'm approaching a client build or
[13:48] an internal automation that I'm trying
[13:49] to build for myself there is no way that
[13:52] more than half of my time is spent in
[13:54] the Builder pretty much upfront I'm
[13:57] doing all of the wire Framing and
[13:58] understanding what this is going to look
[13:59] like because the goal here is that we're
[14:01] basically creating a step-by-step
[14:03] instruction manual of how to put the
[14:04] pieces together you should think of it
[14:06] as if you're putting together a Lego set
[14:07] so you would never grab all the pieces
[14:09] from your bag of Legos rip it open and
[14:12] just start putting them together and
[14:13] trying to figure out where what goes
[14:15] where you're always going to have right
[14:16] next to you that manual where you're
[14:17] looking at like basically the
[14:19] step-by-step instructions and flipping
[14:20] through so that's what I do with my two
[14:22] monitors on the left I have my wireframe
[14:23] on the right I have my nadn and I'm just
[14:25] looking back and forth and connecting
[14:26] the pieces where I know the Integrations
[14:29] are supposed to be you need a clear plan
[14:31] otherwise you're not going to know how
[14:32] everything fits together it's like you
[14:34] were trying to you know build a 500
[14:35] piece puzzle but you're not allowed to
[14:37] look at the actual picture of a
[14:39] completed puzzle and you're kind of
[14:40] blindly trying to put them together you
[14:42] can do it it can work but it's going to
[14:44] take a lot longer moving on to number
[14:45] three we have context is everything the
[14:47] AI is only going to be as good as the
[14:49] information that you provide it it is
[14:51] really cool the tech has come so far
[14:53] these AI models are super super
[14:54] intelligent but they're pre-trained so
[14:57] they can't just figure things out
[14:58] especially if they're operating within a
[15:00] specific domain where there's you know
[15:01] industry jargon or your specific
[15:03] business processes it needs your subject
[15:06] matter expertise in order to actually be
[15:08] effective it doesn't think like we do it
[15:10] doesn't have past experiences or
[15:11] intuition at least right away we can
[15:13] give it stuff like that it only works
[15:15] with the data it's given so garbage in
[15:17] equals garbage out so what happens if
[15:19] you don't provide high quality context
[15:21] hallucination the a is going to start to
[15:23] make up stuff tool misuse it's not going
[15:25] to use the tools correctly and it's
[15:26] going to fail to achieve your tasks that
[15:28] you need it to do and then vague
[15:30] responses if it doesn't have clear
[15:31] Direction and a clear sight of like what
[15:33] is the goal what am I trying to do here
[15:35] it is just not going to be useful it's
[15:37] going to be generic and it's going to
[15:38] sound very obviously like it came from a
[15:40] chat gbt so a perfect example here is
[15:43] the salesperson analogy let's say you
[15:44] hire a superstar salesman who is amazing
[15:48] great sales technique he understands how
[15:49] to build rapport closing techniques
[15:52] communication skills just like maybe
[15:54] you're taking a GPT 40 model out of the
[15:56] box and you're plugging it into your
[15:57] agent now no matter how good that model
[15:59] is or the salesperson is there are going
[16:02] to be no closed sales without the
[16:04] subject matter expertise the business
[16:06] process knowledge you know understanding
[16:08] the pricing the features the examples
[16:10] all that kind of stuff so the question
[16:12] becomes how do you actually provide your
[16:13] AI agents with better context and there
[16:16] are three main ways here the first one
[16:17] is within your agent you have a system
[16:19] prompt so this is kind of like the
[16:20] fine-tuning of the model where we're
[16:22] training it on this is your role this is
[16:24] how you should behave this is what
[16:25] you're supposed to do then we have the
[16:27] sort of memory of of the agent which is
[16:30] more of the short-term memory we're
[16:31] referring to right here where it can
[16:33] understand like the past 10 interactions
[16:34] it had with the user based on the input
[16:37] stuff like that and then the final
[16:39] aspect which is very very powerful is
[16:41] the rag aspect where it's able to go
[16:42] retrieve information that it doesn't
[16:44] currently have but it's able to
[16:45] understand what do I need to go get and
[16:47] where can I go get it so it can either
[16:49] hit different apis to get real-time data
[16:51] or it can hit its knowledge base that
[16:52] hopefully is syncing dynamically and is
[16:54] updated so either way it's reaching
[16:57] outside of its system to get more
[16:59] information from these external sources
[17:02] so anyways pre-loaded knowledge this is
[17:04] basically where you tell the agent its
[17:06] job its description its role as if on
[17:08] day one of a summer internship you told
[17:11] the intern okay this is what you're
[17:12] going to do all summer you define its
[17:14] job responsibilities you would give key
[17:16] facts about your business and you would
[17:18] give it rules and guidelines to follow
[17:20] and then we move on to the user specific
[17:21] context which is just sort of its memory
[17:23] based on the person it's interacting
[17:25] with so this reminds the AI what the
[17:27] customer's already asked previous
[17:29] troubleshooting steps that have been
[17:30] taken maybe information about the
[17:32] customer and without this user context
[17:34] specific memory the AI is going to ask
[17:36] the same questions over and over it's
[17:38] going to forget what's already been
[17:39] conversated about and it'll probably
[17:41] just annoy the end user with repetitive
[17:44] information and not very tailored
[17:46] information so we're able to store these
[17:48] past interactions so that the AI can see
[17:50] it before it responds and before it
[17:52] takes action so that it's actually more
[17:53] seamless like a human conversation it's
[17:56] more natural and efficient and then we
[17:57] have the aspect of the real real time
[17:59] context this is because there's some
[18:01] information that's just too dynamically
[18:02] changing or too large to fit within the
[18:05] actual system prompt of the agent so
[18:07] instead of relying on this predefined
[18:08] knowledge we can retrieve this context
[18:10] dynamically so maybe it's as simple as
[18:12] we're asking the agent what the weather
[18:13] is so it hits that weather API in order
[18:15] to go access real-time current
[18:17] information about the weather it pulls
[18:19] it back and then it responds to us or it
[18:21] could be you know we're asking about
[18:22] product information within a database so
[18:24] I could go hit that knowledge base what
[18:26] that has all of our product information
[18:27] and it will search through it look for
[18:29] what it needs and then pull it back and
[18:31] then respond to us with it so that's the
[18:33] aspect of rag and it's super super
[18:34] powerful okay and this is a great segue
[18:37] from rag now we're talking about Vector
[18:39] databases and when not to use a vector
[18:41] database so I think something similar
[18:43] happened here with Vector databases as
[18:45] the same way it happened with AI agents
[18:47] is that it was just some cool magic
[18:49] buzzword and it sounded like almost too
[18:51] good to be true so everyone just started
[18:53] overusing them and overusing the term
[18:55] and that's definitely something that I
[18:57] have to admit that I fell victim to
[18:59] because when I first started building
[19:01] this stuff I was taking all types of
[19:03] data no matter what it was and I was
[19:04] just chucking it into a vector database
[19:06] and chatting with it and because you
[19:08] know 70% of the time I was getting the
[19:10] right answers I was like this is so cool
[19:12] because it's that you know as you can
[19:13] see based on this illustration it is
[19:15] sort of like that
[19:17] multi-dimensional data representation
[19:19] it's a multi-dimensional space where the
[19:21] data points that you were storing are
[19:22] stored as these little vectors these
[19:24] little dots everywhere and they're not
[19:26] just placed in there they're placed in
[19:27] there intelligently Because the actual
[19:30] context of the chunk that you're putting
[19:32] into the vector database it's placed
[19:34] based on its meaning so it's embedded
[19:36] based on all these numerical
[19:38] representations of data as you can see
[19:39] like right up here this is what the sort
[19:42] of um embedding Dimensions look like and
[19:44] each point has meaning and so it's
[19:46] placed somewhere where other things are
[19:48] placed that are similar they're placed
[19:50] near them so over here we have like you
[19:52] know animals cat dog wolf those are
[19:54] placed similarly we have like fruits
[19:55] over here but also like Tech stuff
[19:57] because Google's here and app which
[19:59] isn't the fruit but it's also the tech
[20:00] brand so you know it also kind of shifts
[20:03] as as you embed more vectors in there so
[20:05] it's just like multi- changing it's very
[20:07] intelligent and the agent's able to scan
[20:09] everything and grab back all the chunks
[20:10] that are relevant really quickly and
[20:13] like I said it's just kind of one of
[20:14] those buzzwords that super cool however
[20:17] even though it sounds cool after
[20:19] building these systems for a while I
[20:20] learned that Vector databases are not
[20:22] always necessary for most business
[20:24] automation needs if your data is
[20:26] structured and it needs exact retrieval
[20:28] which a lot of times company data is
[20:30] very structured and you do need exact
[20:32] retrieval a relational database is going
[20:34] to be much better for that use case and
[20:36] you know just because it's a buzzword
[20:39] that's exactly what it is a buzzword so
[20:41] that doesn't always mean it's the best
[20:42] tool for the job so because in college I
[20:44] studied business analytics I've had a
[20:46] little bit of a background with like
[20:48] databases relational databases and
[20:50] analytics um but if you don't really
[20:52] understand the difference between
[20:53] structured and unstructured data and
[20:55] what a relational database is we'll go
[20:57] over it real quick structure data is
[20:59] basically anything that can fit into
[21:01] rows and columns because it has an
[21:03] organized sort of predictable schema so
[21:06] in this example we're looking at
[21:07] customer data and we have two different
[21:09] tables and this is relational data
[21:11] because over here we have a customer ID
[21:13] column so customer ID 101 is Alice and
[21:16] we have Alice's email right here
[21:18] customer ID 102 is Bob we have Bob's
[21:20] email and then we have a different table
[21:22] that is able to relate back to this
[21:24] customer lookup table because we match
[21:26] on The Field's customer ID anyway this
[21:29] is an order table it looks like so we
[21:30] have order one by customer ID 101 and
[21:33] the product was a laptop and we may
[21:34] think okay well we're looking at order
[21:36] one who was that we can relate it back
[21:38] to this table based on the customer ID
[21:40] and then we can look up who that user
[21:42] was so there's a lot of use cases out
[21:44] there when I said you know a lot of
[21:45] business data is going to be structured
[21:47] like user profiles sales records you
[21:49] know invoice details all this kind of
[21:51] stuff you know even if it's not a
[21:53] relational aspect of linking two tables
[21:55] together if it's structured data which
[21:57] is going to be you know a lot of chart
[21:59] stuff number Stuff um Excel sheets
[22:02] Google Sheets all that kind of stuff
[22:04] right and if it's structured data it's
[22:06] going to be a lot more efficient to
[22:07] query it using SQL rather than trying to
[22:10] vectorize it and put it into a vector
[22:11] database for semantic search
[22:14] so we said as a non-programmer if you're
[22:17] you know I'm sure you've been hearing
[22:18] SQL querying and maybe you don't
[22:20] understand exactly what it is this is
[22:21] what it is right so we're almost kind of
[22:24] using natural language to extract
[22:26] information but we could have you know
[22:27] half a million records in a table and so
[22:30] it's just a quicker way to actually
[22:31] filter through that stuff to get what we
[22:32] need so in this case let's say the SQL
[22:35] query we're doing is based on the user
[22:38] question of can you check the status of
[22:40] my order for wireless mouse placed on
[22:42] January 10th on the left we have an
[22:44] orders table and this is the information
[22:46] we need these are the fields but there
[22:48] may be 500,000 records so we have to
[22:50] filter through it really quickly and how
[22:52] we would do this is we would say Okay
[22:54] first we're going to do a select
[22:54] statement which just means okay we just
[22:56] want to see order ID order date order
[22:58] status because those are the only
[22:59] columns we care about we want to grab it
[23:01] from the orders table so this table and
[23:03] then now we set up our filters so we're
[23:05] just looking for only rows where product
[23:07] name equals wireless mouse because
[23:09] that's the product she bought and then
[23:11] um and the order date is January 10 to
[23:14] 20 2024 so we're just saying whenever
[23:17] these two conditions are met that's when
[23:20] we want to grab those records and
[23:22] actually look at them so that's an
[23:23] example of like what a SQL query is
[23:25] doing and then on the other side of
[23:27] things we have unstructured data which
[23:28] is usually the best use case for
[23:30] unstructured data going to a vector
[23:32] database based on my experience is just
[23:34] vectorizing a ton of text so big walls
[23:36] of text chunking them up throwing them
[23:38] into a vector database and they're
[23:40] placed you know based on the meaning of
[23:41] those chunks and then can be grabbed
[23:43] back semantically intelligently by the
[23:45] agent but anyways this is a quick
[23:47] visualization that I made right over
[23:48] here let's say we have um a t tons of
[23:51] PDFs and they're just basically policy
[23:53] information we take that text we chunk
[23:55] it up so we're just splitting it based
[23:57] on the characters within the actual
[23:58] content and then each chunk becomes a ve
[24:00] a vector which is just one of these dots
[24:02] in this threedimensional space and
[24:04] they're placed in different areas like I
[24:06] said based on the actual meaning of
[24:08] these chunks so super cool stuff right
[24:11] so then when the agent wants to you know
[24:13] look in the vector database to pull some
[24:14] stuff back it basically makes a query
[24:16] and vectorizes that query because it
[24:18] will be placed near other things that
[24:20] are related and then it will grab like
[24:22] everything that's near it and that's how
[24:23] it pulls back if we're doing like a
[24:25] nearest neighbor search but don't want
[24:26] to get too technical here I wanted to
[24:28] show an example of like why that's
[24:30] beneficial so on the left we have
[24:34] product information about blankets and
[24:36] on the right we also have product
[24:37] information about blankets and we just
[24:39] decided on the right it's a vector
[24:40] database on the left it's a relational
[24:42] database and so let's say we hooked this
[24:45] up to you know a customer chatbot on a
[24:47] website and the customer asked I'm
[24:50] looking for blankets that are fuzzy now
[24:53] if it was a relational database the
[24:55] agent would be looking through and
[24:57] querying for you know where the
[24:58] description contains the word fuzzy or
[25:00] maybe material is contains the word
[25:02] fuzzy and because there's no instances
[25:04] of the word fuzzy right here we may get
[25:07] nothing back but on the other side of
[25:10] things when we have the vector database
[25:12] because each of these vectors are placed
[25:14] based on the meaning of their
[25:15] description and their material the agent
[25:17] will be able to figure out okay if I go
[25:19] over here and I pull back these vectors
[25:21] these are probably fuzzy because I
[25:23] understand that it's cozy fleece or it's
[25:25] um you know handwoven cotton so that's
[25:28] like like why there's some extra
[25:29] benefits there because maybe it's not a
[25:31] word for word match but the agent can
[25:33] still intelligently pull back stuff
[25:34] that's similar based on the actual
[25:36] context of the chunks and the meaning
[25:38] okay moving on to number five why
[25:40] prompting is critical for AI agents um
[25:43] we already talked about it a little bit
[25:44] I guess in the context is everything
[25:46] section because prompting is giving it
[25:49] more context but this should be a whole
[25:52] lesson in itself because it is truly an
[25:55] art and you have to find that fine line
[25:57] between you don't want over prompt it
[25:59] and you want to minimize your token
[26:00] usage but you also want to give it
[26:01] enough information but um when people
[26:04] think of prompting they think of chbt as
[26:06] you can see right here where you have
[26:07] the luxury of talking to chat it's going
[26:09] to send you something back you can tell
[26:10] it hey make that shorter or hey make it
[26:12] more professional it'll send it back and
[26:14] you can keep going back and forth and
[26:15] making adjustments until you're happy
[26:17] with it and then you can finally accept
[26:18] the output but when we're dealing with
[26:21] AI agents and we're trying to make these
[26:22] systems autonomous we only have one shot
[26:25] at it so we're going to put in ass
[26:26] system prompts right here that the agent
[26:28] will be to look at every time there's
[26:29] like an input and we have to trust that
[26:31] the output and the actions taken before
[26:33] the output are going to be high quality
[26:36] and so like I said this is a super
[26:37] interesting topic and if you want to see
[26:39] a video where I did more of a deep dive
[26:40] on it you can check it out I'll tag it
[26:42] right here um where I talked about like
[26:43] this lesson but the biggest thing I
[26:45] learned building these agents over the
[26:47] past six months was reactive prompting
[26:51] is way better than proactive prompting
[26:53] admittedly when I started prompting I
[26:55] did it all wrong I was lazy and I would
[26:57] just like grab a custom GPT that I saw
[27:00] someone use on YouTube for you know a
[27:02] prompt generator that generates the most
[27:04] optimized prompts for your AI agents I
[27:05] think that that's honestly a bunch of
[27:07] garbage I even have created my own AI
[27:09] agent system prompt architect and I
[27:11] posted it in my community and people are
[27:13] using it but I wouldn't recommend to use
[27:15] it to be honest um nowadays I think that
[27:18] the best practice is to write all of
[27:19] your prompts from scratch by hand from
[27:22] the beginning and start with nothing so
[27:23] that's what I meant by saying reactive
[27:25] prompting because if you're grabbing a
[27:27] whole you know let's say you have 200
[27:28] lines of prompts and you throw it in
[27:30] here into your system prompts and then
[27:31] you just start testing your agent you
[27:34] don't know what's going on and why the
[27:36] agent's behaving as it is you could have
[27:38] an issue pop up and you add a different
[27:40] line in the system prompt and the issue
[27:43] that you originally were having is fixed
[27:45] but now a new issue's popped up and
[27:46] you're just going to be banging your
[27:47] head against the wall trying to debug
[27:49] this thing by taking out lines testing
[27:51] adding lines testing it's just going to
[27:53] be such a painful process when in
[27:55] reality what you should do is reactive
[27:58] prompt so start with nothing in the
[27:59] system prompt give your agent a tool and
[28:01] then test it throw in a couple queries
[28:03] and see if you're liking what's coming
[28:05] back you're going to observe that
[28:06] behavior and then you have the ability
[28:08] to correct the system prompt reactively
[28:11] So based on what you saw you can add in
[28:13] a line and say hey don't do that or you
[28:15] know this worked let's add another tool
[28:17] and add another prompt now or another
[28:19] line in the prompt because what we know
[28:21] right now is that it's working based on
[28:23] what we have that way if we do add a
[28:26] line and then we test and then we
[28:28] observe the behavior and we see that it
[28:29] broke we know exactly what broke this
[28:32] Automation and we can pinpoint it rather
[28:34] than if we threw in a whole
[28:35] pre-generated system prompt so that's
[28:37] the main reason why I don't do that
[28:39] anymore and then it's just that Loop of
[28:41] test reprompt test again reprompt um and
[28:45] what's super cool about this is because
[28:47] you can basically hard prompt your agent
[28:50] with things in the system prompt because
[28:52] you're able to show it examples of you
[28:54] know hey I just asked you this and you
[28:56] took these steps that was wrong don't do
[28:58] that again this is what you should have
[28:59] done and basically if you give it that
[29:01] example within the system prompt you're
[29:03] training this thing to not behave like
[29:05] that and you're only improving the
[29:06] consistency of your agent's performance
[29:09] so the the key elements of a strong AI
[29:11] agent prompt and this isn't like every
[29:13] single time these are the five things
[29:14] you should have because every agent's
[29:16] different for example if you're creating
[29:18] a context creation agent you wouldn't
[29:20] need a tool section really if it's not
[29:22] if it doesn't have any tools You' just
[29:23] be prompting it about its output and
[29:25] about its role but anyways the first one
[29:27] that we're talking about is role this is
[29:29] sort of just like telling the AI who it
[29:30] is so this could be as simple as like
[29:32] you're a legal assistant specializing in
[29:33] corporate law your job is to summarize
[29:35] contracts in simple terms and flag risky
[29:38] Clauses something like that it gives the
[29:40] AI clear purpose and it helps the model
[29:43] understand the tone and the scope of its
[29:44] job without this the AI is not going to
[29:47] know how to frame responses and you're
[29:48] going to get either very random outputs
[29:50] or you're going to get very vague
[29:51] outputs that are very clearly generated
[29:53] by AI then of course you have the
[29:55] context which is going to help the agent
[29:57] understand you know what is actually
[29:58] coming in every time because essentially
[30:00] you're going to have different inputs
[30:01] every time even though the system prompt
[30:03] is the same so saying like this is what
[30:04] you're going to receive this is what
[30:06] you're going to do with it um this is
[30:07] your end goal so that helps tailor the
[30:09] whole process and make it more seamless
[30:11] as well that's one common mistake I
[30:12] actually see with people's prompting
[30:14] when they start is they forget to Define
[30:16] what are you going to be getting every
[30:17] time because the agents either going to
[30:18] be getting a ton of different emails or
[30:20] maybe a ton of different articles but it
[30:21] needs to know okay this information that
[30:23] you're throwing at me what is it why am
[30:25] I getting it then of course the tool
[30:26] instructions so when you're building a
[30:28] tools agent this is the most important
[30:30] thing in my mind yes it's good to add
[30:32] rules and show like when you use each
[30:34] thing but having an actual section for
[30:36] your tools is going to increase the
[30:38] consistency a lot at least that's what I
[30:40] found because this tells the AI exactly
[30:42] what tools are available when to use
[30:44] them how they work um and this is really
[30:47] going to ensure correct tool usage
[30:49] rather than the AI trying to go off of
[30:51] like these sort of guidelines because
[30:53] it's a non deterministic workflow and um
[30:56] trying trying to guess of which one will
[30:57] do what and um yeah have a tool section
[31:00] and Define your tools then you've got
[31:02] your rules and constraints and this is
[31:04] going to help prevent hallucination it's
[31:06] going to help the agent stick to sort of
[31:07] like a standard operating procedure now
[31:09] you just have to be careful here because
[31:10] you don't want to say something like do
[31:13] all of these in this order every time
[31:15] because then it's like why are you even
[31:16] using an agent you should just be using
[31:18] a workflow right but anyways just
[31:20] setting some foundational like if x do y
[31:23] if Z do a like that sort of thing and
[31:27] then finally examples which I think are
[31:29] super super important but I would never
[31:31] just put these in here blind I would
[31:32] only use examples to directly counter
[31:35] and directly C uh correct something
[31:37] that's happened so what I alluded to
[31:39] earlier with the hard prompting so let's
[31:41] say you give the agent an input it calls
[31:42] tool one and then it gives you an output
[31:44] that's just incorrect completely
[31:45] incorrect you'd want to give it in the
[31:48] example you could show okay here's the
[31:49] input I just gave you now here's what
[31:51] you should have done call tool two and
[31:53] then call tool three and then give me
[31:55] the output and then it knows like okay
[31:57] that's what I did this is what I should
[31:58] have done so if I ever get an input
[31:59] similar to this I can just call these
[32:01] two tools because I know that's an
[32:02] example of like how I should behave so
[32:05] hard prompting is really really going to
[32:07] come in handy and not just in the
[32:08] examples but also just with the rest of
[32:10] your system prompts all right moving on
[32:13] to number six we have scaling agents can
[32:16] be a nightmare and this is all part of
[32:18] like one of the hard shoots I talked
[32:19] about earlier where a lot of the stuff
[32:21] you see online is a great proof of
[32:22] concept a great MVP but if you were to
[32:25] try to push this into production in your
[32:26] own business you're going to notice it's
[32:28] not there yet because when you first
[32:30] build out these AI agents everything can
[32:31] seem to work fine it's a demo it's cool
[32:33] it really opens your eyes to you know
[32:35] the capabilities but it hasn't usually
[32:37] gone under that rigorous testing and
[32:40] evaluation and setting up these guard
[32:42] rails um and all of that you know
[32:44] continuous monitoring that you need to
[32:45] do to evaluate its performance before
[32:48] you can push it out to all you know 100
[32:50] users that you want to eventually push
[32:52] it out to you know on a single user
[32:54] level if you have a few hallucinations
[32:55] every once in a while it's not a huge
[32:57] deal but as you scale the use case
[33:00] you're just going to be scaling
[33:01] hallucinations and scaling problems and
[33:03] scaling all these failures so that's
[33:05] where it gets tricky you can start to
[33:07] get retrieval issues as your database
[33:09] grows it's going to be harder for your
[33:10] agent to cut through the noise and grab
[33:12] what it needs so you're going to get
[33:13] more you know inaccuracies you're going
[33:15] to have some different performance
[33:16] bottlenecks and the agent's you know
[33:17] latency is going to increase you're
[33:19] going to start to get inconsistent
[33:20] outputs and you're going to experience
[33:22] all those edge cases that you hadn't
[33:23] thought of when you were the only one
[33:25] testing because you know there's just an
[33:27] infinite amount of scarios that an agent
[33:28] could be exposed to so a good little
[33:30] lesson learned here would be to scale
[33:31] vertically before you start to try to
[33:33] scale horizontally which um we'll break
[33:36] that down and I made this little
[33:37] visualization so we can see what that
[33:38] means so let's say we want to help this
[33:41] business with their customer support
[33:42] Sales inventory and HR management rather
[33:46] than building out little building blocks
[33:48] of tools within each of these processes
[33:50] let's try to perfect one area first
[33:53] vertically and then we'll start to move
[33:54] across the organization and look at
[33:56] doing other things and scaling to more
[33:57] users so because we can focus on this
[33:59] one area we can set up a knowledge base
[34:02] and set up like the data sources and
[34:03] build that automated pipeline we can set
[34:05] up how this kind of stuff gets organized
[34:07] with our subw workflows we can set up
[34:09] you know an actual agent that's going to
[34:10] have different tool calls and within
[34:13] this process what we have over here are
[34:15] evaluations monitoring performance and
[34:18] then setting up those guard rails
[34:19] because we're testing throughout this
[34:21] you know ecosystem vertically and and
[34:23] getting exposure to all these different
[34:25] edge cases before we try to move into
[34:27] other you know areas where we need to
[34:29] basically start this whole process again
[34:30] we want to have done the end to end
[34:32] system first understand you know the
[34:35] problems that may arise how to make it
[34:36] robust and how to evaluate and you know
[34:40] iterate over it before we start making
[34:41] more automations and so like I alluded
[34:43] to earlier if you try to start scaling
[34:45] horizontally too quick before you've
[34:46] done all these testing you are going to
[34:49] notice that hallucinations are going to
[34:50] increase your retrieval quality is going
[34:52] to drop as more us users come in the
[34:54] agent's handling more memory it's
[34:56] handling more um more knowledge in its
[34:59] database to try to cut through your
[35:01] response times are going to slow and
[35:02] then you're just going to get more
[35:03] inconsistent results and so you can do
[35:05] things like you know setting strict
[35:06] retrieval rules and guard rails you
[35:08] could do stuff like segmenting your data
[35:10] into different Vector databases based on
[35:12] the context or different name spaces or
[35:14] different you know relational databases
[35:16] you could use stuff like um asynchronous
[35:18] processing or caching in order to
[35:20] improve that response time and then you
[35:22] could also look at doing stuff like only
[35:24] you know um having an agent evaluate and
[35:27] making sure the confidence on these
[35:29] responses are above a certain threshold
[35:31] otherwise we'll you know request human
[35:33] help and not actually respond ourselves
[35:35] or the agent wouldn't respond itself so
[35:38] the seventh one is that no code tools
[35:39] like n8n have their limits they're super
[35:42] great they're really empowering
[35:44] non-developers to get in here and spin
[35:46] up some really cool automations and it's
[35:48] really like the barrier to entry is so
[35:50] low you can learn how to build the stuff
[35:51] really quickly which is why I think it's
[35:53] awesome and you know it's the main tool
[35:54] that I use um personally and also within
[35:57] my agency
[35:58] but when you start to get into what we
[36:00] just talked about with lesson number six
[36:02] scaling and making these things really
[36:03] robust and production ready you may
[36:05] notice some limits with no code tools
[36:07] like NN now the reason I got into
[36:09] building stuff like this is because you
[36:11] know obviously non-programmer and it has
[36:14] a really nice dragon drop interface
[36:16] where you can build these workflows very
[36:17] visually without writing scripts so NN
[36:20] is you know basically open source
[36:22] because you can self-host it the code is
[36:23] accessible um and it's built on top of
[36:26] Lang chain which is just like a
[36:27] basically a language that helps connect
[36:29] to different things and create these
[36:31] like agents um and because of that it's
[36:33] just wrapped up really pretty for us in
[36:35] a graphical user interface where we can
[36:37] interact with it in that Dragon drop way
[36:40] without having to get in there and
[36:41] Hands-On keyboard write code and it has
[36:44] a ton of pre-built Integrations as you
[36:45] can see right here connect anything to
[36:47] everything um I think there's like a
[36:49] thousand Integrations right here and all
[36:50] of these different Integrations are API
[36:53] calls they're just wrapped up once again
[36:55] in a pretty way for us in a user
[36:56] interface and like I talked about
[36:58] earlier when I started I didn't even
[37:00] know what an API was so the barrier
[37:01] entry was super low I was able to
[37:02] configure this stuff easily and besides
[37:04] these built-in Integrations they have
[37:06] these really simple tool calls so
[37:07] development is really fast with Building
[37:09] workflows compared to traditional coding
[37:11] um the modularity aspect because you can
[37:13] basically build out a workflow you can
[37:15] save that as a tool and then you can
[37:17] call that tool from any other workflow
[37:18] you want so once you build out a
[37:20] function once you've basically got it
[37:21] there forever and it can be reused which
[37:23] is really cool and then my favorite
[37:25] aspect about NAD and the visual
[37:26] interface is the visual debugging
[37:28] because rather than having 300 lines of
[37:30] code and you know you're getting errors
[37:32] in line 12 and line 45 you're going to
[37:34] see it's going to be red or it's going
[37:36] to be green and you know if it's green
[37:38] you're good and if you see red there's
[37:40] an error so you know exactly usually you
[37:42] know exactly where the problems coming
[37:43] from and you're able to get in there
[37:45] look at the execution data and get to
[37:47] the bottom of it pretty quick but
[37:48] overall these no code platforms are
[37:50] great they allow us to connect apis we
[37:52] can connect to pretty much anything
[37:53] because we have an HTTP request within
[37:56] nen they're going to be really really
[37:58] good for rule-based decision- making
[38:00] like super solid um if we're creating
[38:02] workflows that's just going to do some
[38:03] data manipulation and transferring data
[38:05] around you know your typical ETL based
[38:07] on the structured logic super robust you
[38:09] can make some really really awesome
[38:11] basic AI powered workflows where you're
[38:12] integrating different llms you've got
[38:14] all the different chat models basically
[38:15] that you can connect to um for you know
[38:17] different classification or content
[38:19] generation or Outreach anything like
[38:21] that um your multi- agentic workflows
[38:23] because like I said earlier you have the
[38:25] aspect of creating different tools as
[38:27] workflows as well as creating agents as
[38:29] workflows that you can call on from
[38:31] multiple agents so you can really get
[38:32] into some cool multi- agentic Inception
[38:35] thing going on with with agents calling
[38:36] agents calling agents um and passing
[38:39] data between different workflows and
[38:41] then just the orchestration of AI
[38:43] Services coordinating multiple AI tools
[38:45] within a single process so that's the
[38:47] kind of stuff that NN is going to be
[38:49] super super good at and now the hidden
[38:51] limitations of these no code AI workflow
[38:54] SL agent Builders let's get into it now
[38:57] in my my opinion this stuff really just
[38:58] comes down to when we're trying to get
[39:00] into like Enterprise Solutions at scale
[39:02] with a ton of users and a ton of
[39:03] authentication and a ton of data because
[39:05] if you're building out your own internal
[39:07] automations you're going to be solid
[39:09] like there's not going to be limitations
[39:10] if you're building out you know proof of
[39:12] Concepts and MVPs um YouTube videos
[39:14] creating content like you can do it all
[39:16] I would say but when you need to start
[39:18] processing you know massive data sets
[39:20] that are going to scale to thousands or
[39:22] millions of users your performance can
[39:24] slow down or even fail and that's maybe
[39:26] where you'd want to r on some custom
[39:28] code backend to actually spin up these
[39:31] more robust functionalities in these
[39:33] agentic systems tool calling is really
[39:35] really critical the agent needs to be
[39:36] able to decide which one to use and do
[39:38] it efficiently and like I talked about
[39:40] NAD is built on top of Lang chain it
[39:43] provides a structured way to call AI
[39:44] models and apis but it lacks some of
[39:46] that flexibility of writing that really
[39:48] custom code within there for complex
[39:51] decisionmaking and then when it comes to
[39:53] authentication at scale it can struggle
[39:55] with like secure large scale
[39:56] Authentication and data Access Control
[39:59] obviously you can hook up to external
[40:00] systems to help with some of that
[40:02] processing but when it comes to maybe
[40:04] like handling oo tokens and all these
[40:06] encrypted credentials and session
[40:07] management not that it's not doable with
[40:10] nadn um it just seems like getting in
[40:13] there with some custom code it could be
[40:15] quicker and more robust and also that's
[40:18] coming from someone who doesn't actually
[40:20] do that myself um just some stuff I've
[40:22] heard and you know with what's going on
[40:24] within the agency now ultimately it
[40:26] seems like if you you are delivering
[40:27] this stuff at scale for some big clients
[40:30] um the best approach is going to be a
[40:31] mix a hybrid of no code and custom code
[40:35] because you can use nadn to spin up
[40:36] stuff really quick you've got that
[40:38] modularity you can orchestrate automate
[40:41] you know connect to anything you need
[40:43] but then working in every once in a
[40:44] while some custom python script for some
[40:46] of that complex you know large scale
[40:48] processing and data handling and when
[40:50] you combine these two together you're
[40:52] going to be able to spin some stuff up a
[40:53] lot quicker and that's going to be
[40:55] pretty robust and Powerful now if you
[40:57] really are serious about building out
[40:58] these AI automations and you're coming
[41:00] from a background of you know not a
[41:02] programmer so it seems a little
[41:03] intimidating I would definitely
[41:04] encourage you to check out my paid
[41:05] Community I have a full course in there
[41:07] about building a agents um we also have
[41:09] deep di topics on things like rag Vector
[41:11] databases apis and HTTP requests I'm
[41:14] also doing a lot of step-by-step and
[41:15] live builds in the community which I
[41:16] think are the best way to actually learn
[41:18] you know data flow live troubleshooting
[41:20] like the the the mindset and the
[41:23] creative problem solving that goes into
[41:24] building out these automations and on
[41:27] top of that we've got five live calls
[41:28] per week make sure you're never getting
[41:30] stuck you can get in there get your
[41:31] questions answered and it's a growing
[41:33] fast community so we have a ton of
[41:35] people in there everyone's kind of
[41:36] filtering in to learn about building AI
[41:38] automations um we've got beginners we've
[41:40] got people that are pretty Advanced
[41:41] we've got some people that are pretty
[41:42] techy so all the kind of questions you
[41:45] may have with troubleshooting or setting
[41:46] up your environments or even navigating
[41:48] if you're running an agency and you want
[41:50] to hear more about like how other people
[41:51] are pricing or approaching Discovery
[41:53] calls and actually deploying stuff on a
[41:55] client server whatever it is is um a
[41:57] great place to just be surrounded by
[41:59] like-minded people that are trying to do
[42:00] similar things and ultimately you know
[42:03] the space is so new it's moving so fast
[42:05] it's a very collaborative space right
[42:06] now which I love so just surrounding
[42:08] yourself with people that are trying to
[42:09] do the same things as you and winning
[42:11] all together as a community so would
[42:13] love to see you guys in that Community
[42:15] um but otherwise you know my channel is
[42:17] pretty much all about making this kind
[42:19] of stuff accessible to all types of
[42:22] people from all types of backgrounds my
[42:24] focus obviously is how can we build this
[42:26] stuff really easily
[42:27] um simplify all of it down and also give
[42:30] you guys all my templates that I make in
[42:32] my YouTube videos for free in my free
[42:34] school community so that way you can get
[42:36] in there download them plug them in and
[42:37] just like understand what's going on and
[42:39] how the data flows so um I hope to see
[42:42] you know you and some other videos I do
[42:44] a lot of stuff on the channel so check
[42:45] out you know other tutorials I've made
[42:47] and definitely let me know what else you
[42:48] want to see and also what you thought of
[42:50] this you know sort of style of content
[42:52] so really appreciate you guys making it
[42:54] to the end of this one as always if you
[42:56] appreciate this video If it helped you
[42:58] if you learned something new definitely
[42:59] give it a like it helps me out a ton and
[43:01] I will see you guys in the next one
[43:03] thanks everyone